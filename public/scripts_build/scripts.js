(function() {
    'use strict';

    angular.module('authApp', [
        'ui.router',
        'satellizer',
        'ui.bootstrap',
        'ui.bootstrap.modal',
        'angularjs-datetime-picker',
        'angularUtils.directives.dirPagination',
        'chart.js',
        'toastr',
        'ngChatbox',
        'ngMaterial',
        'ngMessages',
        'perfect_scrollbar',
        'ngMdIcons'
    ]);

    angular.module('authApp').config(function($stateProvider, $urlRouterProvider, $authProvider, $httpProvider, $provide, $mdThemingProvider,$mdIconProvider) {

        $mdThemingProvider.theme('default')
            .primaryPalette('teal')
            .accentPalette('red');

        $mdIconProvider.defaultIconSet("/svg/avatars.svg",
                128)
            .icon("menu", "/svg/menu.svg", 512)
            .icon("logout", "/svg/logout.svg", 512)
            .icon("default_profile", "/svg/default_profile.svg", 512)
            .icon("notifications", "/svg/notifications.svg",
                512);

        function redirectWhenLoggedOut($q, $injector) {

            return {

                responseError: function(rejection) {

                    // Need to use $injector.get to bring in $state or else we get
                    // a circular dependency error
                    var $state = $injector.get('$state');


                    // Instead of checking for a status code of 400 which might be used
                    // for other reasons in Laravel, we check for the specific rejection
                    // reasons to tell us if we need to redirect to the login state
                    var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid'];

                    // Loop through each rejection reason and redirect to the login
                    // state if one is encountered
                    angular.forEach(rejectionReasons, function(value, key) {

                        if (rejection.data.error === value) {

                            // If we get a rejection corresponding to one of the reasons
                            // in our array, we know we need to authenticate the user so
                            // we can remove the current user from local storage
                            localStorage.removeItem('user');

                            // Send the user to the auth state so they can login
                            $state.go('auth');
                        }
                    });
                    return $q.reject(rejection);
                }
            };
        }

        // Setup for the $httpInterceptor
        $provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);

        // Push the new factory onto the $http interceptor array
        $httpProvider.interceptors.push('redirectWhenLoggedOut');

        // Satellizer configuration that specifies which API
        // route the JWT should be retrieved from
        $authProvider.loginUrl = '/api/authenticate';

        // Redirect to the auth state if any other states
        // are requested other than users
        $urlRouterProvider.otherwise('/auth');

        $stateProvider
            .state('master', {
                abstract: true,
                controller: 'AuthController as auth',
                views: {
                    '@': {
                        templateUrl: '/views/layouts/master.tmpl.html',
                    }
                }
            })
            .state('auth', {
                url: '/auth',
                templateUrl: '/views/authView.html',
                controller: 'AuthController as auth'
            })
            .state('dashboard', {
                url: '/dashboard',
                parent: 'master',
                templateUrl: '/views/welcome.html',
                controller: 'UserController as user'
            })
            .state('mtuha_report', {
                url: '/mtuha_report',
                parent: 'master',
                templateUrl: '/views/mtuha_main_template.html',
                controller: 'UserController as user'
            })
            .state('os_labtests', {
                url: '/os_labtests',
                parent: 'master',
                templateUrl: '/views/os_labtests.html',
                controller: 'UserController as user'
            })
            .state('os_drugs', {
                url: '/os_drugs',
                parent: 'master',
                templateUrl: '/views/os_drugs.html',
                controller: 'UserController as user'
            })
            .state('insuarance_report', {
                url: '/insuarance_report',
                parent: 'master',
                templateUrl: '/views/insuarance_report.html',
                controller: 'UserController as user'
            })
            .state('staff_perfomance', {
                url: '/staff_perfomance',
                parent: 'master',
                templateUrl: '/views/staff_perfomance.html',
                controller: 'UserController as user'
            })
            .state('patientRegistration', {
                url: '/patientRegistration',
                parent: 'master',
                templateUrl: '/views/userView.html',
                controller: 'patientController as patient'
            })
            .state('reception', {
                url: '/reception',
                parent: 'master',
                templateUrl: '/views/receptionTemplate.html',
                controller: 'patientController as patient'
            })
            .state('system', {
                url: '/system',
                parent: 'master',
                templateUrl: '/views/admin_template.html',
                controller: 'adminController'
            })
            .state('addPermRole', {
                url: '/addPermRole',
                parent: 'master',
                templateUrl: '/views/addPermRole.html',
                controller: 'rolesController as roles'
            })
            .state('addViews', {
                url: '/addViews',
                parent: 'master',
                templateUrl: '/views/addViews.html',
                controller: 'rolesController as roles'
            })
            .state('addUserImage', {
                url: '/addUserImage',
                parent: 'master',
                templateUrl: '/views/addUserImage.html',
                controller: 'rolesController as roles'
            })
            .state('addPermUser', {
                url: '/addPermUser',
                parent: 'master',
                templateUrl: '/views/addPermUser.html',
                controller: 'rolesController as roles'
            })
            .state('nursing_care', {
                url: '/nursing_care',
                parent: 'master',
                templateUrl: '/views/nursing_care.html',
                controller: 'nursingCareController as roles'
            })
            .state('ward_management', {
                url: '/ward_management',
                parent: 'master',
                templateUrl: '/views/ward_management.html',
                controller: 'nursingCareController as roles'
            })
            .state('theatre_managing_list', {
                url: '/theatre_managing_list',
                parent: 'master',
                templateUrl: '/views/ward_to_theatre.html',
                controller: 'nursingCareController as roles'
            })
            .state('addRoles', {
                url: '/addRoles',
                parent: 'master',
                templateUrl: '/views/registerSystemRoles.html',
                controller: 'rolesController as roles'
            })
            .state('addModules', {
                url: '/addModules',
                parent: 'master',
                templateUrl: '/views/registerSystemPemissions.html',
                controller: 'rolesController as roles'
            })
            .state('ctcClinic', {
                url: '/ctcClinic',
                parent: 'master',
                templateUrl: '/views/ctcClinic.html',
                controller: 'rolesController as roles'
            })
            .state('ctcClinicSetup', {
                url: '/ctcClinicSetup',
                parent: 'master',
                templateUrl: '/views/ctcClinicSetup.html',
                controller: 'rolesController as roles'
            })
            .state('doctorctcClinic', {
                url: '/doctorctcClinic',
                parent: 'master',
                templateUrl: '/views/ctcClinic.html',
                controller: 'rolesController as roles'
            })
            .state('doctor_opd', {
                url: '/doctor_opd',
                parent: 'master',
                templateUrl: '/views/modules/clinicalServices/opd.html',
                controller: 'opdQueueController as opd'
            })
            .state('doctor_ipd', {
                url: '/doctor_ipd',
                parent: 'master',
                templateUrl: '/views/modules/clinicalServices/ipd.html',
                controller: 'ipdQueueController as ipd'
            })
            .state('icu', {
                url: '/icu',
                parent: 'master',
                templateUrl: '/views/modules/icu/icuView.html',
                controller: 'icuController as icu'
            })
            .state('dental_clinic', {
                url: '/dental_clinic',
                parent: 'master',
                templateUrl: '/views/modules/clinic/dental/dentalView.html',
                controller: 'dentalHomeController as dental'
            })
            .state('eye_clinic', {
                url: '/eye_clinic',
                parent: 'master',
                templateUrl: '/views/modules/clinic/eye/eyeView.html',
                controller: 'dentalHomeController as dental'
            })
            .state('inventory', {
                url: '/inventory',
                parent: 'master',
                templateUrl: '/views/modules/inventory/invView.html',
                controller: 'inventoryController as inventory'
            })
            .state('insurance_management', {
                url: '/insurance_management',
                parent: 'master',
                templateUrl: '/views/modules/insurance/insuranceView.html',
                controller: 'insuranceController as insurance'
            })
            .state('referral', {
                url: '/referral',
                parent: 'master',
                templateUrl: '/views/modules/referral/refView.html',
                controller: 'referralController as referral'
            })
            .state('Eye', {
                url: '/Eye',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Eye_master.html',
                controller: 'opdController as opd'
            })
            .state('Cardiac', {
                url: '/Cardiac',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Cardiac_master.html',
                controller: 'opdController as opd'
            })
            .state('Ctc', {
                url: '/Ctc',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Cardiac_master.html',
                controller: 'opdController as opd'
            })
            .state('Dental', {
                url: '/Dental',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Dental_master.html',
                controller: 'opdController as opd'
            })
            .state('Ent', {
                url: '/Ent',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Ent_master.html',
                controller: 'opdController as opd'
            })
            .state('General_surgery', {
                url: '/General_surgery',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/General_surgery_master.html',
                controller: 'opdController as opd'
            })
            .state('Mental_health', {
                url: '/Mental_health',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Mental_health_master.html',
                controller: 'opdController as opd'
            })
            .state('Medical_health', {
                url: '/Medical_health',
                templateUrl: '/views/modules/Clinics/Master/Medical_health_master.html',
                controller: 'opdController as opd'
            })
            .state('Nutrition', {
                url: '/Nutrition',
                templateUrl: '/views/modules/Clinics/Master/Nutrition_master.html',
                controller: 'opdController as opd'
            })
            .state('Obs_gyn', {
                url: '/Obs_gyn',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Obs_gyn_master.html',
                controller: 'opdController as opd'
            })
            .state('Orthopedic', {
                url: '/Orthopedic',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Orthopedic_master.html',
                controller: 'opdController as opd'
            })
            .state('Physio', {
                url: '/Physio',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Physio_master.html',
                controller: 'opdController as opd'
            })
            .state('Pmtct', {
                url: '/Pmtct',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Pmtct_master.html',
                controller: 'opdController as opd'
            })
            .state('Tb', {
                url: '/Tb',
                parent: 'master',
                templateUrl: '/views/Tb_master.html',
                controller: 'TbController'
            })
            .state('Vct', {
                url: '/Vct',
                parent: 'master',
                templateUrl: '/views/Vct_master.html',
                controller: 'VctController'
            })
            .state('Pediatric', {
                url: '/Pediatric',
                parent: 'master',
                templateUrl: '/views/Pediatric_master.html',
                controller: 'PediatricController'
            })
            .state('Urology', {
                url: '/Urology',
                parent: 'master',
                templateUrl: '/views/modules/Clinics/Master/Urology_master.html',
                controller: 'opdController as opd'
            })
            .state('exemption', {
                url: '/exemption',
                parent: 'master',
                templateUrl: '/views/Exemption_form.html',
                controller: 'exemptionController'
            })
            .state('payments', {
                url: '/payments',
                parent: 'master',
                templateUrl: '/views/modules/payments/paymentView.html',
                controller: 'paymentsController as payments'
            })
            .state('point_of_sale', {
                url: '/point_of_sale',
                parent: 'master',
                templateUrl: '/views/modules/payments/posView.html',
                controller: 'paymentsController as payments'
            })
            .state('receipts', {
                url: '/receipts',
                parent: 'master',
                templateUrl: '/views/modules/payments/receiptView.html',
                controller: 'receiptsController as receipts',
                params: {
                    'billsdata': null,
                    'patient': null,
                    'payment_type': null
                }
            })
            .state('reports', {
                url: '/reports',
                parent: 'master',
                templateUrl: '/views/modules/payments/reportsView.html',
                controller: 'reportsController as reports'
            })
            .state('userRegistration', {
                url: '/userRegistration',
                parent: 'master',
                templateUrl: '/views/userRegistration.html',
                controller: 'userSettingController as user'
            })
            .state('UsersList', {
                url: '/UsersList',
                parent: 'master',
                templateUrl: '/views/UsersList.html',
                controller: 'userSettingController as user'
            })
            .state('password_resset', {
                url: '/password_resset',
                parent: 'master',
                templateUrl: '/views/password_resset.html',
                controller: 'userSettingController as user'
            })
            .state('regions', {
                url: '/regions',
                parent: 'master',
                templateUrl: '/views/Region_master.html',
                controller: 'regionController'
            })
            .state('facility', {
                url: '/facility',
                parent: 'master',
                templateUrl: '/views/Facility_registration.html',
                controller: 'facilityController'
            })
            .state('facility_list', {
                url: '/facility_list',
                parent: 'master',
                templateUrl: '/views/Facility_list.html',
                controller: 'facilityController'
            })
            .state('Discount', {
                url: '/Discount',
                parent: 'master',
                templateUrl: '/views/discount_Form.html',
                controller: 'discountController'
            })
            .state('payment_type', {
                url: '/payment_type',
                parent: 'master',
                templateUrl: '/views/Payment_type.html',
                controller: 'payment_typeController'
            })
            .state('payment_category', {
                url: '/payment_category',
                parent: 'master',
                templateUrl: '/views/Payment_category.html',
                controller: 'payment_typeController'
            })
            .state('item_setup', {
                url: '/item_setup',
                parent: 'master',
                templateUrl: '/views/item_setup.html',
                controller: 'itemSetupController'
            })
            .state('item_Price', {
                url: '/item_Price',
                parent: 'master',
                templateUrl: '/views/item_Price.html',
                controller: 'itemPriceController'
            })
            .state('exemption_list', {
                url: '/exemption_list',
                templateUrl: '/views/exemption_list.html',
                controller: 'exemptionController'
            })
            .state('Temporary_exemption', {
                url: '/Temporary_exemption',
                parent: 'master',
                templateUrl: '/views/Temporary_exemption_master.html',
                controller: 'exemptionController'
            })
            .state('Pharmacy', {
                url: '/Pharmacy',
                parent: 'master',
                templateUrl: '/views/Pharmacy_master.html',
                controller: 'PharmacyController'
            })
            .state('MainPharmacy', {
                url: '/MainPharmacy',
                parent: 'master',
                templateUrl: '/views/Main_Pharmacy_master.html',
                controller: 'PharmacyItemsController'
            })
            .state('Sub_store', {
                url: '/Sub_store',
                parent: 'master',
                templateUrl: '/views/Sub_store_master.html',
                controller: 'SubStoreItemsController'
            })
            .state('Dispensing', {
                url: '/Dispensing',
                parent: 'master',
                templateUrl: '/views/Dispensing_master.html',
                controller: 'DispensingController'
            })
            .state('Anti_natal', {
                url: '/Anti_natal',
                parent: 'master',
                templateUrl: '/views/Anti_natal_master.html',
                controller: 'Anti_natalController'
            })
            .state('Post_natal', {
                url: '/Post_natal',
                parent: 'master',
                templateUrl: '/views/Post_natal_master.html',
                controller: 'PostnatalController'
            })
            .state('Labour', {
                url: '/Labour',
                parent: 'master',
                templateUrl: '/views/Labour_master.html',
                controller: 'LabourController'
            })
            .state('Children', {
                url: '/Children',
                parent: 'master',
                templateUrl: '/views/Child_form_master.html',
                controller: 'LabourController'
            })
            .state('Family_Planning', {
                url: '/Family_Planning',
                parent: 'master',
                templateUrl: '/views/Family_planning_master.html',
                controller: 'Family_planning_Controller'
            })
            .state('Rch_report', {
                url: '/Rch_report',
                parent: 'master',
                templateUrl: '/views/Rch_report_master.html',
                controller: 'Rch_reoprtController'
            })
            .state('patientCard', {
                url: '/patientCard',
                parent: 'master',
                templateUrl: '/views/singlecardPrint.html',
                controller: 'patientController'
            })
            .state('edit', {
                url: '/edit',
                parent: 'master',
                templateUrl: '/views/Edit_user.html',
                controller: 'UserController as user'
            })
            .state('radiology', {
                url: '/radiology',
                parent: 'master',
                templateUrl: '/views/radiology.html',
                controller: 'radiologyController as radiology'
            })
            .state('VitalSign', {
                url: '/VitalSign',
                parent: 'master',
                templateUrl: '/views/modules/VitalSign/VitalSign.html',
                controller: 'VitalSignController as VitalSign'
            })
            .state('radiologytest', {
                url: '/radiologytest',
                parent: 'master',
                templateUrl: '/views/radiologytest.html',
                controller: 'radiologyTestController as radiologytest'
            })
            .state('radiologyDepartment', {
                url: '/radiologyDepartment',
                parent: 'master',
                templateUrl: '/views/radiology_department.html',
                controller: 'radiologyDepartmentController as radiologyDepartment'
            })
            .state('radiologyView', {
                url: '/radiologyView',
                parent: 'master',
                templateUrl: '/views/radiology_view.html',
                controller: 'radiologyViewController as radiologyView'
            })
            .state('radiopatients', {
                url: '/radiopatients',
                parent: 'master',
                templateUrl: '/views/radiopatients.html',
                controller: 'radiopatientsController as radiologyPatients'
            })
            .state('appointment', {
                url: '/appointment',
                parent: 'master',
                templateUrl: '/views/appointment_master.html',
                controller: 'UserController as user'
            })
            .state('patientEdit', {
                url: '/patientEdit',
                parent: 'master',
                templateUrl: '/views/modules/registration/editPatient.html',
                controller: 'patientController as user'
            })
            .state('laboratory', {
                url: '/laboratory',
                parent: 'master',
                templateUrl: '/views/modules/laboratory/laboratory.html',
                controller: 'UserController as user'
            })
            .state('SampleCollection', {
                url: '/SampleCollection',
                parent: 'master',
                templateUrl: '/views/labSet.html',
                controller: 'UserController as user'
            })
            .state('labSetting', {
                url: '/labSetting',
                parent: 'master',
                templateUrl: '/views/SetDeviceTest.html',
                controller: 'UserController as user'
            })
            .state('sampleManagement', {
                url: '/sampleManagement',
                parent: 'master',
                templateUrl: '/views/samples.html',
                controller: 'UserController as user'
            })
            .state('mortuaryManagement', {
                url: '/mortuaryManagement',
                parent: 'master',
                templateUrl: '/views/mortuaryManagement.html',
                controller: 'UserController as user'
            })
            .state('emergency', {
                url: '/emergency',
                parent: 'master',
                templateUrl: '/views/emergencyview.html',
                controller: 'emergencyController as emergency'
            })
            .state('emergencyDepartment', {
                url: '/emergencyDepartment',
                parent: 'master',
                templateUrl: '/views/emergencyDepartment.html',
                controller: 'emergencydepartmentController as emergencyDepartment'
            })
            .state('normalRegistration', {
                url: '/normalRegistration',
                parent: 'master',
                templateUrl: '/views/normalRegistration.html',
                controller: 'normalRegistrationController as normalRegistration'
            })
            .state('treatmentDepartment', {
                url: '/treatmentDepartment',
                parent: 'master',
                templateUrl: '/views/treatmentDepartment.html',
                controller: 'treatmentDepartmentController as treatmentEmergence'
            })
            .state('casualtyRoom', {
                url: '/casualtyRoom',
                parent: 'master',
                templateUrl: '/views/casualtyRoom.html',
                controller: 'casualtyRoomController as treatmentcasualty'

            })
            .state('observationRoom', {
                url: '/observationRoom',
                parent: 'master',
                templateUrl: '/views/observationRoom.html',
                controller: 'observationRoomController as treatmentobservation'
            });
    });

    angular.module('authApp').run(function($rootScope, $state, $location) {
        // $stateChangeStart is fired whenever the state changes. We can use some parameters
        // such as toState to hook into details about the state as it is changing
        $rootScope.$on('$stateChangeStart', function(event, toState) {

            // Grab the user from local storage and parse it to an object
            var user = JSON.parse(localStorage.getItem('user'));
            if (!user && toState.name != "auth") {

                //event.preventDefault();

                // go to the "main" state which in our case is users
                $location.path("/auth");
            }

            // If there is any user data in local storage then the user is quite
            // likely authenticated. If their token is expired, or if they are
            // otherwise not actually authenticated, they will be redirected to
            // the auth state because of the rejected request anyway
            if (user) {

                // The user's authenticated state gets flipped to
                // true so we can now show parts of the UI that rely
                // on the user being logged in
                $rootScope.authenticated = true;

                // Putting the user's data on $rootScope allows
                // us to access it anywhere across the app. Here
                // we are grabbing what is in local storage
                $rootScope.currentUser = user;

                // If the user is logged in and we hit the auth route we don't need
                // to stay there and can send the user to the main state
                if (toState.name === "auth") {

                    // Preventing the default behavior allows us to use $state.go
                    // to change states
                    event.preventDefault();

                    // go to the "main" state which in our case is users
                    $state.go('dashboard');
                }

                if (toState.name !== "auth" && $rootScope.currentUser.length === 0) {

                    // Preventing the default behavior allows us to use $state.go
                    // to change states
                    event.preventDefault();

                    // go to the "main" state which in our case is users
                    $state.go('auth');
                }
            }
        });
    });
})();

(function() {
  'use strict';

  angular.module('authApp').controller('AppController', AppController);
  AppController.$inject = ['$scope', '$rootScope', '$mdSidenav', '$mdMedia', '$filter', '$window', '$http'];

  function AppController($scope, $rootScope, $mdSidenav, $mdMedia, $filter, $window, $http) {

    $scope.loading           =  false;
    $scope.leftSidebar       =  true;
    $scope.showSearch        =  false;
    $scope.hideToast         =  false;
    $scope.topDirections     =  ['left', 'up'];
    $scope.bottomDirections  =  ['down', 'right'];
    $scope.isOpen            =  false;
    $scope.availableModes    =  ['md-fling', 'md-scale'];
    $scope.selectedMode      =  'md-fling';
    $scope.selectedDirection =  'up';

    $scope.toggleSidenav = function(menuId) {
      $mdSidenav(menuId).toggle();
    };

    $scope.menu = [
    {
      link  : '',
      title : 'Dashboard',
      icon  : 'dashboard',
      state : 'dashboard'
    },
    {
      link : '',
      title: 'Change Password',
      state : 'dashboard',
      icon: 'lock'
    },
    ];

    $scope.admin = [
    {
      link : '',
      title: 'Trash',
      icon: 'delete'
    },
    {
      link : 'showListBottomSheet($event)',
      title: 'Settings',
      icon: 'settings'
    }
    ];

    $scope.activity = [
    {
      what: 'Brunch this weekend?',
      who: 'Ali Conners',
      when: '3:08PM',
      notes: " I'll be in your neighborhood doing errands"
    },
    {
      what: 'Summer BBQ',
      who: 'to Alex, Scott, Jennifer',
      when: '3:08PM',
      notes: "Wish I could come out but I'm out of town this weekend"
    },
    {
      what: 'Oui Oui',
      who: 'Sandra Adams',
      when: '3:08PM',
      notes: "Do you have Paris recommendations? Have you ever been?"
    },
    {
      what: 'Birthday Gift',
      who: 'Trevor Hansen',
      when: '3:08PM',
      notes: "Have any ideas of what we should get Heidi for her birthday?"
    },
    {
      what: 'Recipe to try',
      who: 'Brian Holt',
      when: '3:08PM',
      notes: "We should eat this: Grapefruit, Squash, Corn, and Tomatillo tacos"
    },
    ];
  }
})();

(function() {

  'use strict';

  angular
    .module('authApp')
    .controller('AuthController', AuthController);

  function AuthController($auth, $state, $http, $rootScope,$scope,toastr) {

    var vm = this;

    vm.loginError = false;

    vm.logout = function() {
        console.log("logging out")
    }

    vm.login = function() {

      var credentials = {
        email: vm.email,
        password: vm.password
      };

      $auth.login(credentials).then(function() {

        // Return an $http request for the now authenticated
        // user so that we can flatten the promise chain
        return $http.get('/api/authenticate/user');

        // Handle errors
      }, function(error) {
        vm.loginError = true;
        $scope.error=error.data.error;
        vm.loginErrorText =error.data.error;
        toastr.error('',vm.loginErrorText);

        // Because we returned the $http.get request in the $auth.login
        // promise, we can chain the next promise to the end here
      }).then(function(response) {

        // Stringify the returned data to prepare it
        // to go into local storage
        var user = JSON.stringify(response.data.user);

        // Set the stringified user data into local storage
        localStorage.setItem('user', user);

        // The user's authenticated state gets flipped to
        // true so we can now show parts of the UI that rely
        // on the user being logged in
        $rootScope.authenticated = true;

        // Putting the user's data on $rootScope allows
        // us to access it anywhere across the app
        $rootScope.currentUser = response.data.user;

        var login_name=$rootScope.currentUser.name;
        toastr.success('','Welcome '+login_name);

        // Everything worked out so we can now redirect to
        // the users state to view the data
        $state.go('dashboard');
      });
    };
  }
})();

(function() {
  'use strict';

  angular.module('authApp').controller('UserController', UserController);

  function UserController($http, $auth, $rootScope,$state,$scope) {

    var vm =  this;

    vm.getUsers =  function() {
      //Grab the list of users from the API
      $http.get('/api/authenticate').then(function(users) {
        vm.users = users.data;
      }).then(function(error) {
        vm.error = error;
      });
    };

    vm.change_profile = function() {
         console.log("changing");
    }

    $http.get('/api/authenticate').then(function(users) {
      var user_id = $rootScope.currentUser.id;
      $scope.printUserMenu(user_id);
      $scope.users    =  users.data[0].name;
      $scope.email    =  users.data[0].email;
      $scope.id       =  users.data[0].id;
      var description =  $scope.users;
      var email       =  $scope.email;
      var id          =  $scope.id;
    });

    $scope.update =  function (user) {
      var comit   =  confirm('Are you sure you want to Update'+user.name);
      if(comit) {
        $http.post('/api/update_user', user).then(function (data) {
          $scope.good =  user.name + " " + 'Successful Updated';
          $scope.kol  =  data.status;
          vm.getUsers();
        });
      } else{
        return false;
      }
    };

    $scope.delete = function (name,id) {
      var comit = confirm('Are you sure you want to delete'+"    "+name);
      if(comit){
        $http.get('/api/delete/'+id).then(function(data) {
          $scope.deleted=name+" "+'Successful Deleted';
          $scope.del = data.status;
          vm.getUsers();
        });
      } else {
        return false;
      }
    };

    $scope.printUserMenu = function (user_id) {
      console.log(angular.isDefined(user_id));
      $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
        $scope.menu=data.data;
        console.log($scope.menu);
      });
    };

    $scope.register = function (user) {
      $http.post('/api/register', user).then(function(data) {
        $scope.send = data.data.name+" "+'Successful Added in Database';
      });
      $scope.user = "";
    };

    $scope.edit = function (id) {
      $http.get('/api/edit/'+id).then(function(data) {
        $scope.japh =  data;
      });
    };

    // We would normally put the logout method in the same
    // spot as the login method, ideally extracted out into
    // a service. For this simpler example we'll leave it here
    vm.logout = function() {

      $auth.logout().then(function() {

        // Remove the authenticated user from local storage
        localStorage.removeItem('user');

        // Flip authenticated to false so that we no longer
        // show UI elements dependant on the user being logged in
        $rootScope.authenticated = false;

        // Remove the current user info from rootscope
        $rootScope.currentUser = null;
        $state.go('auth');
      });
    };
  }
})();

/**
 * Created by USER on 2017-02-26.
 */
/**
 * Created by USER on 2017-02-18.
 */
/**
 * Created by USER on 2017-02-14.
 */

(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('discountController', discountController);

    function discountController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        $http.get('public/api/facility_list').then(function(data) {
            $scope.facilities=data.data;

        });



        
        $scope.ExportFile=function () {
            $http.get('public/downloadExcel/xls').then(function(data) {

               console.log( data) ;

            });
        }
       

        var resdata =[];
        $scope.showSearch = function(searchKey) {
            if(searchKey.length<5){
 
            }
 else{
                $http.post('public/api/searchpatientForBill',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;
                });
                return resdata;
            }
            }



var user_id=$rootScope.currentUser.id;
var facility_id=$rootScope.currentUser.facility_id;

        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('public/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;


            });

        }
        var user_id=$rootScope.currentUser.id;
        $scope.printUserMenu(user_id);


        //Exemption (CRUD) Registration
        var patientName= $scope.selectedPatient;

        $scope.exemption_registration=function (exempt) {




            var exemption_data={'exemption_no':1,'user_id':$rootScope.currentUser.id,'facility_code':$rootScope.currentUser.facility_id,"patient_id":exempt.selectedPatient.id,"status_id":exempt.status_id,"exemption_type_id":exempt.exemption_type_id,
                "exemption_reason":exempt.exemption_reason,"reason_for_revoke":exempt.reason_for_revoke,'description':exempt.description};
            console.log(exemption_data)
            $http.post('public/api/patient_exemption',exemption_data).then(function(data) {
                console.log(data);
            });
        }





        //patient Searching

        // $http.get('public/api/patientsearch').then(function(data) {
        //
        //
        //     $scope.patients=data.data;
        //
        //
        // });

        $scope.loadBill=function (selectedPatient) {


            $http.get('public/api/loadDiscountBill/'+selectedPatient.id).then(function(data) {
                $scope.discounts=data.data;
                $scope.previusDiscount = calcDiscountfromDB($scope.discounts);

                $scope.jumla = calctotal($scope.discounts);

$scope.TotalDiscount="";

            });
        }
        $scope.discountArray=[];
       var discount_reason="";


        $scope.discounting=function (discount) {

var asilimia=(discount.amount/(discount.price * discount.quantity) * 100);

    if ((discount.price * discount.quantity) - discount.amount >= 0){
    $scope.discountArray.push({'patient_id':discount.patient_id,'receipt_number':discount.invoice_id,'id':discount.item_refference,'user_id':user_id,'invoice_id':discount.item_refference,
        'quantity':discount.quantity,'price':discount.price,'discount':discount.amount});

console.log( $scope.discountArray);
    $scope.TotalDiscount=calcDiscountFromSocial($scope.discountArray);

 }
else if(discount.amount ==null){

    }
            else{
        swal(
            'Warning',
            'Please Check again Your Discount. Otherwise Your discount for any row data exceeds limit, will be ignored',
            'warning'
        )
  }




}
var discounting_resaon="";
        $scope.discount_reason=function (reason) {
            discount_reason=reason;

            console.log(discounting_resaon);
        }


        $scope.CommitDiscount=function () {


            if($scope.discountArray.length >0)
            {

                swal({
                    title: 'Are you sure?',

                    text: "You won't be able to revert this!",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes!  ',
                    cancelButtonText: 'No, cancel!',
                    confirmButtonClass: 'btn btn-success',
                    cancelButtonClass: 'btn btn-danger',
                    buttonsStyling: false
                }).then(function () {

//please write reasons for this discount

                    swal({
                        title: 'Reasons for This discount',
                        input: 'textarea',

                        showCancelButton: true,
                        inputValidator: function (value) {
                            return new Promise(function (resolve, reject) {
                                if (value) {
                                    resolve()
                                } else {
                                    reject('You need to write Reasons for This discount!')
                                }



                             //--------------------




                             //--------------------
                            })
                        }
                    }).then(function (result) {
                        discounting_resaon={'discount_reason':result,'patient_id':$scope.discountArray[0].patient_id,
                            'receipt_number':$scope.discountArray[0].receipt_number,'facility_id':facility_id};

                        $http.post('public/api/invoice_discount',$scope.discountArray).then(function(data) {
                            if(data){
                                $http.post('public/api/discountingReason',discounting_resaon).then(function(data) {

                                });
                            }


                            swal(

                                'Success!!!',
                                'Discount Successful Granted..',
                                'success'
                            )

                            $scope.discountArray=[];

                        });
                    })





                }, function (dismiss) {
                    // dismiss can be 'cancel', 'overlay',
                    // 'close', and 'timer'
                    if (dismiss === 'cancel') {
                        swal(
                            'Cancelled',
                            'Discount Has Cancelled',
                            'error'
                        )
                    }
                })



            }
            else{
                swal(

                    'Oops!!!..',
                    'Discount Already Granted..',
                    'info'
                )
            }







        }


        //calculation of transactions from all Point Of services
        var calctotal = function(){
            var sum = 0;

            for(var i=0; i<$scope.discounts.length;i++){
                sum += ($scope.discounts[i].price * $scope.discounts[i].quantity);
            }

            return sum;

        }
        //calculation of transactions Discount from all Point Of services by social welfare officer
 var calcDiscountFromSocial = function(){
            var DiscountFromSocial = 0;

            for(var i=0; i<$scope.discountArray.length;i++){
                DiscountFromSocial += ($scope.discountArray[i].discount);
            }

            return DiscountFromSocial;

        }

        //calculation of transactions Discount from all Point Of services  though by default is zero discount
        var calcDiscountfromDB = function(){
            var TotalDiscountfromDB = 0;

            for(var i=0; i<$scope.discounts.length;i++){
                TotalDiscountfromDB += $scope.discounts[i].discount;
            }

            return TotalDiscountfromDB;

        }
$scope.swalImage=function () {
    swal({
        title: 'Select image',
        input: 'file',
        timer: 2000,
        inputAttributes: {
            accept: 'image/*'
        }
    }).then(function (file) {
        var reader = new FileReader
        reader.onload = function (e) {
            swal({
                imageUrl: e.target.result

            })
            console.log(e.target.result);
        }
        reader.readAsDataURL(file)
        console.log(reader);
    })
}


     
    }

})();

/**
 * Created by USER on 2017-02-18.
 */
/**
 * Created by USER on 2017-02-14.
 */

(function() {

    'use strict';

    angular
        .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

            function fn_link(scope, element, attrs) {
                var onChange = $parse(attrs.ngFiles);
                element.on('change', function (event) {
                    onChange(scope, { $files: event.target.files });
                });
            };

            return {
                link: fn_link
            }
        } ])
        .controller('exemptionController', exemptionController);

    function exemptionController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        var formdata = new FormData();

        $scope.getTheFiles = function ($files) {

            angular.forEach($files, function (value, key) {
                formdata.append(key, value);

            });

        };
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;

        var user_id=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        $http.get('public/api/facility_list').then(function(data) {
            $scope.facilities=data.data;

        });
        $scope.exemption_list=function(){

            $http.get('public/api/exemption_list/'+facility_id).then(function(data) {

                if (data.data.length < 1) {

                }
                else {
                    $scope.exemptions = data.data;
                    //console.log(data.data)

                }
            });
        }

        $scope.exemption_list();

 $scope.temporary_exemption_list=function(){

            $http.get('public/api/temporary_exemption_list/'+facility_id).then(function(data) {

                if (data.data.length < 1) {

                    $scope.tempo_exemptions = data.data;
                }
                else {
                    $scope.tempo_exemptions = data.data;
                    //console.log(data.data)

                }
            });
        }



        $scope.temporary_exemption_status_update=function(Data){


            swal({
                title: 'ARE YOU SURE YOU WANT To CHANGE TEMPORARY EXEMPTION Of '+ Data.medical_record_number,

                text: "",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!  ',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('public/api/temporary_exemption_status_update/'+Data.patient_id).then(function(data) {


                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.temporary_exemption_list();
                });



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })




        }


        $scope.temporary_exemption_list();



        $scope.exemption_filter=function(){


            $http.get('public/api/exemption_list_by_gender/'+facility_id).then(function(data) {

                if(data.data.length<1){
                    swal(
                        'Feedback..',
                        'No data set available..',
                        'info'
                    )
                }
                else{
                    $scope.exemption_by_genders=data.data;
                    $scope.totalex=calcTotalExemption($scope.exemption_by_genders);
                    //console.log(data.data)

                    $scope.xs=[];
                    $scope.ys=[];
                    $scope.z=[];

                    for(var i=0;i< $scope.exemption_by_genders.length; i++){
                        $scope.xs.push($scope.exemption_by_genders[i].gender);
                        $scope.series = $scope.z.push($scope.exemption_by_genders[i].exemption_name);
                        
                        $scope.ys.push($scope.exemption_by_genders[i].total);
                    }

                    $scope.labels=$scope.xs ;
                    $scope.data =  $scope.ys;
                }

            });

        }
        

        //exemption totality
        var calcTotalExemption = function(){
            var TotalExemp = 0;

            for(var i=0; i<$scope.exemption_by_genders.length;i++){
                TotalExemp += $scope.exemption_by_genders[i].total;
            }

            return TotalExemp;

        }



        //user menu
        $scope.pdf=function (pdft) {

            $scope.pdd=PDFObject.embed("public/uploads/"+pdft, "#example1");


        }

        $scope.printUserMenu=function (user_id) {

            $http.get('public/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;


            });

        }

         
        var user_id=$rootScope.currentUser.id;
        $scope.printUserMenu(user_id);


        //Exemption (CRUD) Registration
var patientName= $scope.selectedPatient;

        // NOW UPLOAD  FILES.



        // end....of uploading




        $scope.exemption_registration=function (exempt) {


            var status_id = 2;
            var reason_for_revoke = "..";


           var patient= exempt.selectedPatient.id;
           var exemption_type_id= exempt.exemption_type_id;
           var exemption_reason= exempt.exemption_reason;

            if(exempt.selectedPatient.id==undefined){
                swal(
                    'Feedback..',
                    'Please Select Client from a Search Box above...',
                    'error'
                )

            }
            else if (exemption_type_id==undefined ){
                swal(
                    'Feedback..',
                    'Please Select Exemption Category ',
                    'error'
                )
            }

            else if (exemption_reason==undefined){
                swal(
                    'Feedback..',
                    'Please Fill  Reason(s) for This exemption ',
                    'error'
                )
            }



            else{


                var status_id=2;
                var patient= exempt.selectedPatient.id;
                var exemption_type_id= exempt.exemption_type_id;
                var exemption_reason= exempt.exemption_reason;
                var user_id= $rootScope.currentUser.id;
                var facility_id= $rootScope.currentUser.facility_id;
                var patient_id= exempt.selectedPatient.id;
                var status_id= status_id;
                var exemption_type_id=exempt.exemption_type_id;
                var exemption_reason= exempt.exemption_reason;
                var reason_for_revoke= reason_for_revoke;
                var description=exempt.description;

                formdata.append('exemption_type_id',exemption_type_id);
                formdata.append('exemption_reason',exemption_reason);
                formdata.append('user_id',user_id);
                formdata.append('facility_id',facility_id);
                formdata.append('patient_id',patient_id);
                formdata.append('reason_for_revoke',reason_for_revoke);
                formdata.append('status_id',status_id);
                var request = {
                    method: 'POST',
                    url: 'public/api/'+'patient_exemption',
                    data: formdata,
                    headers: {
                        'Content-Type': undefined
                    }

                };

                // SEND THE FILES.
                $http(request).then(function (data) {

                    var msg = data.data.msg;
                    $scope.ok = data.data.status;
                        //console.log(data.data.status);
                    var statuss = data.data.status;
                    if (statuss ==0) {

                    swal(
                        'Error',
                        msg,
                        'error'
                    );

                }
                    else{
                        swal(
                            'Success',
                            msg,
                            'success'
                        );
                    }
                    })
                    .then(function () {
                    });



        }
        }




        var resdata =[];
        $scope.showSearch = function(searchKey) {
            if(searchKey.length<5){

            }
            else{
                $http.post('public/api/searchpatientForBill',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;
                    $scope.ok=0;
                });
                return resdata;
            }
        }


        $scope.exempted_service=function (encounter) {

            var patient_category=encounter.exemption_type_id;
            var service_category=1;
            var service_id=1;
            var price_id=1;
            var item_type_id=1;
            var patient_id=encounter.selectedPatient.id;
            var facility_id=$rootScope.currentUser.facility_id;
            var user_id=$rootScope.currentUser.id;

            var bill_category_id=encounter.exemption_type_id;
            var main_category_id=4;

            var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};

            }

        $scope.exemption_type_list=function () {
            $http.get('public/api/exemption_type_list').then(function(data) {
                $scope.exemption_types=data.data;


            });
        }

        $scope.exemption_type_list();


        $scope.exemption_type_registration=function (exemption_type) {

            $http.post('public/api/exemption_type_registration',exemption_type).then(function(data) {

                $scope.exemption_type_list();
                // $scope.exemption_type.exemption_type="";
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )
            });
        }

 $scope.vulnerables=function () {

            $http.get('public/api/vulnerables/'+facility_id).then(function(data) {
    $scope.vulnerables=data.data;

                $scope.female_under_59_total = female_under_59vulnerables($scope.vulnerables);
                $scope.male_under_59_total = male_under_59vulnerables($scope.vulnerables);
                $scope.total_under_59_total = total_under_59vulnerables($scope.vulnerables);
                $scope.female_under_9_total = female_under_9vulnerables($scope.vulnerables);
                $scope.male_under_9_total = male_under_9vulnerables($scope.vulnerables);
                $scope.total_under_9_total = total_under_9vulnerables($scope.vulnerables);
                $scope.female_under_24_total = female_under_24vulnerables($scope.vulnerables);
                $scope.male_under_24_total = male_under_24vulnerables($scope.vulnerables);
                $scope.total_under_24_total = total_under_24vulnerables($scope.vulnerables);
                $scope.female_above_25_total = female_above_25vulnerables($scope.vulnerables);
                $scope.male_above_25_total = male_above_25vulnerables($scope.vulnerables);
                $scope.total_above_25_total = total_above_25vulnerables($scope.vulnerables);
                $scope.total_female_total = total_femalevulnerables($scope.vulnerables);
                $scope.total_male_total = total_malevulnerables($scope.vulnerables);
                $scope.total_total = totalvulnerables($scope.vulnerables);

            });
        }

$scope.violances=function () {

            $http.get('public/api/violances/'+facility_id).then(function(data) {
    $scope.violences=data.data;


                $scope.female_under_59_total = female_under_59($scope.violences);
                $scope.male_under_59_total = male_under_59($scope.violences);
                $scope.total_under_59_total = total_under_59($scope.violences);
                $scope.female_under_9_total = female_under_9($scope.violences);
                $scope.male_under_9_total = male_under_9($scope.violences);
                $scope.total_under_9_total = total_under_9($scope.violences);
                $scope.female_under_24_total = female_under_24($scope.violences);
                $scope.male_under_24_total = male_under_24($scope.violences);
                $scope.total_under_24_total = total_under_24($scope.violences);
                $scope.female_above_25_total = female_above_25($scope.violences);
                $scope.male_above_25_total = male_above_25($scope.violences);
                $scope.total_above_25_total = total_above_25($scope.violences);
                $scope.total_female_total = total_female($scope.violences);
                $scope.total_male_total = total_male($scope.violences);
                $scope.total_total = total($scope.violences);






            });
        }



        //totality violances

        var female_under_59 = function(){
            var female_under_59_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                female_under_59_total += $scope.violences[i].female_under_59;
            }

            return female_under_59_total;

        }
        var male_under_59 = function(){
            var male_under_59_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                male_under_59_total += $scope.violences[i].male_under_59;
            }

            return male_under_59_total;

        }
        var total_under_59 = function(){
            var total_under_59_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_under_59_total += $scope.violences[i].total_under_59;
            }

            return total_under_59_total;

        }

 var female_under_9 = function(){
            var female_under_9_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                female_under_9_total += $scope.violences[i].female_under_9;
            }

            return female_under_9_total;

        }
        var male_under_9 = function(){
            var male_under_9_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                male_under_9_total += $scope.violences[i].male_under_9;
            }

            return male_under_9_total;

        }
        var total_under_9 = function(){
            var total_under_9_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_under_9_total += $scope.violences[i].total_under_9;
            }

            return total_under_9_total;

        }
        var female_under_24 = function(){
            var female_under_24_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                female_under_24_total += $scope.violences[i].female_under_24;
            }

            return female_under_24_total;

        }
        var male_under_24 = function(){
            var male_under_24_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                male_under_24_total += $scope.violences[i].male_under_24;
            }

            return male_under_24_total;

        }

        var total_under_24 = function(){
            var total_under_24_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_under_24_total += $scope.violences[i].total_under_24;
            }

            return total_under_24_total;

        }
        var female_above_25 = function(){
            var female_above_25_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                female_above_25_total += $scope.violences[i].female_above_25;
            }

            return female_above_25_total;

        }
        var male_above_25 = function(){
            var male_above_25_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                male_above_25_total += $scope.violences[i].male_above_25;
            }

            return male_above_25_total;

        }
        var total_above_25 = function(){
            var total_above_25_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_above_25_total += $scope.violences[i].total_above_25;
            }

            return total_above_25_total;

        }
        var total_female = function(){
            var total_female_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_female_total += $scope.violences[i].total_female;
            }

            return total_female_total;

        }
        var total_male = function(){
            var total_male_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_male_total += $scope.violences[i].total_male;
            }

            return total_male_total;

        }
        var total = function(){
            var total_total = 0;

            for(var i=0; i<$scope.violences.length;i++){
                total_total += $scope.violences[i].total;
            }

            return total_total;

        }


        //totality vulnerables

        var female_under_59vulnerables = function(){
            var female_under_59_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                female_under_59_total += $scope.vulnerables[i].female_under_59;
            }

            return female_under_59_total;

        }
        var male_under_59vulnerables = function(){
            var male_under_59_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                male_under_59_total += $scope.vulnerables[i].male_under_59;
            }

            return male_under_59_total;

        }
        var total_under_59vulnerables = function(){
            var total_under_59_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_under_59_total += $scope.vulnerables[i].total_under_59;
            }

            return total_under_59_total;

        }

 var female_under_9vulnerables = function(){
            var female_under_9_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                female_under_9_total += $scope.vulnerables[i].female_under_9;
            }

            return female_under_9_total;

        }
        var male_under_9vulnerables = function(){
            var male_under_9_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                male_under_9_total += $scope.vulnerables[i].male_under_9;
            }

            return male_under_9_total;

        }
        var total_under_9vulnerables = function(){
            var total_under_9_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_under_9_total += $scope.vulnerables[i].total_under_9;
            }

            return total_under_9_total;

        }
        var female_under_24vulnerables = function(){
            var female_under_24_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                female_under_24_total += $scope.vulnerables[i].female_under_24;
            }

            return female_under_24_total;

        }
        var male_under_24vulnerables = function(){
            var male_under_24_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                male_under_24_total += $scope.vulnerables[i].male_under_24;
            }

            return male_under_24_total;

        }

        var total_under_24vulnerables = function(){
            var total_under_24_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_under_24_total += $scope.vulnerables[i].total_under_24;
            }

            return total_under_24_total;

        }
        var female_above_25vulnerables = function(){
            var female_above_25_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                female_above_25_total += $scope.vulnerables[i].female_above_25;
            }

            return female_above_25_total;

        }
        var male_above_25vulnerables = function(){
            var male_above_25_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                male_above_25_total += $scope.vulnerables[i].male_above_25;
            }

            return male_above_25_total;

        }
        var total_above_25vulnerables = function(){
            var total_above_25_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_above_25_total += $scope.vulnerables[i].total_above_25;
            }

            return total_above_25_total;

        }
        var total_femalevulnerables = function(){
            var total_female_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_female_total += $scope.vulnerables[i].total_female;
            }

            return total_female_total;

        }
        var total_malevulnerables = function(){
            var total_male_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_male_total += $scope.vulnerables[i].total_male;
            }

            return total_male_total;

        }
        var totalvulnerables = function(){
            var total_total = 0;

            for(var i=0; i<$scope.vulnerables.length;i++){
                total_total += $scope.vulnerables[i].total;
            }

            return total_total;

        }


        //  update


        $scope.exemption_type_update=function (exemption_type) {

            swal({
                title: 'Are you sure You Want To Update?',

                text: "",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!  ',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.post('public/api/exemption_type_update', exemption_type).then(function (data) {

                    swal(
                        'Feedback..',
                        'Updated..',
                        'success'
                    )
                    $scope.exemption_type_list();

                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })






        }

        //  patient_exemption_status_update

 

        $scope.exemption_type_delete=function (exemption_type) {
////console.log(exemption_type)
            swal({
                title: 'Are you sure You Want To Delete?',

                text: "",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: ' Yes!  ',
                cancelButtonText: '  No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('public/api/exemption_type_delete/'+exemption_type).then(function (data) {
var msg=data.data.msg;
                    if(data.data.status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        )

                    }
                    else{
                        swal(
                            'Feedback..',
                            msg,
                            'info'
                        )
                        $scope.exemption_type_list();
                    }


                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })




        }

        //  patient_exemption_status_update


        $scope.patient_exemption_status_update=function (exemption) {
            var   exemption_status_update_normal={'id':exemption.id,'status_id':exemption.exemption_status,
                'patient_id':exemption.patient_id,'facility_id':facility_id,'user_id':user_id,'reason_for_revoke':"-"};

            if(exemption.exemption_status==4){

                swal({
                    title: 'Are you sure You Want To Revoke This Exemption?',

                    text: "",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes!  ',
                    cancelButtonText: 'No, cancel!',
                    confirmButtonClass: 'btn btn-success',
                    cancelButtonClass: 'btn btn-danger',
                    buttonsStyling: false
                }).then(function () {

//please write reasons for this discount


                    swal({
                        title: 'Reasons for Revoke',
                        input: 'textarea',

                        showCancelButton: true,
                        inputValidator: function (value) {
                            return new Promise(function (resolve, reject) {
                                if (value) {
                                    resolve()
                                } else {
                                    reject('You need to write Reasons for This Revoke!')
                                }



                                //--------------------




                                //--------------------
                            })
                        }
                    }).then(function (result) {
                        var   exemption_status_update={'id':exemption.id,'status_id':exemption.exemption_status,'reason_for_revoke':result,
                            'patient_id':exemption.patient_id,'facility_id':facility_id,'user_id':user_id};
                        ////console.log(exemption_status_update)

                        $http.post('public/api/patient_exemption_status_update', exemption_status_update).then(function (data) {

                            var sending=data.data.msg;

                            if(data.data.status==0){
                                swal(
                                    'Error',
                                    sending,
                                    'error'
                                )
                            }
                            else{
                                swal(
                                    'Success',
                                    sending,
                                    'success'
                                )
                            }
                            $scope.exemption_list();

                        })

                    })





                }, function (dismiss) {
                    // dismiss can be 'cancel', 'overlay',
                    // 'close', and 'timer'
                    if (dismiss === 'cancel') {

                    }
                })
            }

            else{




                swal({
                    title: 'Are you sure You Want To Update This exemption Status?',
                    text: " ",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No, cancel!',
                    confirmButtonClass: 'btn btn-success',
                    cancelButtonClass: 'btn btn-danger',
                    buttonsStyling: false
                }).then(function () {


                    ////console.log(exemption_status_update_normal);
                    $http.post('public/api/patient_exemption_status_update',exemption_status_update_normal).then(function (data) {

                        swal(
                            'Feedback..',
                            'Updated..',
                            'success'
                        )
                        $scope.exemption_list();

                    })


                }, function (dismiss) {
                    // dismiss can be 'cancel', 'overlay',
                    // 'close', and 'timer'
                    if (dismiss === 'cancel') {

                    }
                })





            }








        }


    //Exemption Status CRUD


        $scope.exemption_status_registration=function (exemption_status) {
            ////console.log(exemption_status)
            $http.post('public/api/exemption_status_registration',exemption_status).then(function(data) {

                exemption_status =" ";
                var sending=data.data;
                $scope.exemption_status_list();
                 

                swal(
                    'Feedback..',
                    sending,
                    'success'
                )
            });
        }

        $scope.exemption_status_list=function () {
            $http.get('public/api/exemption_status_list').then(function(data) {
                $scope.exemption_statuses=data.data;


            });
        }

        $scope.exemption_status_list();
        //  update


        $scope.exemption_status_update=function (exemption_status) {

            swal({
                title: 'Are you sure You Want To Update?',

                text: "",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!  ',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.post('public/api/exemption_status_update', exemption_status).then(function (data) {


                    $scope.exemption_status_list();
                    swal(
                        'Response!',
                        'Updated ....',
                        'success'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })





        }


//  delete
        $scope.exemption_status_delete=function (exemption_status,id) {

            swal({
                title: 'Are you sure You Want To Delete?',

                text: "",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!  ',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('public/api/exemption_status_delete/'+id).then(function(data) {



                    $scope.exemption_status_list();
                    swal(
                        '',
                        'Item Deleted',
                        'warning'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })



        }
 
$scope.violence_cat_registration=function (violence_cat) {
    ////console.log(violence_cat)
    if(violence_cat==undefined){
        swal('Error','Fill This field','error')
    }
    else {
        $http.post('public/api/violence_cat_registration',violence_cat).then(function (data) {
            var sending = data.data.msg;
            var statusee = data.data.status;
            if (statusee == 0) {
                swal(
                    'Error',
                    sending,
                    'error'
                )
            }
            else {
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )
            }

        $scope.violence_cat_list();
        });

        }
    }


        $scope.violence_cat_update=function (violence_cat) {

                $http.post('public/api/violence_cat_update',violence_cat).then(function (data) {

                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                    $scope.violence_cat_list();
                });

        }
        $scope.violence_cat_list=function () {  $('#small').click(function () {
            chart.setSize(400, 300);
        });

            $('#large').click(function () {
                chart.setSize(600, 300);
            });

                $http.get('public/api/violence_cat_list').then(function (data) {

                    $scope.violence_cats=data.data;
                });

        }
        //gbv/vac
        $http.get('public/api/violence_type_list').then(function (data) {

            $scope.violence_types=data.data;
        });

$scope.institution_registration=function (institute) {
    ////console.log(institute)
    if(institute==undefined){
        swal('Error','Fill Instituition Name','error')
    }else if(institute.institution_type==undefined){
        swal('Error','Fill Instituition Type','error')
    }
    else{
        $http.post('public/api/institution_registration',institute).then(function (data) {
            var sending = data.data.msg;
            var statusee = data.data.status;
            if (statusee == 0) {
                swal(
                    'Error',
                    sending,
                    'error'
                )
            }
            else {
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )
            }

            $scope.institution_list();
        });

    }


}


        $scope.institution_update=function (institute) {

            $http.post('public/api/institution_update',institute).then(function (data) {

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

                $scope.institution_list();
            });

        }



        $scope.institution_list=function () {

            $http.get('public/api/institution_list').then(function (data) {

                $scope.institutes=data.data;
            });

        }
        $scope.violence_cat_list();
        $scope.institution_list();

        $scope.violence_registration=function (violence,patient,fp) {
//////console.log(violence);
            if(patient.selectedPatient==undefined){

                    swal('Error','Choose Patient','error')

            }

           else if(violence.violence_type_id==undefined){

                    swal('Error','Choose Violation Type','error')

            }
            else if(violence.violence_category_id==undefined){

                    swal('Error','Choose Violation Category','error')

            }else if(violence.description==undefined){

                    swal('Error','Fill or write description for this violence','error')

            }else if(violence.service==undefined){

                    swal('Error','Fill or write services given for this violence','error')

            }else if(fp.fp==2 && violence.referral_id==undefined){

                    swal('Error','Choose referred Institution','error')

            }else if(fp.fp==2 && violence.referral_reason==undefined){

                    swal('Error','Fill or write reason for this referral','error')

            }else if(fp.fp==1 && violence.followup_date==undefined){

                    swal('Error','Fill or write date for Followup','error')

            }
            else if(violence.date_of_event==undefined){

                swal('Error','Fill or write date of occurrence of this violation','error')

            }
            else{


            
                var referral_id="";
                var followup_date="";
                if(fp.fp==undefined && violence.referral_id==undefined){

                    referral_id="";

                } if(fp.fp !=undefined && violence.referral_id==undefined){

                    referral_id="";

                }if(fp.fp !=2 && violence.referral_id==undefined){

                    referral_id="";

                }else{
                    referral_id=  violence.referral_id.id;
                }
                if(fp.fp =1 && violence.followup_date==undefined  ){

                    followup_date="";

                }  else{

                    followup_date=violence.followup_date;

                }
                var patient_id=patient.selectedPatient.id;
var referral_id=referral_id;
var violence_category_id=violence.violence_category_id.id;
var violence_type_id=violence.violence_type_id.id;
var followup_date=followup_date;
var description=violence.description;
var other_description=violence.other_description;
var referral_reason=violence.referral_reason;
var service=violence.service;
var date_of_event=violence.date_of_event;

                formdata.append('user_id',user_id);
                formdata.append('facility_id',facility_id);
                formdata.append('patient_id',patient_id);
                formdata.append('referral_id',referral_id);
                formdata.append('referral_reason',referral_reason);
                formdata.append('violence_category_id',violence_category_id);
                formdata.append('violence_type_id',violence_type_id);
                formdata.append('followup_date',followup_date);
                formdata.append('description',description);
                formdata.append('other_description',other_description);
                formdata.append('service',service);
                formdata.append('date_of_event',date_of_event);
                var request = {
                    method: 'POST',
                    url: 'public/api/'+'violation_registration',
                    data: formdata,
                    headers: {
                        'Content-Type': undefined
                    }

                };

                // SEND THE FILES.
                $http(request).then(function (data) {
                        ////console.log(data.data);
                        var msg = data.data.msg;
                    fp.fp="";
                        var statuss = data.data.status;
                        if (statuss ==0) {

                            swal(
                                'Error',
                                msg,
                                'error'
                            );

                        }
                        else{
                            swal(
                                'Success',
                                msg,
                                'success'
                            );
                        }
                    })
                    .then(function () {
                    });




            }



        }

        // $(document).ready(function () {
        //
        // var chart = Highcharts.chart('container', {
        //
        //     chart: {
        //         type: 'column'
        //     },
        //
        //     title: {
        //         text: 'GENDER BASED VIOLATION AND VIOLANCE AGAINST CHILDREN'
        //     },
        //
        //     subtitle: {
        //         text: ''
        //     },
        //
        //     legend: {
        //         align: 'right',
        //         verticalAlign: 'middle',
        //         layout: 'vertical'
        //     },
        //
        //     xAxis: {
        //         categories: ['2012', '2013', '2014'],
        //         labels: {
        //             x: -10
        //         }
        //     },
        //
        //     yAxis: {
        //         allowDecimals: false,
        //         title: {
        //             text: 'FREQUENCY'
        //         }
        //     },
        //
        //     series: [{
        //         name: 'VIOLENCE',
        //         data: [1, 4, 3]
        //     }, {
        //         name: 'FEMALE',
        //         data: [6, 4, 2]
        //     }, {
        //         name: 'MALE',
        //         data: [8, 4, 3]
        //     }],
        //
        //     responsive: {
        //         rules: [{
        //             condition: {
        //                 maxWidth: 500
        //             },
        //             chartOptions: {
        //                 legend: {
        //                     align: 'center',
        //                     verticalAlign: 'bottom',
        //                     layout: 'horizontal'
        //                 },
        //                 yAxis: {
        //                     labels: {
        //                         align: 'left',
        //                         x: 0,
        //                         y: -5
        //                     },
        //                     title: {
        //                         text: null
        //                     }
        //                 },
        //                 subtitle: {
        //                     text: null
        //                 },
        //                 credits: {
        //                     enabled: false
        //                 }
        //             }
        //         }]
        //     }
        // });
        //
        // });



    }

})();

/**
 * Created by USER on 2017-02-25.
 */
/**
 * Created by USER on 2017-02-25.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('itemPriceController', itemPriceController);

    function itemPriceController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        //loading menu
        var user_id=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        $http.get('public/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            //console.log($scope.menu);

        });
var item_list=[];
        $scope.item_ist_search=function (item) {
            $http.post('public/api/item_ist_search',{'search':item}).then(function(data) {
                item_list=data.data;

            });
            return item_list;
        }

        //item_price registration CRUD
// items list
        $http.get('public/api/item_list').then(function(data) {
            $scope.items=data.data;

        });

        $http.get('public/api/payment_sub_category_to_set_price').then(function(data) {
            $scope.payment_sub_categories=data.data;

        });

        $scope.item_price_registration=function (item_price) {

            var prices = [];
            var field_id;
            $scope.payment_sub_categories.forEach(function(category) {

                field_id = category.sub_category_name.replace(' ', '_');
                if($("#"+field_id).val() != ''){
                    prices.push({
                        "facility_id":facility_id,
                        "sub_category_id":category.id,
                        "price":$("#"+field_id).val().replace(',',''),
                        "item_id": item_price.selectedItem.id,
                        "startingFinancialYear": item_price.startingFinancialYear,
                        "endingFinancialYear": item_price.endingFinancialYear,

                    });
                    $("#"+field_id).val('');
                }
            });




                var item_pricesDAta = {
                    'sub_category_id': item_price.sub_category_id,
                    'price': item_price.price,
                    'item_id': item_price.selectedItem.id,
                    'facility_id': facility_id,
                    'startingFinancialYear': item_price.startingFinancialYear,
                    'endingFinancialYear': item_price.endingFinancialYear
                };
                //  console.log(item_pricesDAta);
                $http.post('public/api/item_price_registration', prices).then(function (data) {


                    var sending = data.data;
                    var msg = data.data.msg;
                    if (data.data.status == 0) {
                        swal(
                            'Error',
                            msg,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Success',
                            msg,
                            'success'
                        )
                        $scope.item_price_list();
                    }

                });

             

        }
   $scope.itemLabSearch=function (item) {
            $http.post('public/api/itemLabSearch',{'search':item}).then(function(data) {
                item_list=data.data;

            });
            return item_list;
        }

//displaying item_price when function clicked
        $scope.item_price_list=function () {

            $http.get('public/api/item_price_list/'+facility_id).then(function(data) {
                $scope.item_prices=data.data;

            });
        }
        
//displaying item_price when browser loading
        $http.get('public/api/department_list').then(function(data) {
            $scope.departments=data.data;

        });

        //  update


        $scope.item_price_update=function (item_price) {

            var item_pricesDAta={'id':item_price.id,'price':item_price.price,'facility_id':facility_id,
                'startingFinancialYear':item_price.startingFinancialYear,'endingFinancialYear':item_price.endingFinancialYear};
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('public/api/item_price_update',item_pricesDAta).then(function (data) {


                    $scope.item_price_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated..',
                        'success'
                    )
                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



           
             
        }


//  delete
        $scope.item_price_delete=function (item_price,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('public/api/item_price_delete/'+id).then(function(data) {


                    $scope.item_price_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted',
                        'info'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })

            
                
        }


 





    }

})();


/**
 * Created by USER on 2017-02-25.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('itemSetupController', itemSetupController);

    function itemSetupController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        //loading menu
        var user_id = $rootScope.currentUser.id;
        $http.get('public/api/getUsermenu/' + user_id).then(function (data) {
            $scope.menu = data.data;
            //console.log($scope.menu);

        });


        //item registration CRUD

        $scope.item_exemptions = [];

        $scope.item_exemption = function (item) {
            $('#itm').val('');
            for (var i = 0; i < $scope.item_exemptions.length; i++) {


                if ($scope.item_exemptions[i].item_id == item.selectedItem.id) {
                    swal(item.selectedItem.item_name + " already in your order list  ", "", "info");
                    return;
                }
            }

            $scope.item_exemptions.push({item_name: item.selectedItem.item_name, item_id: item.selectedItem.id});

        }




        $scope.item_exemption_set=function () {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'SET',
                cancelButtonText: 'CANCEL',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('public/api/item_exemption_set',{items:$scope.item_exemptions,status:1}).then(function (data) {
                    $scope.item_exemptions=[];
                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )



                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })


        }



        $scope.item_exemption_reset=function () {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'RESET',
                cancelButtonText: 'CANCEL',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('public/api/item_exemption_set',{items:$scope.item_exemptions,status:0}).then(function (data) {
                    $scope.item_exemptions=[];
                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )



                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })


        }




        $scope.removeItemArray = function(x){

            $scope.item_exemptions.splice(x,1);


        }

        $scope.item_registration=function (item) {
            //console.log(item);
            var itemsDAta={'item_name':item.item_name,'dept_id':item.dept_id};

            $http.post('public/api/item_registration',itemsDAta).then(function(data) {



                $scope.item_list();
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

            });
        }

//displaying item when function clicked
        $scope.item_list=function () {

            $http.get('public/api/item_list').then(function(data) {
                $scope.items=data.data;

            });
        }
var searhItem=[];

         
//displaying item when browser loading
        $scope.item_searching=function (item) {


            $http.get('public/api/item_searching/'+item).then(function (data) {
                searhItem = data.data;

            });
            return searhItem;
        }

//displaying item when browser loading
        $http.get('public/api/department_list').then(function(data) {
            $scope.departments=data.data;

        });

        //  update


        $scope.item_update=function (item) {

            var itemsDAta={'id':item.id,'item_name':item.item_name,'dept_id':item.dept_id};

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('public/api/item_update',itemsDAta).then(function (data) {


                    $scope.item_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated....',
                        'success'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })




        }


//  delete
        $scope.item_delete=function (item,id) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('public/api/item_delete/'+id).then(function(data) {


                    $scope.item_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted..',
                        'info'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }



        //item type mapping registration CRUD



        $scope.item_type_map_registration=function (item_type_map) {

            var item_type_mapsDAta={
                'item_id':item_type_map.selectedItem.id,'Dose_formulation':item_type_map.Dose_formulation,
                'dispensing_unit':item_type_map.dispensing_unit,'item_category':item_type_map.item_category,
                'item_code':item_type_map.item_code,'sub_item_category':item_type_map.sub_item_category,
                 'unit_of_measure':item_type_map.unit_of_measure,
            };
            console.log(item_type_map);
            $http.post('public/api/item_type_map_registration',item_type_mapsDAta).then(function(data) {



                $scope.item_type_map_list();
                var sending=data.data.msg;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

            });
        }

//displaying item_type_map when function clicked
        $scope.item_type_map_list=function () {

            $http.get('public/api/item_type_map_list').then(function(data) {
                $scope.item_type_maps=data.data;

            });
        }
        $http.get('public/api/item_type_map_list').then(function(data) {
            $scope.item_type_maps=data.data;

        });
//displaying item_type_map when browser loading
        $http.get('public/api/department_list').then(function(data) {
            $scope.departments=data.data;

        });

        //  update


        $scope.item_type_map_update=function (item_type_map) {

            var item_type_mapsDAta={'item_type_map_name':item_type_map.item_type_map_name,'dept_id':item_type_map.dept_id};
           // console.log(item_type_mapsDAta)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('public/api/item_type_map_update',item_type_mapsDAta).then(function (data) {


                    $scope.item_type_map_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated..',
                        'success'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }


//  delete
        $scope.item_type_map_delete=function (item_type_map,id) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('public/api/item_type_map_delete/'+id).then(function(data) {


                    $scope.item_type_map_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted...',
                        'success'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }



//item category registration CRUD



        $scope.item_category_registration=function (item_category) {
             console.log(item_category);
            var item_categoriesDAta={'item_category_name':item_category.item_category_name};

            $http.post('public/api/item_category_registration',item_categoriesDAta).then(function(data) {

                $scope.item_category_list();
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

            });
        }

//displaying item_category when function clicked
        $scope.item_category_list=function () {

            $http.get('public/api/item_category_list').then(function(data) {
                $scope.item_categories=data.data;

            });
        }
        $scope.item_category_list();


        //  update


        $scope.item_category_update=function (item_category) {
            console.log(item_category)
            var item_categoriesDAta=item_category;
console.log(item_categoriesDAta)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('public/api/item_category_update',item_categoriesDAta).then(function (data) {


                    $scope.item_category_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated....',
                        'success'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })




        }


//  delete
        $scope.item_category_delete=function (item_category,id) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('public/api/item_category_delete/'+id).then(function(data) {


                    $scope.item_category_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted..',
                        'info'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }





    }

})();

/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('payment_typeController', payment_typeController);

    function payment_typeController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });


        
        //payment_type_registration  CRUD

        $http.get('/api/payment_type_list').then(function(data) {
            $scope.payment_types=data.data;

        });

        $scope.payment_type_registration=function (payment_type) {
              console.log(payment_type);
            var payment_type_data={'payment_type_name':payment_type.payment_type_name,'facility_id':facility_id};
            $http.post('/api/payment_type_registration',payment_type_data).then(function(data) {
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

                $scope.payment_type_list();
                
            });
        }


        $scope.payment_type_list=function () {

            $http.get('/api/payment_type_list').then(function(data) {
                $scope.payment_types=data.data;

            });
        }



        //  update


        $scope.payment_type_update=function (payment_type) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/payment_type_update', payment_type).then(function (data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated....',
                        'success'
                    )
                    $scope.payment_type_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.payment_type_delete=function (payment_type,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/payment_type_delete/'+id).then(function(data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted..',
                        'warning'
                    )
                    $scope.payment_type_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }
        
        
        
        
        
        //payment categories CRUD



        

        $http.get('/api/payment_category_list').then(function(data) {
            $scope.payment_categories=data.data;

        });

        $scope.payment_category_registration=function (payment_category) {
            //console.log(payment_category);
            var payment_category_data={'category_description':payment_category.category_description,' facility_id': facility_id};
            $http.post('/api/payment_category_registration',payment_category_data).then(function(data) {
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

                $scope.payment_category_list();

            });
        }


        $scope.payment_category_list=function () {

            $http.get('/api/payment_category_list').then(function(data) {
                $scope.payment_categories=data.data;

            });
        }



        //  update


        $scope.payment_category_update=function (payment_category) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/payment_category_update', payment_category).then(function (data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'updated....',
                        'success'
                    )
                    $scope.payment_category_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.payment_category_delete=function (payment_category,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/payment_category_delete/'+id).then(function(data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted',
                        'warning'
                    )
                    $scope.payment_category_list();

                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }


        //payment sub categories CRUD





        $http.get('/api/payment_sub_category_list').then(function(data) {
            $scope.payment_sub_categories=data.data;

        });

        $scope.payment_sub_category_registration=function (payment_sub_category) {
            //console.log(payment_sub_category);
            var payment_sub_category_data={'sub_category_name':payment_sub_category.sub_category_name,'pay_cat_id':payment_sub_category.pay_cat_id,'facility_id':facility_id};
            $http.post('/api/payment_sub_category_registration',payment_sub_category_data).then(function(data) {
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

                $scope.payment_sub_category_list();

            });
        }


        $scope.payment_sub_category_list=function () {

            $http.get('/api/payment_sub_category_list').then(function(data) {
                $scope.payment_sub_categories=data.data;

            });
        }



        //  update


        $scope.payment_sub_category_update=function (payment_sub_category) {
            //console.log(payment_sub_category)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/payment_sub_category_update', payment_sub_category).then(function (data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated...',
                        'success'
                    )
                    $scope.payment_sub_category_list();

                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })




        }



//  delete
        $scope.payment_sub_category_delete=function (payment_sub_category,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/payment_sub_category_delete/'+id).then(function(data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted..',
                        'warning'
                    )
                    $scope.payment_sub_category_list();

                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })




        }


        //payment status CRUD





        $http.get('/api/payment_status_list').then(function(data) {
            $scope.payment_status=data.data;

        });

        $scope.payment_status_registration=function (pay_status) {
            console.log(pay_status);
            var payment_status_data={'payment_status':pay_status.payment_status};
            $http.post('/api/payment_status_registration',pay_status).then(function(data) {
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )
                $scope.payment_status_list();

            });
        }


        $scope.payment_status_list=function () {

            $http.get('/api/payment_status_list').then(function(data) {
                $scope.payment_status=data.data;

            });
        }



        //  update


        $scope.payment_status_update=function (payment_status) {
            //console.log(payment_status)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/payment_status_update', payment_status).then(function (data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updated...',
                        'success'
                    )
                    $scope.payment_status_list();

                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }



//  delete
        $scope.payment_status_delete=function (payment_status,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/payment_status_delete/'+id).then(function(data) {

                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Deleted...',
                        'warning'
                    )
                    $scope.payment_status_list();

                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



    }

})();

/**
 * Created by USER on 2017-03-14.
 */
/**
 * Created by USER on 2017-03-13.
 */
/**
 * Created by USER on 2017-03-09.
 */

(function() {

    'use strict';


    angular
        .module('authApp')

        .factory('Excel',function($window){
            var uri='data:application/vnd.ms-excel;base64,',
                template='<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
                base64=function(s){return $window.btoa(unescape(encodeURIComponent(s)));},
                format=function(s,c){return s.replace(/{(\w+)}/g,function(m,p){return c[p];})};
            return {
                tableToExcel:function(tableId,worksheetName){
                    var table=$(tableId),
                        ctx={worksheet:worksheetName,table:table.html()},
                        href=uri+base64(format(template,ctx));
                    return href;
                }
            };
        })
        .controller('DispensingController', DispensingController);

    function DispensingController($http, $auth, $rootScope,$state,$location,$scope,Excel,$timeout,$interval,$uibModal) {

        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////////////console.log($scope.menu);

        });



        $scope.exportToExcel=function(tableId){ // ex: '#my-table'
            var exportHref=Excel.tableToExcel(tableId,'WireWorkbenchDataExport');
            $timeout(function(){location.href=exportHref;},100); // trigger download
        }

        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;


       // var audio=new Audio('/ring-tone/ring11.mp3');
        $http.get('/api/dispensings/'+user_id ).then(function(data) {
            $scope.items_balances=data.data;
            //////console.log(data.data);

        });
        var resdata =[];
        $scope.dispensing_array_requisitions=[];
        //patients list to dispense
        $scope.Dispensing_queue=function () {
            $http.get('/api/Dispensing_queue/'+facility_id).then(function(data) {
                $scope.patients=data.data;
                $scope.patientsTodispense="";
               // ////////console.log($scope.patients);

            });
        }
        $scope.Dispensing_queue();

        $scope.patient_to_dispense=function (patient_id) {
            $http.get('/api/patient_to_dispense/'+patient_id).then(function(data) {
                $scope.patientsTodispense=data.data;
                ////console.log($scope.patientsTodispense);
                $scope.prescription_receipt=[];
            });
        }


        $scope.Item_to_dispense=function (orderview) {
            ////console.log(orderview)

            var item_id=orderview.item_id;
            var quantity=orderview.quantity;
            $scope.Vieworders=orderview;
            $scope.patientsTodispense="";
            $http.get('/api/batch_patient_dispensing_list/'+item_id+','+user_id+','+quantity).then(function(data) {
                $scope.batches=data.data;
               // ////////console.log(data.data);

            });


        }

        $scope.Vieworder=function (orderview) {

            var item_id=orderview.item_id;
            var quantity=orderview.quantity;
            $scope.Vieworders=orderview;
            $http.get('/api/batchdispensing_list/'+item_id+','+user_id).then(function(data) {
                $scope.batches=data.data;
               //////console.log(data.data);

            });
        }

        //codes to display patients from database to dispense.
        $scope.searchPatientTodispense = function(searchKey) {


            $http.post('/api/searchPatientTodispense',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;
            });
            return resdata;

        }


        $scope.batchesbalances="";
        //loading item batches balance from function loadBatchabove
        $scope.loadBatchBalance=function (batch_number,store_id) {

            $http.get('/api/loaddispensingBatchBalance/'+batch_number+','+store_id).then(function(data) {
                $scope.batchesbalances=data.data;
                //////console.log(data.data)
            });
        }


//loading specific patient data from db to dispense
        $scope.LoadPatientTodispenseFromDB=function (mrn) {
            $http.post('/api/LoadPatientTodispenseFromDB',{mrn:mrn}).then(function(data) {
                $scope.patients=data.data;
                $scope.patientsTodispense="";
               // ////////console.log($scope.patients);

            });
        }

        $scope.prescription_receipt=[];
        $scope.issue_to_patient=function (item1,item2) {

             ////console.log(item1,item2);
            if(item2.out_of_stock=='OS'){
                var received_from_id=undefined;
                var identifier=undefined;
                var store_id=undefined;
                var batch_no=undefined;
                var quantity_received=undefined;
            }
          else{
                var received_from_id=item1.selectedBatch.received_from_id;;
                var identifier=$scope.batchesbalances[0].id;
                var store_id=$scope.batchesbalances[0].store_id;
                var batch_no=item1.selectedBatch.batch_no;
                var quantity_received=$scope.batchesbalances[0].quantity_received - item2.quantity;
            }
            for(var i=0;i<$scope.prescription_receipt.length;i++)
                if($scope.prescription_receipt[i].item_id == item2.item_id){ swal("Item already in your order list!"); return;}

            $scope.prescription_receipt.push({'item_id':item2.item_id,'frequency':item2.frequency,'duration':item2.duration,'instruction':item2.instruction,'dose':item2.dose,'os':item2.out_of_stock,'gender':item2.gender,'dob':item2.dob,'middle_name':item2.middle_name,'last_name':item2.last_name,'first_name':item2.first_name,'start_date':item2.start_date,'item_name':item2.item_name,'medical_record_number':item2.medical_record_number,'quantity':item2.quantity,'doctor':item2.name});


            var patient_order={
                'item_id':item2.item_id,
                'os':item2.out_of_stock,
                'quantity_dispensed':item2.quantity,
                'patient_id':item2.patient_id,
                'request_amount':item2.quantity,
                'received_from_id':received_from_id,
                'order_id':item2.id,
                'identifier':identifier,
                'user_id':user_id,
                'dispensing_status_id':2,
                'store_id':store_id,
                'batch_no':batch_no,
                'quantity_received':quantity_received,
            };
             //////console.log(patient_order);
           // $scope.prescription_printer(item1,item2)
            $http.post('/api/save_dispensed_item',patient_order).then(function(data) {

                $scope.Vieworders="";
                $http.get('/api/patient_to_dispense/'+item2.patient_id).then(function(data) {
                    $scope.patientsTodispense=data.data;


                    if( $scope.patientsTodispense.length <1)
                    {

                        $scope.Dispensing_queue();
                        $scope.Print_now();

                    }

                    ////////console.log($scope.patientsTodispense);

                });
            });
        }






        $scope.prescription_printer=function (item1,item2) {

            // for(var i=0;i<$scope.prescription_receipt.length;i++)
            // if($scope.prescription_receipt[i].item_id == item2.item_id){ swal("Item already in your order list!"); return;}
            //
            $scope.prescription_receipt.push({'item_id':item2.item_id,'frequency':item2.frequency,'duration':item2.duration,'instruction':item2.instruction,'dose':item2.dose,'os':item2.out_of_stock,'gender':item2.gender,'dob':item2.dob,'middle_name':item2.middle_name,'last_name':item2.last_name,'first_name':item2.first_name,'start_date':item2.start_date,'item_name':item2.item_name,'medical_record_number':item2.medical_record_number,'quantity':item2.quantity,'doctor':item2.name});


        }

$scope.Print_now=function () {
    var object =$scope.prescription_receipt;
    var modalInstance = $uibModal.open({
        templateUrl: '/views/Pharmacy/prescriptionModal.html',
        size: 'lg',
        animation: true,
        controller: 'PrescriptionController',
        resolve:{
            object: function () {
                return object;
            }
        }
    });

}
        $scope.Cancelorders=function () {
           $scope.patientsTodispense="";
            $scope.Dispensing_queue(facility_id);

        }
        $scope.Cancelorder=function () {

            $scope.Vieworders="";

        }




        //codes to display items in pharmacy stores...received items.
        $scope.showSearch = function(searchKey) {


            $http.post('/api/searchItemReceived',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;
            });
            return resdata;

        }
        //codes to display items in pharmacy stores...received items.
        $scope.showItem = function(searchKey) {


            $http.post('/api/searchItemdispensingReceived',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;
            });
            return resdata;

        }



        //loading item batches from function ShowItem above
        $scope.loadBatch=function (item_id) {

            $http.get('/api/batchdispensing_list/'+item_id+','+user_id).then(function(data) {
                $scope.batches=data.data;
                //////////console.log(data.data);

            });
        }




        $http.get('/api/pharmacy_transaction_type_list').then(function(data) {
            $scope.transtypes=data.data;

        });

        $http.get('/api/store_list/'+user_id).then(function(data) {
            $scope.stores=data.data;

        });
        $http.get('/api/Dispensing_stores_List/'+user_id).then(function(data) {
            $scope.dispensing_stores=data.data;

        });

        $http.get('/api/Sub_main_stores_List/' + user_id).then(function (data) {
            $scope.Sub_Main_stores = data.data;

        });



        //vendor_registration  CRUD



        $interval( function()
        {
            $scope.callAtInterval();
        }, 1000);

        $scope.callAtInterval = function() {

           // audio.play();

        }

        $scope.dispensing_item_receiving_list=function () {
           $scope.load=0;
           $scope.loading="Please wait while system loading";
            $scope.items="";



            $http.get('/api/dispensing_item_receiving_list/'+facility_id+','+user_id).then(function(data) {

                if(data.data.length<1){
                    swal(
                        'Error',
                        'No data Available',
                        'error'
                    )

                }
                else{
                    $scope.items=data.data;
                    $scope.xs=[];
                    $scope.ys=[];

                     for(var i=0;i< $scope.items.length; i++){
                          $scope.xs.push($scope.items[i].item_name);
                         $scope.ys.push($scope.items[i].quantity_received);
                     }

                    $scope.labels=$scope.xs ;
                    $scope.data =  $scope.ys;
                }


            });
        }

        //pharmacy sub store _report types

        $scope.reports=[{'id':1,'balance':"Store Balance"},{'id':2,'balance':"Detailed Report"},{'id':3,'balance':"Dispensed Items"}];

        $scope.pharmacy_report=function (report_type) {
            $http.get('/api/item_balances_list_in_dispensing/' + facility_id + ',' + user_id + ',' + report_type).then(function (data) {
                if (data.data.length > 0) {
                    $scope.items = data.data;
                    $scope.xs = [];
                    $scope.ys = [];
                }
                    for(var i=0;i< $scope.items.length; i++){
                        $scope.xs.push($scope.items[i].item_name);
                        $scope.ys.push($scope.items[i].quantity_received  );
                    }

                    $scope.labels=$scope.xs ;
                    $scope.data =  $scope.ys;



            });
        }

        $scope.dispensing_item_list_requisition=function (order) {

            if (order.selectedItem == undefined) {
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            } else if (order.selectedItem.item_id == undefined) {
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            }
            else if (order.selectedStoreRequestReceiver == undefined) {
                swal(
                    'Error',
                    'Choose Store Name you want To send this order request',
                    'error'
                )
            } else if (order.selectedStoreRequestSender == undefined) {
                swal(
                    'Error',
                    'Choose Store Name where order request is Coming from',
                    'error'
                )
            }
            else if ( order.quantity == undefined) {
                swal(
                    'Error',
                    'Enter Quantity you want to order',
                    'error'
                )
            }
            else if (order.selectedStoreRequestSender.id==order.selectedStoreRequestReceiver.id) {
                swal(
                    'Error',
                    'You can not Request item From similar Store',
                    'error'
                )
            }
            else if ( order.quantity<0) {
                swal(
                    'Error',
                    'Quantity Can not be a negative value .. Please enter a Possitive number',
                    'error'
                )
            }
            else{
                for(var i=0;i<$scope.dispensing_array_requisitions.length;i++){


                    if(
                        $scope.dispensing_array_requisitions[i].item_id == order.selectedItem.item_id &&
                        $scope.dispensing_array_requisitions[i].request_receiver == order.selectedStoreRequestReceiver.id
                    )
                    { swal(order.selectedItem.item_name+" already in your order list","","info"); return;}
                }
                $('#btch').val('');
                $('#itm3').val('');
                $('#itm4').val('');

                $scope.dispensing_array_requisitions.push({
                    'item_id': order.selectedItem.item_id,
                    'item_name': order.selectedItem.item_name,
                    'quantity': order.quantity,
                    'user_id':user_id,
                    'facility_id':facility_id,
                    'request_sender': order.selectedStoreRequestSender.id,
                    'from': order.selectedStoreRequestSender.store_name,
                    'request_receiver': order.selectedStoreRequestReceiver.id,
                    'receiver_name': order.selectedStoreRequestReceiver.store_name,
                    'store_name': order.selectedStoreRequestReceiver.store_name,
                    'request_receiver_type': order.selectedStoreRequestReceiver.store_type_id,
                    'request_sender_type': order.selectedStoreRequestSender.store_type_id,

                });
            }
        }

        $scope.removeItemArray_requisition = function(x){

            $scope.dispensing_array_requisitions.splice(x,1);


        }


//dispensing store ordering items from several stores
        $scope.dispensing_item_ordering = function () {


                $http.post('/api/dispensing_item_ordering',$scope.dispensing_array_requisitions).then(function (data) {
                    $scope.dispensing_array_requisitions=[];
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }


                });
            }






        var _selected;





        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };


        $scope.sort = function(keyname){
            $scope.sortKey = keyname;   //set the sortKey to the param passed
            $scope.reverse = !$scope.reverse; //if true make it false and vice versa
        }


       

    }

})();
/**
 * Created by USER on 2017-03-08.
 */


/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('PharmacyController', PharmacyController);

    function PharmacyController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });

//searching user for assigning a store to dispens
        var user_store=[];
        $scope.SearchUser=function (seachKey) {

            var searchUser={'userKey':seachKey,'facility_id':facility_id};
            $http.post('/api/getUserToSetStoreToAccess',searchUser ).then(function(data) {
                user_store=data.data;
 
            });
             return user_store;
        }
$scope.User_store_populate=[];
        var ckecks;

        $scope.populateInArray=function (selected_user_store) {


             var checking={'user_id':user_store[0].id,'store_id':selected_user_store.id};

            // $http.post('/api/store_user_checking',checking ).then(function(data) {
            //      ckecks=data.data.counti;
            //
            // });



                if(selected_user_store.value1==false){

                }
                else{
                    $scope.User_store_populate.push({
                        'user_name':user_store[0].name,
                        'user_id':user_store[0].id,
                        'store_id':selected_user_store.id,
                        'store_name':selected_user_store.store_name,
                    });



                }


            }



$scope.store_user_configure=function () {




if($scope.User_store_populate.length<1){
    swal(
        'Error',
        'Nothing to save',
        'error'
    )
}

        else {
    $http.post('/api/store_user_configure', $scope.User_store_populate).then(function (data) {
        var msg=data.data.msg;
        var status=data.data.status;
        if(status==0){
            swal(
                'Feedback!',
                msg,
                'info'
            )
        }
        else{
            swal(
                'Feedback!',
                msg,
                'success'
            )
        }


if(data){
    $scope.User_store_populate=[];
}
    });
}

}
           


            




        $scope.removeItem = function(x){

            $scope.User_store_populate.splice(x,1);

        }

        //vendor_registration  CRUD
        
        

        $scope.vendor_registration=function (vendor) {
            
            var vendor_data={'vendor_name':vendor.vendor_name,'facility_id':facility_id, 
            'vendor_address':vendor.vendor_address,'vendor_phone_number':vendor.vendor_phone_number,
            'vendor_contact_person':vendor.vendor_contact_person};

            $http.post('/api/vendor_registration',vendor_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;

                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }


                $scope.vendor_list();

            });
        }


        $scope.vendor_list=function () {

            $http.get('/api/vendor_list/'+facility_id).then(function(data) {
                $scope.vendors=data.data;

            });
        }

        $scope.vendor_list();

        //  update


        $scope.vendor_update=function (vendor) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/vendor_update', vendor).then(function (data) {
var sending=data.data.msg;
                     swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                    $scope.vendor_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.vendor_delete=function (vendor,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/vendor_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.vendor_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



        //invoices_registration  CRUD



        $scope.invoice_registration=function (invoice) {

            var invoice_data={'invoice_number':invoice.invoice_number,'vendor_id':invoice.vendor_id};
            console.log(invoice_data);
            $http.post('/api/invoice_registration',invoice_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }


                $scope.invoice_list();

            });
        }


        $scope.invoice_list=function () {

            $http.get('/api/invoice_list/'+facility_id).then(function(data) {
                $scope.invoices=data.data;

            });
        }
        $scope.invoice_list();


        //  update


        $scope.invoice_update=function (invoice) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/invoice_update', invoice).then(function (data) {

                    var sending=data.data.msg;
                     swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                    $scope.invoice_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.invoice_delete=function (id) {
            console.log(id);
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/invoice_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.invoice_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }




 //pharmacy_transaction_type_registration  CRUD



        $scope.pharmacy_transaction_type_registration=function (transtype) {

            var transtype_data={'transaction_type':transtype.transaction_type};
            console.log(transtype);
            $http.post('/api/pharmacy_transaction_type_registration',transtype).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }
                $scope.transtype_list();

            });
        }


        $scope.transtype_list=function () {

            $http.get('/api/pharmacy_transaction_type_list').then(function(data) {
                $scope.transtypes=data.data;

            });
        }

        $scope.transtype_list();

        //  update


        $scope.pharmacy_transaction_type_update=function (transtype) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/pharmacy_transaction_type_update', transtype).then(function (data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.transtype_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.pharmacy_transaction_type_delete=function (id) {
            console.log(id)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/pharmacy_transaction_type_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.transtype_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }
        //store type_registration  CRUD



        $scope.store_type_registration=function (storetype) {

            var storetype_data={'store_type_name':storetype.store_type_name};
            console.log(storetype_data);
            $http.post('/api/store_type_registration',storetype_data).then(function(data) {

                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

                $scope.store_type_list();

            });
        }


        $scope.store_type_list=function () {

            $http.get('/api/store_type_list').then(function(data) {
                $scope.storetypes=data.data;

            });
        }

        $scope.store_type_list();

        //  update


        $scope.store_type_update=function (storetype) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/store_type_update', storetype).then(function (data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.store_type_list();

                })


                $scope.store_type_list();

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.store_type_delete=function (id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/store_type_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.store_type_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }


        //store requests status_registration  CRUD



        $scope.store_request_status_registration=function (requesstatus) {

            var requesstatus_data={'store_request_status':requesstatus.store_request_status};
            console.log(requesstatus_data);
            $http.post('/api/store_request_status_registration',requesstatus_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

                $scope.store_request_status_list();

            });
        }


        $scope.store_request_status_list=function () {

            $http.get('/api/store_request_status_list').then(function(data) {
                $scope.requeststatuses=data.data;

            });
        }

        $scope.store_request_status_list();

        //  update


        $scope.store_request_status_update=function (requeststatus) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/store_request_status_update', requeststatus).then(function (data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.store_request_status_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.store_request_status_delete=function (id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/store_request_status_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.store_request_status_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }


        //stores_registration  CRUD



        $scope.store_registration=function (store) {

            var store_data={'store_name':store.store_name,'store_type_id':store.store_type_id,'facility_id':facility_id};
            console.log(store_data);
            console.log(store);
            $http.post('/api/store_registration',store_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

                $scope.store_list();

            });
        }


        $scope.store_list=function () {

            $http.get('/api/store_list/'+user_id).then(function(data) {
                $scope.stores=data.data;

            });
        }

        $scope.store_list();

        //  update


        $scope.store_update=function (store) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/store_update', store).then(function (data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.store_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.store_delete=function (store,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/store_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.store_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }




    }

})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-03-09.
 */
/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('PharmacyItemsController', PharmacyItemsController);

    function PharmacyItemsController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });
       
        var resdata =[];
        $scope.items_array =[];
        $scope.items_array_issue =[];
        $scope.items_array_requisitions =[];
        $scope.showSearch = function(searchKey) {

                $http.post('/api/searchItem',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;
                });
                return resdata;

        }

        //codes to display items in pharmacy stores...received items.
        $scope.showItem = function(searchKey) {


                $http.post('/api/searchItemReceived',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;
                });
                return resdata;

        }

        //loading item batches from function ShowItem above
        $scope.loadBatch=function (item_id) {
            $http.get('/api/batch_list/'+item_id+','+user_id).then(function(data) {
                $scope.batches=data.data;
                console.log(data.data);
            });
        }
        $scope.batchesbalances="";
        //loading item batches balance from function loadBatch above
        $scope.loadBatchBalance=function (batch_number,store_id) {

            $http.get('/api/loadBatchBalance/'+batch_number+','+store_id).then(function(data) {
                $scope.batchesbalances=data.data;
                console.log(data.data);
            });
        }

// setup data for receiving items
        $http.get('/api/invoice_list/'+facility_id).then(function(data) {
            $scope.invoices=data.data;

        });



        $http.get('/api/pharmacy_transaction_type_list').then(function(data) {
            $scope.transtypes=data.data;

        }); 
        $http.get('/api/pharmacy_transaction_adjustment').then(function(data) {
            $scope.transtypespossitive=data.data;

        });

        $http.get('/api/Main_stores_List/'+user_id).then(function(data) {
            $scope.main_stores=data.data;

        });

        $http.get('/api/store_list/'+user_id).then(function(data) {
            $scope.stores=data.data;

        });


        $scope.store_list=function () {

            $http.get('/api/storesListToAsignAccess/'+facility_id).then(function(data) {
                $scope.storesListToconfigure=data.data;

            });
        }

        $scope.store_list();


        //item_receiving_list queue  CRUD


$scope.item_receiving_list=function (item_receive) {
    if(item_receive==undefined && $scope.items_array.length==0){
        swal(
            'Error',
            'Choose Item first',
            'error'
        )
    }if(item_receive.selectedItem==undefined && $scope.items_array.length==0 ){
        swal(
            'Error',
            'Choose Item first',
            'error'
        )
    }
    else  if(item_receive.selectedItem.item_id==undefined && $scope.items_array.length==0){
        swal(
            'Error',
            'Choose Item first',
            'error'
        )
    }
    // else if(item_receive.selectedStore==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose Store',
    //         'error'
    //     )
    // } else if(item_receive.selectedStore.id==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose Store',
    //         'error'
    //     )
    // }else if(item_receive.selectedStore==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose Store',
    //         'error'
    //     )
    // }
    // else if(item_receive.selectedInvoice==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose Invoice or  Reference Number',
    //         'error'
    //     )
    // }   else if(item_receive.transaction_type_id==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose Transaction Type',
    //         'error'
    //     )
    // } else if(item_receive.selectedInvoice.id==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose Invoice or  Reference Number',
    //         'error'
    //     )
    // }
    else if(item_receive.batch_no==undefined ){
        swal(
            'Error',
            'Choose  or Enter Batch Number',
            'error'
        )
    }
    else if(item_receive.quantity==undefined){
        swal(
            'Error',
            'Choose  or Enter Item Quantity Received',
            'error'
        )
    }
    else if(item_receive.expiry_date==undefined){
        swal(
            'Error',
            'Choose  or Enter Item Expiry Date',
            'error'
        )
     }
   // else if(item_receive.received_date==undefined && $scope.items_array.length==0){
    //     swal(
    //         'Error',
    //         'Choose  or Enter Item arrived Date',
    //         'error'
    //     )
    // }
    else if(item_receive.price==undefined){
        swal(
            'Error',
            'Choose  or Enter Item Cost Price',
            'error'
        )
    }
    else{


    for(var i=0;i<$scope.items_array.length;i++){


        if($scope.items_array[i].batch_no == item_receive.batch_no){ swal("  Batch Number "+item_receive.batch_no+" already in your order list"+$scope.items_array[i].item_name,"","info"); return;}


    }
        if($scope.items_array.length !=0){
            var store_name=$scope.items_array[0].store_name;
            var received_store_id=$scope.items_array[0].received_store_id;
            var invoice_refference=$scope.items_array[0].invoice_refference;
            var received_from_id=$scope.items_array[0].received_from_id;
            var transaction_type_id=$scope.items_array[0].transaction_type_id;
            var transaction_type=$scope.items_array[0].transaction_type;
            var received_date=$scope.items_array[0].received_date;
            var invoice_number=$scope.items_array[0].invoice_number;
            var remarks=$scope.items_array[0].remarks;
        }
        else{
            store_name=item_receive.selectedStore.store_name;
            received_store_id=item_receive.selectedStore.id;
            invoice_refference=item_receive.selectedInvoice.id;
            received_from_id=item_receive.selectedInvoice.vendor_id;
            transaction_type_id=item_receive.transaction_type_id;
            transaction_type=item_receive.transaction_type;
            received_date=item_receive.received_date;
            invoice_number=item_receive.selectedInvoice.invoice_number;
            remarks=item_receive.remarks;
        }
    $scope.items_array.push({'item_id':item_receive.selectedItem.item_id,'item_name':item_receive.selectedItem.item_name,
       'store_name':store_name,
       'received_store_id':received_store_id,
       'invoice_refference':invoice_refference,
       'invoice_number':invoice_number,
       'received_from_id':received_from_id,
       'transaction_type':transaction_type,
       'transaction_type_id':transaction_type_id,
        'received_date':received_date,
        'remarks':remarks,
       'user_id':user_id,'batch_no':item_receive.batch_no,
       'quantity':item_receive.quantity,
       'expiry_date':item_receive.expiry_date,'price':item_receive.price,'facility_id':facility_id,'control':'l'});

    $scope.total_cost=TOTAL_COST($scope.items_array);
}
}

        var TOTAL_COST = function(){
            var sum = 0;

            for(var i=0; i<$scope.items_array.length;i++){
                sum += ($scope.items_array[i].price*$scope.items_array[i].quantity);
            }

            return sum;

        }


        $scope.item_receiving_registration=function () {

            $http.post('/api/item_receiving_registration',$scope.items_array).then(function(data) {
                var sending=data.data.msg;
                var statuse=data.data.status;
                $scope.items_array=[];
                if(statuse==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Success',
                        sending,
                        'success'
                    )
                }
        
        });

        }

        //pharmacy_report types

        $scope.reports=[{'id':1,'balance':"Store Balance"},{'id':2,'balance':"Detailed Report"},
            {'id':3,'balance':"Reorder Level"},{'id':4,'balance':"Tracer Medicine"}];

         $scope.pharmacy_report=function (report_type) {
             $http.get('/api/item_balances_list_in_mainstore/' + facility_id + ',' + user_id + ',' + report_type).then(function (data) {
                 if (data.data.length > 0) {
                     $scope.items = data.data;
                 }
else{
                     $scope.xs=[];
                     $scope.ys=[];

                     for(var i=0;i< $scope.items.length; i++){
                         $scope.xs.push($scope.items[i].item_name);
                         $scope.ys.push($scope.items[i].quantity);
                     }

                     $scope.labels=$scope.xs ;
                     $scope.data =  $scope.ys;


                 }
                

             });
         }

        $scope.pharmacy_report(1);
        // $scope.item_receiving_list1=function () {
        //
        //     $http.get('/api/item_receiving_list1/'+facility_id+','+user_id).then(function(data) {
        //         if(data.data.length >0){
        //             $scope.items = data.data;
        //             console.log( data.data)
        //                 $scope.xs=[];
        //                 $scope.ys=[];
        //
        //                 for(var i=0;i< $scope.items.length; i++){
        //                     $scope.xs.push($scope.items[i].item_name);
        //                     $scope.ys.push($scope.items[i].quantity);
        //                 }
        //
        //                 console.log( $scope.ys)
        //                 $scope.labels=$scope.xs ;
        //                 $scope.data =  $scope.ys;
        //
        //
        //
        //         }
        //         else{
        //             swal(
        //                 'Info',
        //                 'Nothing in stores',
        //                 'info'
        //             )
        //         }
        //
        //
        //     });
        // }
        $scope.main_store_incoming_order=function () {

            $http.get('/api/main_store_incoming_order/'+facility_id+','+user_id).then(function(data) {
                $scope.item_orders=data.data;

            });
        }
        $scope.main_store_incoming_order();


        //codes to display order and item specifically for processing
        $scope.Vieworder=function (orderview) {
 // console.log(orderview)
//// console.log(orderview.item_id)
            var item_id=orderview.item_id;
            $scope.Vieworders=orderview;
            $http.get('/api/batch_list/'+item_id+','+user_id).then(function(data) {
                $scope.batches=data.data;

            });
        }

        //codes for issuing or processing selected order

        $scope.order_issuing=function (order_issuing,order) {
            console.log( $scope.batchesbalances);
  console.log(order_issuing,order)

             if($scope.batchesbalances[0].quantity==undefined){
                swal(
                    'Error',
                    'Choose Batch Number',
                    'error'
                )
            }
            else if(order_issuing.quantity<0){
                swal(
                    'Error',
                    'Issuing Quantity Can not Be Negative value',
                    'error'
                )
            }
            else if(order.item_id==undefined){
                swal(
                    'Error',
                    'Choose Issued Store',
                    'error'
                )
            }
            else if(order_issuing.transaction_type_id==undefined){
                swal(
                    'Error',
                    'Choose Issuing Type of This Transaction',
                    'error'
                )
            }
            else if($scope.batchesbalances[0].quantity - order_issuing.quantity <0){
                swal(
                    'Error',
                    'No Enough Quantity from this Store only'+$scope.batchesbalances[0].quantity+ ' remained',
                    'error'
                )
            }
            else{
            var storeBalance=($scope.batchesbalances[0].quantity - order_issuing.quantity);
            var PreviusBalance=$scope.batchesbalances[0].quantity;
            var issuing_order={'item_id':order.item_id,'quantity_issued':order_issuing.quantity,
                'received_from_id':order_issuing.selectedBatch.store_id,
                'invoice_refference':order_issuing.selectedBatch.invoice_id,
                'request_id':order.id,
                'identifier':$scope.batchesbalances[0].id,
                'issued_store_id':order.requesting_store_id,
                'vendor':$scope.batchesbalances[0].received_from_id,
                'expiry_date':$scope.batchesbalances[0].expiry_date,

                'store_name':order.requesting_store_name,
                'order_no':order.order_no,
                'requested_store_type_id':order.requested_store_type_id,
                'requesting_store_type_id':order.requesting_store_type_id,

                'store_balance':storeBalance,
                'PreviusBalance':PreviusBalance,
                'batch_no':order_issuing.selectedBatch.batch_no,
                'user_id':user_id,
                'transaction_type_id':order_issuing.transaction_type_id,'facility_id':facility_id};

           // console.log(issuing_order);
            $http.post('/api/Order_processing',issuing_order).then(function(data) {
                $scope.processed=data.data;
                $scope.main_store_incoming_order();
                $scope.Vieworders="";
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });
        }
        }



        $scope.Cancelorder=function () {

            $scope.Vieworders="";

        }


        // $scope.item_receiving_list();

        //  update
$scope.pharmacy_item_list_issue=function (issuing) {

    if(issuing.selectedItem.item_id==undefined){
        swal(
            'Error',
            'Choose Item First..',
            'error'
        )
    }
    else if($scope.batchesbalances.length<1){
        swal(
            'Error',
            'Choose Batch Number which has enough balance',
            'error'
        )
    }
    else if(issuing.quantity<0){
        swal(
            'Error',
            'Issuing Quantity Can not Be Negative value',
            'error'
        )
    }

    else if(issuing.transaction_type_id==undefined){
        swal(
            'Error',
            'Choose Issuing Type of This Transaction',
            'error'
        )
    }
    else if(issuing.selectedStore==undefined && issuing.transaction_type_id.adjustment=='plus'){
        swal(
            'Error',
            'Choose Issued Store',
            'error'
        )
    }
    else if($scope.batchesbalances.length<1){
        swal(
            'Error',
            'No Enough Quantity from this Store only',
            'info'
        )
    }
    else if($scope.batchesbalances[0].quantity - issuing.quantity <0){
        swal(
            'Error',
            'No Enough Quantity from this Store only'+$scope.batchesbalances[0].quantity+ ' remained',
            'error'
        )
    }



    else {

        for(var i=0;i<$scope.items_array_issue.length;i++){


            if($scope.items_array_issue[i].item_id == issuing.selectedItem.item_id){ swal(issuing.selectedItem.item_name+" already in your order list ","","info"); return;}
        }
        $('#btch').val('');
        $('#itm').val('');
        $('#itm1').val('');
        $('#itm2').val('');
    var issued_store_id = undefined;
    var store_type_id = undefined;
    var store_name = undefined;
    if (issuing.transaction_type_id.adjustment == 'plus'){
        issued_store_id = issuing.selectedStore.id;
        store_type_id = issuing.selectedStore.store_type_id;
        store_name = issuing.selectedStore.store_name;
    }
    var storeBalance=($scope.batchesbalances[0].quantity - issuing.quantity);
    var PreviusBalance=$scope.batchesbalances[0].quantity;
    console.log(issuing.selectedBatch.store_id);

    $scope.items_array_issue.push({'item_id':issuing.selectedItem.item_id,'quantity_issued':issuing.quantity,
        'item_name':issuing.selectedItem.item_name,
        'received_from_id':issuing.selectedBatch.store_id,
        'from':issuing.selectedBatch.store_name,
        'identifier':$scope.batchesbalances[0].id,
        'issued_store_id':issued_store_id,
        'store_type_id':store_type_id,
        'store_name':store_name,
        'invoice_no':issuing.selectedBatch.invoice_number,
        'internal_issuer_id':issuing.selectedBatch.store_id,
        'store_balance':storeBalance,
        'PreviusBalance':PreviusBalance,
        'invoice_number':issuing.selectedBatch.invoice_id,
        'vendor_id':issuing.selectedBatch.vendor_id,
        'expiry_date':issuing.selectedBatch.expiry_date,
        'user_id':user_id,
        'transaction_type_id':issuing.transaction_type_id.id,
        'adjustment':issuing.transaction_type_id.adjustment,
        'batch_no':issuing.selectedBatch.batch_no,'facility_id':facility_id});
}
}
$scope.pharmacy_item_issuing=function () {


    $http.post('/api/pharmacy_item_issuing',$scope.items_array_issue).then(function(data) {
        $scope.items_issued=data.data;
        var sending=data.data.msg;
        var statusee=data.data.status;
        $scope.items_array_issue=[];
        if(statusee==0){
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else{
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }
    });


}




        $scope.pharmacy_item_list_requisition=function (order) {

            if (order.selectedItem == undefined) {
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            } else if (order.selectedItem.item_id == undefined) {
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            }
            else if (order.selectedStoreRequestReceiver == undefined) {
                swal(
                    'Error',
                    'Choose Store Name you want To send this order request',
                    'error'
                )
            } else if (order.selectedStoreRequestSender == undefined) {
                swal(
                    'Error',
                    'Choose Store Name where order request is Coming from',
                    'error'
                )
            }
            else if ( order.quantity == undefined) {
                swal(
                    'Error',
                    'Enter Quantity you want to order',
                    'error'
                )
            }
            else if (order.selectedStoreRequestSender.id==order.selectedStoreRequestReceiver.id) {
                swal(
                    'Error',
                    'You can not Request item From similar Store',
                    'error'
                )
            }
            else if ( order.quantity<0) {
                swal(
                    'Error',
                    'Quantity Can not be a negative value .. Please enter a Possitive number',
                    'error'
                )
            }
            else{
                for(var i=0;i<$scope.items_array_requisitions.length;i++){


                    if(
                        $scope.items_array_requisitions[i].item_id == order.selectedItem.item_id &&
                        $scope.items_array_requisitions[i].request_receiver == order.selectedStoreRequestReceiver.id
                    )
                    { swal(order.selectedItem.item_name+" already in your order list  ","","info"); return;}
                }
                $('#btch').val('');
                $('#itm3').val('');
                $('#itm4').val('');

                $scope.items_array_requisitions.push({
                'item_id': order.selectedItem.item_id,
                'item_name': order.selectedItem.item_name,
                'quantity': order.quantity,
                'user_id':user_id,
                'facility_id':facility_id,
                'request_sender': order.selectedStoreRequestSender.id,
                'from': order.selectedStoreRequestSender.store_name,
                'request_receiver': order.selectedStoreRequestReceiver.id,
                'receiver_name': order.selectedStoreRequestReceiver.store_name,
                'store_name': order.selectedStoreRequestReceiver.store_name,
                'request_receiver_type': order.selectedStoreRequestReceiver.store_type_id,
                'request_sender_type': order.selectedStoreRequestSender.store_type_id,
            });
        }
        }

//main store ordering items from several stores
        $scope.main_store_item_ordering = function () {
               // console.log(orders);
                $http.post('/api/main_store_item_ordering',$scope.items_array_requisitions).then(function (data) {

                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    $scope.items_array_requisitions=[];
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }


                });
            }

        $scope.tracers=[];
        
        $scope.tracer_medicine=function (item) {

            $scope.tracers.push({'item_id':item.selectedItem.item_id,'item_name':item.selectedItem.item_name,status:item.status});

        }


        $scope.save_tracer_medicine = function(){


            $http.post('/api/save_tracer_medicine',$scope.tracers).then(function (data) {

                var sending = data.data.msg;
                var statusee = data.data.status;
                $scope.tracers=[];
                if (statusee == 0) {
                    swal(
                        'Info',
                        sending,
                        'info'
                    )
                }
                else {
                    swal(
                        'Response',
                        sending,
                        'success'
                    )
                }


            });

        }

        $scope.removeTracerItem = function(x){

            $scope.tracers.splice(x,1);

        }
        $scope.removeItemArray = function(x){

            $scope.items_array.splice(x,1);

            $scope.total_cost=TOTAL_COST($scope.items_array);
        }

        $scope.removeItemArray_issue = function(x){

            $scope.items_array_issue.splice(x,1);


        }
        $scope.removeItemArray_requisition = function(x){

            $scope.items_array_requisitions.splice(x,1);


        }

        
        






        // stores settting==========================================================================

        //searching user for assigning a store to dispens
        var user_store=[];
        $scope.SearchUser=function (seachKey) {

            var searchUser={'userKey':seachKey,'facility_id':facility_id};
            $http.post('/api/getUserToSetStoreToAccess',searchUser ).then(function(data) {
                user_store=data.data;

            });
            return user_store;
        }
        $scope.User_store_populate=[];
        var ckecks;

        $scope.populateInArray=function (selected_user_store) {


            var checking={'user_id':user_store[0].id,'store_id':selected_user_store.id};

            // $http.post('/api/store_user_checking',checking ).then(function(data) {
            //      ckecks=data.data.counti;
            //
            // });



            if(selected_user_store.value1==false){

            }
            else{
                $scope.User_store_populate.push({
                    'user_name':user_store[0].name,
                    'user_id':user_store[0].id,
                    'store_id':selected_user_store.id,
                    'store_name':selected_user_store.store_name,
                });



            }


        }



        $scope.store_user_configure=function () {




            if($scope.User_store_populate.length<1){
                swal(
                    'Error',
                    'Nothing to save',
                    'error'
                )
            }

            else {
                $http.post('/api/store_user_configure', $scope.User_store_populate).then(function (data) {
                    var msg=data.data.msg;
                    var status=data.data.status;
                    if(status==0){
                        swal(
                            'Feedback!',
                            msg,
                            'info'
                        )
                    }
                    else{
                        swal(
                            'Feedback!',
                            msg,
                            'success'
                        )
                    }


                    if(data){
                        $scope.User_store_populate=[];
                    }
                });
            }

        }








        $scope.removeItem = function(x){

            $scope.User_store_populate.splice(x,1);

        }

        //vendor_registration  CRUD



        $scope.vendor_registration=function (vendor) {
            if(vendor==undefined){
                swal(
                    'Error',
                    'Fill all required fields',
                    'error'
                )
            }
else{


            var vendor_data={'vendor_name':vendor.vendor_name,'facility_id':facility_id,
                'vendor_address':vendor.vendor_address,'vendor_phone_number':vendor.vendor_phone_number,
                'vendor_contact_person':vendor.vendor_contact_person};

            $http.post('/api/vendor_registration',vendor_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;

                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }


                $scope.vendor_list();

            });
        }
        }


        $scope.vendor_list=function () {

            $http.get('/api/vendor_list/'+facility_id).then(function(data) {
                $scope.vendors=data.data;

            });
        }

        $scope.vendor_list();

        //  update


        $scope.vendor_update=function (vendor) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/vendor_update', vendor).then(function (data) {
                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                    $scope.vendor_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.vendor_delete=function (vendor,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/vendor_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.vendor_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



        //invoices_registration  CRUD



        $scope.invoice_registration=function (invoice) {

            if(invoice==undefined){
                swal(
                    'Error',
                    'Fill all required fields',
                    'error'
                )
            }
            else{


            var invoice_data={'invoice_number':invoice.invoice_number,'vendor_id':invoice.vendor_id};
            console.log(invoice_data);
            $http.post('/api/invoice_registration',invoice_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                 
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }


                $scope.invoice_list();

            });
        }
        }


        $scope.invoice_list=function () {

            $http.get('/api/invoice_list/'+facility_id).then(function(data) {
                $scope.invoices=data.data;

            });
        }
        $scope.invoice_list();


        //  update


        $scope.invoice_update=function (invoice) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/invoice_update', invoice).then(function (data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                    $scope.invoice_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }



//  delete
        $scope.invoice_delete=function (invoice,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/invoice_delete/'+id).then(function(data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'warning'
                    )
                    $scope.invoice_list();

                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }




        //pharmacy_transaction_type_registration  CRUD



        $scope.pharmacy_transaction_type_registration=function (transtype) {

            var transtype_data={'transaction_type':transtype.transaction_type};
            console.log(transtype);
            $http.post('/api/pharmacy_transaction_type_registration',transtype).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }
                $scope.transtype_list();

            });
        }


        $scope.transtype_list=function () {

            $http.get('/api/pharmacy_transaction_type_list').then(function(data) {
                $scope.transtypes=data.data;

            });
        }

        $scope.transtype_list();
        
        $scope.store_type_list=function () {

            $http.get('/api/store_type_list').then(function(data) {
                $scope.storetypes=data.data;

            });
        }

        $scope.store_type_list();




        //stores_registration  CRUD



        $scope.store_registration=function (store) {
            if(store==undefined){
                swal(
                    'Error',
                    'Fill all required fields',
                    'error'
                )
            }
else{


            var store_data={'store_name':store.store_name,'store_type_id':store.store_type_id,'facility_id':facility_id};
            console.log(store_data);
            console.log(store);
            $http.post('/api/store_registration',store_data).then(function(data) {
                var sending=data.data.msg;
                var statusee=data.data.status;
                if(statusee==0){
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else{
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

                $scope.store_list();

            });
        }
        }
        $scope.store_update=function (store) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/store_update', store).then(function (data) {

                    var sending=data.data.msg;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.store_list();

                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }

        // stores settting==========================================================================

//amzing typeahead




        var _selected;





        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };


        $scope.sort = function(keyname){
            $scope.sortKey = keyname;   //set the sortKey to the param passed
            $scope.reverse = !$scope.reverse; //if true make it false and vice versa
        }

    }

})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-04-16.
 */
/**
 * Created by Jeph on 2017-03-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('PrescriptionController',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.prescriptions = object;
 
            var user_id = $rootScope.currentUser.id;
            var facility_id=$rootScope.currentUser.facility_id;



            $scope.date = new Date();

        }]);
})();

/**
 * Created by USER on 2017-03-13.
 */
/**
 * Created by USER on 2017-03-09.
 */

(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('SubStoreItemsController', SubStoreItemsController);

    function SubStoreItemsController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        //loading menu
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/' + user_id).then(function (data) {
            $scope.menu = data.data;
            ////// console.log($scope.menu);

        });

        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        
        $scope.sort = function(keyname){
            $scope.sortKey = keyname;   //set the sortKey to the param passed
            $scope.reverse = !$scope.reverse; //if true make it false and vice versa
        }
        var resdata = [];
        $scope.items_array_requisitions =[];
        $scope.items_array_issue =[];

        $scope.showSearch = function (searchKey) {
           
                $http.post('/api/searchItem', {searchKey: searchKey}).then(function (data) {
                    resdata = data.data;
                });
                return resdata;

        }
        //codes to display items in pharmacy stores...received items.
        $scope.showItem = function (searchKey) {


            $http.post('/api/searchItemsubstoreReceived', {searchKey: searchKey}).then(function (data) {
                resdata = data.data;
            });
            return resdata;

        }

        //loading item batches from function ShowItem above
        $scope.loadBatch = function (item_id) {

            $http.get('/api/batchsubstore_list/' + item_id + ',' + user_id).then(function (data) {
                $scope.batches = data.data;
                 console.log(data.data);

            });
        }


        
        $scope.batchesbalances = "";
        //loading item batches balance from function loadBatch above
        $scope.loadBatchBalance = function (batch_number, store_id) {
// console.log(batch_number, store_id)
            $http.get('/api/loadsubstoreBatchBalance/' + batch_number + ',' + store_id).then(function (data) {
                $scope.batchesbalances = data.data;
                console.log(data.data);

            });
           
        }
        


        $http.get('/api/pharmacy_transaction_type_list').then(function (data) {
            $scope.transtypes = data.data;

        });

        $http.get('/api/store_list/' + user_id).then(function (data) {
            $scope.stores = data.data;

        }); 
        
        $http.get('/api/Sub_stores_List/' + user_id).then(function (data) {
            $scope.Sub_stores = data.data;

        });
        
        $http.get('/api/Sub_main_stores_List/' + user_id).then(function (data) {
            $scope.Sub_Main_stores = data.data;

        }); 
        
        $http.get('/api/Sub_dispensing_stores_List/' + user_id).then(function (data) {
            $scope.Sub_dispensing_stores = data.data;

        });


        //vendor_registration  CRUD


        $scope.substore_item_receiving_list = function () {

            $http.get('/api/substore_item_receiving_list/' + facility_id + ',' + user_id).then(function (data) {
                if(data.data.length >0){
                    $scope.items = data.data;   
                }
                else{
                    swal(
                        'Info',
                        'Nothing in stores',
                        'info'
                    )  
                }
               

            });
        }


        //pharmacy sub store _report types

        $scope.reports=[{'id':1,'balance':"Store Balance"},{'id':2,'balance':"Detailed Report"}];

        $scope.pharmacy_report=function (report_type) {
            $http.get('/api/item_balances_list_in_substore/' + facility_id + ',' + user_id + ',' + report_type).then(function (data) {
                if (data.data.length > 0) {
                    $scope.items = data.data;
                }


            });
        }
        // $scope.item_receiving_list();

        $scope.Substore_item_list_issue=function (issuing) {
console.log(issuing);
            if(issuing.selectedItem.item_id==undefined){
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            }
            else if($scope.batchesbalances.length<1){
                swal(
                    'Error',
                    'Choose Batch Number which has enough balance',
                    'error'
                )
            }
            else if(issuing.quantity<0){
                swal(
                    'Error',
                    'Issuing Quantity Can not Be Negative value',
                    'error'
                )
            }

            else if(issuing.transaction_type_id==undefined){
                swal(
                    'Error',
                    'Choose Issuing Type of This Transaction',
                    'error'
                )
            }
            else if(issuing.selectedStore==undefined && issuing.transaction_type_id.adjustment=='plus'){
                swal(
                    'Error',
                    'Choose Issued Store',
                    'error'
                )
            }
            else if($scope.batchesbalances.length<1){
                swal(
                    'Error',
                    'No Enough Quantity from this Store only',
                    'info'
                )
            }
            else if($scope.batchesbalances[0].quantity - issuing.quantity <0){
                swal(
                    'Error',
                    'No Enough Quantity from this Store only'+$scope.batchesbalances[0].quantity+ ' remained',
                    'error'
                )
            }



            else {

                for(var i=0;i<$scope.items_array_issue.length;i++){


                    if($scope.items_array_issue[i].item_id == issuing.selectedItem.item_id){ swal(issuing.selectedItem.item_name+" already in your order list ","","info"); return;}
                }
                $('#btch').val('');
                $('#itm').val('');
                $('#itm1').val('');
                $('#itm2').val('');
                var issued_store_id = '';
                var store_type_id = '';
                var store_name = '';
                if (issuing.transaction_type_id.adjustment == 'plus'){
                    issued_store_id = issuing.selectedStore.id;
                    store_type_id = issuing.selectedStore.store_type_id;
                    store_name = issuing.selectedStore.store_name;
                }
                var storeBalance=($scope.batchesbalances[0].quantity - issuing.quantity);
                var PreviusBalance=$scope.batchesbalances[0].quantity;
                console.log(issuing.selectedBatch.store_id);

                $scope.items_array_issue.push({
                    'item_name':issuing.selectedItem.item_name,
                    'from':issuing.selectedBatch.store_name,
                    'item_id': issuing.selectedItem.item_id,
                    'quantity_issued': issuing.quantity,
                    'identifier':$scope.batchesbalances[0].id,
                    'received_from_id':issuing.selectedBatch.store_id,
                    'store_sender_id': $scope.batchesbalances[0].store_id,
                    'store_receiver_id': issued_store_id,
                    'issued_store_id': issued_store_id,
                    'store_type_id': store_type_id,
                    'store_name': store_name,
                    'internal_issuer_id': $scope.batchesbalances[0].store_id,
                    'store_balance': storeBalance,
                    'PreviusBalance': PreviusBalance,
                    'invoice_number': $scope.batchesbalances[0].invoice_id,
                    'vendor_id': issuing.selectedBatch.vendor_id,
                    'expiry_date': $scope.batchesbalances[0].expiry_date,
                    'user_id': user_id,
                    'transaction_type_id': issuing.transaction_type_id.id,
                    'adjustment':issuing.transaction_type_id.adjustment,
                    'batch_no': $scope.batchesbalances[0].batch_no,
                    'facility_id': facility_id});

            }

        }


        $scope.removeItemArray_issue = function(x){

            $scope.items_array_issue.splice(x,1);


        }

        $scope.substore_item_issuing = function () {

                $http.post('/api/substore_item_issuing',$scope.items_array_issue).then(function (data) {
                    $scope.items_issued = data.data;
                    $scope.items_array_issue=[];
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                   // $scope.items_array_issue=[];
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }
                });
                $scope.batchesbalances = "";
            }





        $scope.SubStore_item_list_requisition=function (order) {

            if (order.selectedItem == undefined) {
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            } else if (order.selectedItem.item_id == undefined) {
                swal(
                    'Error',
                    'Choose Item First..',
                    'error'
                )
            }
            else if (order.selectedStoreRequestReceiver == undefined) {
                swal(
                    'Error',
                    'Choose Store Name you want To send this order request',
                    'error'
                )
            } else if (order.selectedStoreRequestSender == undefined) {
                swal(
                    'Error',
                    'Choose Store Name where order request is Coming from',
                    'error'
                )
            }
            else if ( order.quantity == undefined) {
                swal(
                    'Error',
                    'Enter Quantity you want to order',
                    'error'
                )
            }
            else if (order.selectedStoreRequestSender.id==order.selectedStoreRequestReceiver.id) {
                swal(
                    'Error',
                    'You can not Request item From similar Store',
                    'error'
                )
            }
            else if ( order.quantity<0) {
                swal(
                    'Error',
                    'Quantity Can not be a negative value .. Please enter a Possitive number',
                    'error'
                )
            }
            else{
                for(var i=0;i<$scope.items_array_requisitions.length;i++){


                    if(
                        $scope.items_array_requisitions[i].item_id == order.selectedItem.item_id &&
                        $scope.items_array_requisitions[i].request_receiver == order.selectedStoreRequestReceiver.id
                    )
                    { swal(order.selectedItem.item_name+" already in your order list ","","info"); return;}
                }
                $('#btch').val('');
                $('#itm').val('');
                $('#itm1').val('');

                $scope.items_array_requisitions.push({
                    'item_id': order.selectedItem.item_id,
                    'item_name': order.selectedItem.item_name,
                    'quantity': order.quantity,
                    'user_id':user_id,
                    'facility_id':facility_id,
                    'request_sender': order.selectedStoreRequestSender.id,
                    'from': order.selectedStoreRequestSender.store_name,
                    'request_receiver': order.selectedStoreRequestReceiver.id,
                    'receiver_name': order.selectedStoreRequestReceiver.store_name,
                    'store_name': order.selectedStoreRequestReceiver.store_name,
                    'request_receiver_type': order.selectedStoreRequestReceiver.store_type_id,
                    'request_sender_type': order.selectedStoreRequestSender.store_type_id,
                });
            }
        }

        $scope.removeItemArray = function(x){

            $scope.items_array_requisitions.splice(x,1);
        }


//sub store ordering items from several stores
        $scope.substore_item_ordering = function () {
            $http.post('/api/substore_item_ordering',$scope.items_array_requisitions).then(function (data) {
                $scope.items_array_requisitions=[];
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }
                   });
    }

//item order processsing codes


        $scope.sub_store_incoming_order=function () {

            $http.get('/api/sub_store_incoming_order/'+facility_id+','+user_id).then(function(data) {
                $scope.item_orders=data.data;

            });
        }
        $scope.sub_store_incoming_order();


        //codes to display order and item specifically for processing
        $scope.Vieworder=function (orderview) {

   console.log(orderview)

            //codes to display selected item order batch list
            var item_id=orderview.item_id;

            $scope.Vieworders=orderview;
            $http.get('/api/batchsubstore_list/'+item_id+','+user_id).then(function(data) {
                $scope.batches=data.data;
                console.log(data.data)
            });
        }





        //codes for issuing or processing selected order

        $scope.order_issuing=function (order_issuing,order) {
            // console.log(order_issuing,order)

            if($scope.batchesbalances[0].quantity==undefined){
                swal(
                    'Error',
                    'Choose Batch Number',
                    'error'
                )
            }
            else if(order_issuing.quantity<0){
                swal(
                    'Error',
                    'Issuing Quantity Can not Be Negative value',
                    'error'
                )
            }
            else if(order.item_id==undefined){
                swal(
                    'Error',
                    'Choose Issued Store',
                    'error'
                )
            }
            else if(order_issuing.transaction_type_id==undefined){
                swal(
                    'Error',
                    'Choose Issuing Type of This Transaction',
                    'error'
                )
            }
            else if($scope.batchesbalances[0].quantity - order_issuing.quantity <0){
                swal(
                    'Error',
                    'No Enough Quantity from this Store only'+$scope.batchesbalances[0].quantity+ ' remained',
                    'error'
                )
            }
            else{
                var storeBalance=($scope.batchesbalances[0].quantity - order_issuing.quantity);
                var PreviusBalance=$scope.batchesbalances[0].quantity;
                var issuing_order={'item_id':order.item_id,'quantity_issued':order_issuing.quantity,
                    'received_from_id':$scope.batchesbalances[0].received_from_id,
                    'request_id':order.id,
                    'issued_store_id':order.requested_store_id,
                    'identifier':$scope.batchesbalances[0].id,
                    'store_name':order.requesting_store_name,
                    'order_no':order.order_no,
                    'requested_store_type_id':order.requested_store_type_id,
                    'requesting_store_type_id':order.requesting_store_type_id,
                    'store_balance':storeBalance,
                    'PreviusBalance':PreviusBalance,
                    'batch_no':$scope.batchesbalances[0].batch_no,
                    'user_id':user_id,
                    'transaction_type_id':order_issuing.transaction_type_id,'facility_id':facility_id};
                // console.log( $scope.batchesbalances);
                  console.log(issuing_order);
                $http.post('/api/sub_store_Order_processing',issuing_order).then(function(data) {
                    $scope.processed=data.data;
                    $scope.sub_store_incoming_order();
                    $scope.Vieworders="";
                    var sending=data.data.msg;
                    var statusee=data.data.status;
                    if(statusee==0){
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else{
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }
        }



        $scope.Cancelorder=function () {

            $scope.Vieworders="";

        }
        var _selected;





        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };


    }

})();
/**
 * Created by USER on 2017-03-08.
 */


/**
 * Created by USER on 2017-03-27.
 */
/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('Anti_natalController', Anti_natalController);

    function Anti_natalController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });

        var occupation=[];
        var resdata =[];
        var resdata1 =[];

        $scope.showSearchOccupation= function (searchKey) {

            $http.get('/api/getOccupation/'+searchKey).then(function(data) {
                occupation=data.data;

            });
            return occupation;
        }


        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/' + searchKey).then(function (data) {
                resdata = data.data;
            });


return resdata;
        }

        $scope.ClinicQueue=function () {
            $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                $scope.resdatas = data.data[1];
            });
        }
        $scope.ClinicQueue();
        $http.get('/api/facility_list').then(function (data) {
            $scope.facility = data.data;
        });

        $scope.showSearch = function(searchKey) {


                $http.post('/api/searchRchpatient',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;

                });


                return resdata;

            
        }
        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

        $scope.department_list();
        $scope.SearchStds = function(searchKey) {

                $http.post('/api/SearchStds',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;

                });


                return resdata;


        }
        $scope.LNMP = function(client) {

            $http.get('/api/calculateWeek/' + client).then(function (data) {
                $scope.lnmp = data.data;
                console.log( $scope.lnmp);
            });


        }

 $scope.anti_natal_registration = function(patient) {

if(patient==undefined){
    swal(
        'Error',
        'Please Fill All required Fields',
        'error'
    )
}
   else  if(patient.first_name==undefined){
    swal(
        'Error',
        'Please Fill First name',
        'error'
    )
}
     else if(patient.residence_id==undefined){
    swal(
        'Error',
        'Please Fill Residence',
        'error'
    )
}
   else   if(patient.occupation==undefined){
    swal(
        'Error',
        'Please Fill Occupation',
        'error'
    )
}


   else  if(patient.partner_name==undefined){
    swal(
        'Error',
        'Please Fill Partner Name',
        'error'
    )
}
else  if(patient.occupation1==undefined){
    swal(
        'Error',
        'Please Fill Partner Occupation',
        'error'
    )
}
     else{


     var details={
         facility_id:facility_id,user_id:user_id,
         first_name:patient.first_name,
         middle_name:patient.middle_name,
         last_name:patient.last_name,
         gender:'Female',
         dob:patient.dob,
         dob1:patient.dob1,
         height:patient.height,
         voucher_no:patient.voucher_no,
         education1:patient.education1,
         education:patient.education,
         mobile_number:patient.mobile_number,
         partner_name:patient.partner_name,
         occupation_id:patient.occupation.id,
         occupation_id1:patient.occupation1.id,
         residence_id:patient.residence_id.residence_id,

     };
     $http.post('/api/anti_natal_registration',details).then(function(data) {
         $scope.detail = data.data;


         var sending = data.data.data;
         var statusee = data.data.status;
         if (statusee == 0) {
             swal(
                 'Error',
                 sending,
                 'error'
             )
         }
         else {
             swal(
                 'Feedback..',
                 sending,
                 'success'
             )
         }

     });

        }
        }



        $scope.vaccination_list=function () {
            $http.get('/api/vaccination_list').then(function (data) {
                $scope.vaccinations = data.data;

            });
        }

        $scope.vaccination_list();

$scope.vaccination_registration=function (vaccine) {

    $http.post('/api/vaccination_registration',vaccine).then(function(data) {
       $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }
        $scope.vaccination_list();
    });
}




        $scope.prev_preg_info_registration=function (preg_info,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(preg_info.number_of_pregnancy==undefined){
    swal(
        'Error',
        'Please Enter Number of pregnancy',
        'error'
    )
}else if(preg_info.number_of_delivery==undefined){
    swal(
        'Error',
        'Please Enter Number of delivery',
        'error'
    )
}else if(preg_info.number_alive_children==undefined){
    swal(
        'Error',
        'Please Enter Number of alive children',
        'error'
    )
}else if(preg_info.number_of_miscarriage==undefined){
    swal(
        'Error',
        'Please Enter Number of Miscarriage',
        'error'
    )
}else if(preg_info.year==undefined){
    swal(
        'Error',
        'Please Enter year of events above',
        'error'
    )
}
else if(preg_info.lnmp==undefined){
    swal(
        'Error',
        'Please Enter LNMP',
        'error'
    )
}else if(preg_info.edd==undefined){
    swal(
        'Error',
        'Please Enter EDD',
        'error'
    )
}
else if(preg_info.delivery_place==undefined){
    swal(
        'Error',
        'Please Enter Suggested Place of Delivery',
        'error'
    )
}
            else{

    var pregnancy_info={
        'number_of_pregnancy':preg_info.number_of_pregnancy,
        'number_of_delivery':preg_info.number_of_delivery,
        'number_alive_children':preg_info.number_alive_children,
        'number_of_miscarriage':preg_info.number_of_miscarriage,
        'edd':preg_info.edd,
        'lnmp':preg_info.lnmp,
        'year':preg_info.year,
        'delivery_place':preg_info.delivery_place.id,
        'client_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(pregnancy_info);
    $http.post('/api/prev_preg_info_registration',pregnancy_info).then(function(data) {
        $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }

    });
}

}

        $scope.prev_preg_info_indicator=function (prev_preg_indicator,selectedPatient) {

if(prev_preg_indicator==undefined){
    swal(
        'Error',
        'Please Fill all fields',
        'error'
    )
} else if(prev_preg_indicator.fp_35_years_n_above==undefined){
    swal(
        'Error',
        'Mimba ya kwanza Zaidi ya miaka 35?',
        'error'
    )
}else if(prev_preg_indicator.lp_10_years_n_above==undefined){
    swal(
        'Error',
        'Mimba ya mwisho Zaidi ya miaka 10?',
        'error'
    )
} else if(prev_preg_indicator.delivery_method==undefined){
    swal(
        'Error',
        'Alijifungua Je?',
        'error'
    )
}else if(prev_preg_indicator.fbs_msb==undefined){
    swal(
        'Error',
        'Kuzaa mtoto Mfu au Kifo cha mtoto mchanga?',
        'error'
    )
}
else if(prev_preg_indicator.miscarriage_three_plus==undefined){
    swal(
        'Error',
        'Kuharibika kwa mimba tatu au zaidi?',
        'error'
    )
}
else if(prev_preg_indicator.heart_disease==undefined){
    swal(
        'Error',
        'Ana Ugonjwa wa Moyo?',
        'error'
    )
}
else if(prev_preg_indicator.diabetic==undefined){
    swal(
        'Error',
        'Alishawahi kuugua Kisukari?',
        'error'
    )
}else if(prev_preg_indicator.tb==undefined){
    swal(
        'Error',
        'Alishawahi kuugua Kifua Kikuu?',
        'error'
    )
}
else if(prev_preg_indicator.waist_disability==undefined){
    swal(
        'Error',
        'Anaulemavu wa Nyonga?',
        'error'
    )
}else if(prev_preg_indicator.high_bleeding==undefined){
    swal(
        'Error',
        'Kutoka Damu Nyingi wakati wa kujifungua?',
        'error'
    )
}
   else if(prev_preg_indicator.placenta_stacked==undefined){
    swal(
        'Error',
        ' Kondo la Nyuma Kukwama?',
        'error'
    )
}
            else{

    var pregnancy_indicator={

        'fp_35_years_n_above':prev_preg_indicator.fp_35_years_n_above,
        'lp_10_years_n_above':prev_preg_indicator.lp_10_years_n_above,
        'delivery_method':prev_preg_indicator.delivery_method,
        'high_bleeding':prev_preg_indicator.high_bleeding,
        'fbs_msb':prev_preg_indicator.fbs_msb,
        'miscarriage_three_plus':prev_preg_indicator.miscarriage_three_plus,
        'heart_disease':prev_preg_indicator.heart_disease,
        'diabetic':prev_preg_indicator.diabetic,
        'tb':prev_preg_indicator.tb,
        'waist_disability':prev_preg_indicator.waist_disability,
        'placenta_stacked':prev_preg_indicator.placenta_stacked,
        'client_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(pregnancy_indicator);
    $http.post('/api/pregnancy_indicator',pregnancy_indicator).then(function(data) {
        $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }

    });
}

}

        $scope.anti_natal_lab_results=function (lab_result,selectedPatient) {

if(lab_result==undefined){
    swal(
        'Error',
        'Please Fill all Fields',
        'error'
    )
} else if(lab_result.blood_group==undefined){
    swal(
        'Error',
        'Please Enter Blood Group',
        'error'
    )
} else if(lab_result.rh==undefined){
    swal(
        'Error',
        'Please Enter Rhesus',
        'error'
    )
}
else if(lab_result.vdrl_rpr==undefined){
    swal(
        'Error',
        'Please Enter vdrl/rpr',
        'error'
    )
}
else if(lab_result.pmtct==undefined){
    swal(
        'Error',
        'Please Enter PMTCT Status',
        'error'
    )
}
else if(lab_result.mrdt_bs==undefined){
    swal(
        'Error',
        'Please Choose MRDT or BS',
        'error'
    )
}else if(lab_result.result==undefined){
    swal(
        'Error',
        'Please Enter Results for  '+lab_result.mrdt_bs,
        'error'
    )
}

            else{

    var lab_results={
        'blood_group':lab_result.blood_group,
        'rh':lab_result.rh,
        'vdrl_rpr':lab_result.vdrl_rpr,
        'pmtct':lab_result.pmtct,
        'mrdt_bs':lab_result.mrdt_bs,
        'result':lab_result.result,
        'other_test':lab_result.other_test,
        'client_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(lab_results);
    $http.post('/api/anti_natal_lab_results',lab_results).then(function(data) {
        $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.lab_result == null;
    });
}

}
        $scope.partner_lab_results=function (lab_result,selectedPatient) {

if(lab_result==undefined){
    swal(
        'Error',
        'Please Fill all Fields',
        'error'
    )
} else if(lab_result.blood_group==undefined){
    swal(
        'Error',
        'Please Enter Blood Group',
        'error'
    )
} else if(lab_result.rh==undefined){
    swal(
        'Error',
        'Please Enter Rhesus',
        'error'
    )
}
else if(lab_result.vdrl_rpr==undefined){
    swal(
        'Error',
        'Please Enter vdrl/rpr',
        'error'
    )
}
else if(lab_result.pmtct==undefined){
    swal(
        'Error',
        'Please Enter PMTCT Status',
        'error'
    )
}


            else{

    var lab_results={
        'blood_group':lab_result.blood_group,
        'rh':lab_result.rh,
        'vdrl_rpr':lab_result.vdrl_rpr,
        'pmtct':lab_result.pmtct,
        'other_test':lab_result.other_test,
        'client_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(lab_results);
    $http.post('/api/partner_lab_results',lab_results).then(function(data) {
        $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.p_lab_result == null;
    });
}

}
        $scope.reattendance_registration=function (reattend,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(reattend==undefined){
    swal(
        'Error',
        'Please Fill Fields required',
        'error'
    )
}
else if(reattend.hb==undefined){
    swal(
        'Error',
        'Please Fill for HB',
        'error'
    )
}
else if(reattend.bp==undefined){
    swal(
        'Error',
        'Please Fill for BP',
        'error'
    )
}
else if(reattend.urine_albumin==undefined){
    swal(
        'Error',
        'Jaza Albumin Kwenye Mkojo',
        'error'
    )
}
else if(reattend.urine_sugar==undefined){
    swal(
        'Error',
        'Jaza Sukari Kwenye Mkojo',
        'error'
    )
}else if(reattend.oedema==undefined){
    swal(
        'Error',
        'Jaza Kuvimba Miguu/Uso/Mikono',
        'error'
    )
}else if(reattend.followup_date==undefined){
    swal(
        'Error',
        'Jaza Tarehe ya Kurudi',
        'error'
    )
}


            else{

    var reattendance={
        'weight':reattend.weight,
        'hb':reattend.hb,
        'bp':reattend.bp,
        'urine_albumin':reattend.urine_albumin,
        'urine_sugar':reattend.urine_sugar,
        'pregnancy_height':reattend.pregnancy_height,
        'baby_position':reattend.baby_position,
        'baby_pointer':reattend.baby_pointer,
        'baby_play':reattend.baby_play,
        'baby_heart_beat':reattend.baby_heart_beat,
        'twins':reattend.twins,
        'oedema':reattend.oedema,
        'followup_date':reattend.followup_date,

        'client_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(reattendance);
    $http.post('/api/reattendance_registration',reattendance).then(function(data) {
        $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.investigation = null;
    });
}

}

        $scope.pmtct_registration=function (pmtct,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(pmtct.vvu_infection==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU Infection  ',
        'error'
    )
}
else if(pmtct.has_counsel_given==undefined){
    swal(
        'Error',
        'Please Fill Column for  Counselling Given  ',
        'error'
    )
}

else if(pmtct.has_taken_vvu_test==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU test Taken ',
        'error'
    )
}

else if(pmtct.vvu_first_test_result==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU First Test Result ',
        'error'
    )
}
else if(pmtct.counselling_after_vvu_test==undefined){
    swal(
        'Error',
        'Please Fill Column for Counselling After VVU Test ',
        'error'
    )
}
else if(pmtct.vvu_second_test_result==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU Second Test Result ',
        'error'
    )
}
else if(pmtct.baby_feeding_counsel_given==undefined){
    swal(
        'Error',
        'Please Fill Column for Baby Feeding Counselling ',
        'error'
    )
}


            else{

    var pmtcts={


        'vvu_infection':pmtct.vvu_infection,
        'has_counsel_given':pmtct.has_counsel_given,
        'counselling_date':pmtct.counselling_date,
        'has_taken_vvu_test':pmtct.has_taken_vvu_test,
        'date_of_test_taken':pmtct.date_of_test_taken,
        'vvu_first_test_result':pmtct.vvu_first_test_result,
        'counselling_after_vvu_test':pmtct.counselling_after_vvu_test,
        'vvu_second_test_result':pmtct.vvu_second_test_result,
        'baby_feeding_counsel_given':pmtct.baby_feeding_counsel_given,

        'patient_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
     
    $http.post('/api/pmtct_registration',pmtcts).then(function(data) {
        $scope.pmtct = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.pmtct = null;
    });
}

}

        $scope.pmtct_partner_registration=function (pmtct,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(pmtct.vvu_infection==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU Infection  ',
        'error'
    )
}
else if(pmtct.has_counsel_given==undefined){
    swal(
        'Error',
        'Please Fill Column for  Counselling Given  ',
        'error'
    )
}

else if(pmtct.has_taken_vvu_test==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU test Taken ',
        'error'
    )
}

else if(pmtct.vvu_first_test_result==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU First Test Result ',
        'error'
    )
}
else if(pmtct.counselling_after_vvu_test==undefined){
    swal(
        'Error',
        'Please Fill Column for Counselling After VVU Test ',
        'error'
    )
}
else if(pmtct.vvu_second_test_result==undefined){
    swal(
        'Error',
        'Please Fill Column for VVU Second Test Result ',
        'error'
    )
}



            else{

    var pmtcts={


        'vvu_infection':pmtct.vvu_infection,
        'has_counsel_given':pmtct.has_counsel_given,
        'counselling_date':pmtct.counselling_date,
        'has_taken_vvu_test':pmtct.has_taken_vvu_test,
        'date_of_test_taken':pmtct.date_of_test_taken,
        'vvu_first_test_result':pmtct.vvu_first_test_result,
        'counselling_after_vvu_test':pmtct.counselling_after_vvu_test,
        'vvu_second_test_result':pmtct.vvu_second_test_result,


        'patient_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};

    $http.post('/api/pmtct_partner_registration',pmtcts).then(function(data) {
        $scope.pmtct = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.pmtct = null;
    });
}

}
        $scope.preventives_registration=function (malaria,selectedPatient) {

if(malaria==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(malaria.ferrous_sulphate==undefined){
    swal(
        'Error',
        'Please Fill Column for ferrous sulphate  ',
        'error'
    )
}else if(malaria.folic_acid==undefined){
    swal(
        'Error',
        'Please Fill Column for folic acid  ',
        'error'
    )
}else if(malaria.deworm==undefined){
    swal(
        'Error',
        '  Amepewa Dawa ya Minyoo ?',
        'error'
    )
}else if(malaria.malaria==undefined){
    swal(
        'Error',
        '  Amepewa dawa ya kujikinga na Malaria ?',
        'error'
    )
}


            else{

    var preventives={


        'ferrous_sulphate':malaria.ferrous_sulphate,
        'folic_acid':malaria.folic_acid,
        'malaria':malaria.malaria,
        'deworm':malaria.deworm,

        'client_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(preventives);

    $http.post('/api/preventives_registration',preventives).then(function(data) {
        $scope.prevents = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.malaria = null;
    });
}

}
        $scope.ipt_registration=function (ipt,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(ipt.ipt==undefined){
    swal(
        'Error',
        'Please Choose IPT Number first',
        'error'
    )
}else if(ipt.ipt_date==undefined){
    swal(
        'Error',
        'Please Enter Date for   '+ipt.ipt,
        'error'
    )
}
            else{

    var ipts={


        'ipt':ipt.ipt,
        'ipt_date':ipt.ipt_date,

        'patient_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(ipts);

    $http.post('/api/ipt_registration',ipts).then(function(data) {
        $scope.pmtct = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
        }
        $scope.ipt = null;
    });
}

}
        $scope.counselling_area_registration=function (councel) {

if(councel==undefined){
    swal(
        'Error',
        'Please Fill Column shown',
        'error'
    )
}
            else{




    $http.post('/api/counselling_area_registration',councel).then(function(data) {
        $scope.counsellings = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            );

        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            );
            $scope.counseling_aresa();
        }

    });
}

}

        $scope.counseling_aresa=function () {
            $http.get('/api/councelling_lists').then(function(data) {
                $scope.counselings = data.data;
            });
        }



        $scope.counseling_aresa();

$scope.counseling_givens=[];
        $scope.Add_counsel=function (data,patient) {
            if(data ==undefined){
                swal(
                    'Error',
                    'Choose Description you want',
                    'error'
                )
            }
           else if(data.description_id ==undefined){
                swal(
                    'Error',
                    'Choose Description you want',
                    'error'
                )
            } else if(data.description_id.id ==undefined){
                swal(
                    'Error',
                    'Choose Description you want',
                    'error'
                )
            }
           else  if(data.status ==undefined){
                swal(
                    'Error',
                    'Choose Description Status',
                    'error'
                )
            }
            else{



            $scope.counseling_givens.push({'facility_id':facility_id,'user_id':user_id,'description':data.description_id.description,'description_id':data.description_id.id,'client_id':patient,'status':data.status});
        }
        }

        $scope.counselling_registration=function () {
            $http.post('/api/counselling_registration',$scope.counseling_givens).then(function(data) {
                $scope.send = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }
                $scope.counseling_givens=[];
            });
        }

        $scope.removeIT=function (id) {
            $scope.counseling_givens.slice(id,1);
        }


        $scope.tt_vaccination_registration=function (tt_vaccine,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(tt_vaccine.vaccination_date==undefined){
    swal(
        'Error',
        'Please Enter Date for '+tt_vaccine.vaccination_id.vaccination_name,
        'error'
    )
}else if(tt_vaccine.has_card==undefined){
    swal(
        'Error',
        'Please choose option if Client has card or not ',
        'error'
    )
}
            else{

    var tt_vaccination={'vaccination_id':tt_vaccine.vaccination_id.id,'has_card':tt_vaccine.has_card,
        'vaccination_date':tt_vaccine.vaccination_date,'patient_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(tt_vaccination);
    $http.post('/api/tt_vaccination_registration',tt_vaccination).then(function(data) {
        $scope.vaccines = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }

    });
}

}
        $scope.std_registration=function (std,selectedPatient) {

if(selectedPatient==undefined){
    swal(
        'Error',
        'Please choose Client First',
        'error'
    )
} else if(std.std_id==undefined){
    swal(
        'Error',
        'Please Select STDs Diagnosis First  ',
        'error'
    )
}
else if(std.std_id.id==undefined){
    swal(
        'Error',
        'Select STDs Diagnosis First',
        'error'
    )
}else if(std.result==undefined){
    swal(
        'Error',
        'Please choose option for Status about '+std.std_id.description,
        'error'
    )
}else if(std.treated==undefined){
    swal(
        'Error',
        'Please choose option for treatment about '+std.std_id.description+' selected',
        'error'
    )
}
            else{

    var stds={'std_id':std.std_id.id,
        'result':std.result,
        'treated':std.treated,
        'p_result':std.p_result,
        'p_treated':std.p_treated,
        'patient_id':selectedPatient,'facility_id':facility_id,
        'user_id':user_id};
    console.log(stds);
    $http.post('/api/std_registration',stds).then(function(data) {
        $scope.stds = data.data;
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }

    });
}

}

        $scope.institution_list=function () {

            $http.get('/api/institution_list').then(function (data) {

                $scope.institutes=data.data;
            });

        }
        $scope.institution_list();

$scope.vaccination_update=function (vaccine) {

    $http.post('/api/vaccination_update',vaccine).then(function(data) {
       $scope.vaccines = data.data;
        $scope.vaccination_list();
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }

    });
}

        $scope.child_referral_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill All fields  ',
                    'error'
                )
            }
            else if(ref.referral_id==undefined) {
                swal(
                    'Error',
                    'Select Clinic for referring',
                    'error'
                )
            }
            else if(ref.reason==undefined){
                swal(
                    'Error',
                    'Please Enter Reasons for  Referral ',
                    'error'
                )
            }
            else{

                var refs={'transfered_institution_id':ref.referral_id,
                    'reason':ref.reason,mother_id:1,
                    'patient_id':selectedPatient,
                    'patient_id_table':client,
                    'sender_clinic_id':18,
                    'facility_id':facility_id,
                    'user_id':user_id};


                $http.post('/api/child_referral_registration',refs).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }





        $scope.vaccination_update=function (vaccine) {

    $http.post('/api/vaccination_update',vaccine).then(function(data) {
       $scope.vaccines = data.data;
        $scope.vaccination_list();
        var sending = data.data.msg;
        var statusee = data.data.status;
        if (statusee == 0) {
            swal(
                'Error',
                sending,
                'error'
            )
        }
        else {
            swal(
                'Feedback..',
                sending,
                'success'
            )
        }

    });
}


        $scope.RCH_recommendations_registration = function(opt,patient) {
            if(opt==undefined){
                swal(
                    'Error',
                    'Write Recommendations first',
                    'error'
                )
            }
            else{


                var opts = {
                    opinion: opt.opinion,
                    opinion_type:2, facility_id:facility_id,patient_id:patient,user_id:user_id
                };

                $http.post('/api/RCH_recommendations_registration', opts).then(function (data) {
                    $scope.opinions = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )


                    }

                });
            }
        }


        $scope.Anti_natal_in_referral=function (selectedPatient) {

            $http.post('/api/Anti_incoming_referral', selectedPatient).then(function (data) {


$scope.selectedPatient=data.data;


            });
            $scope.ClinicQueue();
        }

    }

})();
/**
 * Created by USER on 2017-03-08.
 */


/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('Child_Controller', Child_Controller);

    function Child_Controller($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });
        $scope.ClinicQueue=function () {
            $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                $scope.resdatas = data.data[2];


            });
        }
        $scope.ClinicQueue();

        $scope.Anti_natal_in_referral=function (selectedPatient) {

            $http.post('/api/Child_incoming_referral', selectedPatient).then(function (data) {


                $scope.selectedPatient=data.data;


            });
            $scope.ClinicQueue();
        }

        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

        $scope.department_list();
        var resdata =[];

        $scope.showSearch = function(searchKey) {


            $http.post('/api/searchRchAllChild',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;

            });


            return resdata;


        }

        $http.get('/api/facility_list').then(function (data) {
            $scope.facility = data.data;
        });

        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/' + searchKey).then(function (data) {
                resdata = data.data;
            });


            return resdata;
        }


        $scope.child_serial_no = function(patient) {

            $http.post('/api/Child_serial_no',{facility_id:facility_id,patient_id:patient,user_id:user_id}).then(function(data) {
                $scope.serial_no = data.data;

            });


        }

        $scope.institution_list=function () {

            $http.get('/api/institution_list').then(function (data) {

                $scope.institutes=data.data;
            });

        }
        $scope.institution_list();

        $scope.vaccination_list=function () {
            $http.get('/api/vaccination_list').then(function (data) {
                $scope.vaccinations = data.data;

            });
        }

        $scope.vaccination_list();

        $scope.child_registration = function(reg,patient_id) {
            if(reg==undefined){
                swal(
                    'Error',
                    'Please Fill all fields',
                    'error'
                );
            }
            else if(reg.first_name==undefined){
                swal(
                    'Error',
                    'Please Enter First Name',
                    'error'
                );
            }
        else if(reg.last_name==undefined){
                swal(
                    'Error',
                    'Please Enter Last Name',
                    'error'
                );
            }

            else if(reg.gender==undefined){
                swal(
                    'Error',
                    'Please Enter Gender',
                    'error'
                );
            }
            else if(reg.dob==undefined){
                swal(
                    'Error',
                    'Please Enter Date of Birth',
                    'error'
                );
            }
            else if(reg.weight==undefined){
                swal(
                    'Error',
                    'Please Enter Child Body Weight',
                    'error'
                );
            }
            else if(reg.delivery_place==undefined){
                swal(
                    'Error',
                    'Please Enter Delivery Place',
                    'error'
                );
            }
            else if(reg.midwife==undefined){
                swal(
                    'Error',
                    'Please Enter Type of Midwife Assisted Delivery',
                    'error'
                );
            } 
            else if(reg.mother_name==undefined){
                swal(
                    'Error',
                    "Please Enter Mother's Name",
                    'error'
                );
            } else if(reg.residence_id==undefined){
                swal(
                    'Error',
                    "Please Enter Residence",
                    'error'
                );
            }
            else if(reg.residence_id==undefined){
                swal(
                    'Error',
                    "Please Enter Residence",
                    'error'
                );
            }
            else{
                var regpost={
                    facility_id:facility_id,user_id:user_id,
                    first_name:reg.first_name,
                    middle_name:reg.middle_name,
                    last_name:reg.last_name,
                    gender:reg.gender,
                    dob:reg.dob,
                    weight:reg.weight,
                    delivery_place:reg.delivery_place,
                    midwife:reg.midwife,
                    mobile_number:reg.mobile_number,
                    mother_name:reg.mother_name,
                   father_name:reg.father_name,
                    residence_id:reg.residence_id.residence_id,
                };
                console.log(regpost);

                $http.post('/api/Child_registration_update',regpost).then(function(data) {
                    $scope.child = data.data;
                    var msg=data.data.msg;
                    var status=data.data.status;
                    reg.birth_reg_no=null;
                    if (status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else{
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }


        }
        
 $scope.child_mother_registration = function(reg,patient_id) {
            if(reg==undefined){
                swal(
                    'Error',
                    'Please Fill all fields',
                    'error'
                );
            }
            else if(reg.tt_given==undefined){
                swal(
                    'Error',
                    'Please Fill Option For Mother TT Given Status',
                    'error'
                );
            }

            else if(reg.vvu_status==undefined){
                swal(
                    'Error',
                    'Please Fill Option For Mother VVU Status',
                    'error'
                );
            }
            else{
                var regpost={facility_id:facility_id,patient_id:patient_id,user_id:user_id,tt_given:reg.tt_given,vvu_status:reg.vvu_status};
                //console.log(regpost);
                $http.post('/api/Child_mother_registration',regpost).then(function(data) {
                    $scope.child = data.data;
                    var msg=data.data.msg;
                    var status=data.data.status;
                    if (status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else{
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }


        }

$scope.hiv_ID_registration = function(reg,patient_id) {
            if(reg==undefined){
                swal(
                    'Error',
                    'Please Fill all fields',
                    'error'
                );
            }
            else if(reg.heid_no==undefined){
                swal(
                    'Error',
                    'Please Enter HIV Expose ID NUMBER',
                    'error'
                );
            }


            else{
                var regpost={facility_id:facility_id,patient_id:patient_id,user_id:user_id,heid_no:reg.heid_no,mother_id:1};
                //console.log(regpost);
                $http.post('/api/hiv_ID_registration',regpost).then(function(data) {
                    $scope.child = data.data;
                    var msg=data.data.msg;
                    var status=data.data.status;
                    if (status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else{
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }


        }




        $scope.Child_vaccination_registration=function (vaccine,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }   else if(vaccine.date==undefined){
                swal(
                    'Error',
                    'Please Enter Date for '+vaccine.vaccination_id.vaccination_name,
                    'error'
                )
            } else if(vaccine.place==undefined){
                swal(
                    'Error',
                    'Please Choose Place of This Client',
                    'error'
                )
            }
            else{

                var vaccinations={'vaccination_id':vaccine.vaccination_id.id,'mother_id':1,
                    'date':vaccine.date,'patient_id':selectedPatient,'facility_id':facility_id,
                    'place':vaccine.place ,
                    'user_id':user_id
                };
                console.log(vaccinations);
                $http.post('/api/Child_vaccination_registration',vaccinations).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    vaccine=null;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

 $scope.child_growth_registration=function (selectedPatient) {

   var height=  $('#height').val();
   var heightz=  $('#heightz').val();
   var heightp=  $('#heightp').val();
   var weight=  $('#weight').val();
   var weightz=  $('#weightz').val();
   var weightp=  $('#weightp').val();
   var followup_date=  $('#followup_date').val();
     var allDAta={height:height,weight:weight,heightz:heightz,heightp:heightp,weightz:weightz,weightp:weightp,
         followup_date:followup_date,
         'patient_id':selectedPatient,'facility_id':facility_id,
         'user_id':user_id}
     console.log(height,heightz,heightp,weight,weightz,weightp);
   //  return;
            // if(selectedPatient==undefined){
            //     swal(
            //         'Error',
            //         'Please choose Client First',
            //         'error'
            //     )
            // }   else if(gr==undefined){
            //     swal(
            //         'Error',
            //         'Please Fill All fields ',
            //         'error'
            //     )
            // } else if(gr.weight==undefined){
            //     swal(
            //         'Error',
            //         'Please Enter Weight ',
            //         'error'
            //     )
            // }else if(gr.followup_date==undefined){
            //     swal(
            //         'Error',
            //         'Please Enter Follow Up Date ',
            //         'error'
            //     )
            // }
            // else{
            //
            //     var grs={'height':gr.height,
            //         weight:gr.weight,
            //         followup_date:gr.followup_date,
            //          'patient_id':selectedPatient,'facility_id':facility_id,
            //         'user_id':user_id};
            //     console.log(grs);
                $http.post('/api/child_growth_registration',allDAta).then(function(data) {
                    $scope.gr = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

       // }

$scope.child_deworm_registration=function (gr,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }   else if(gr==undefined){
                swal(
                    'Error',
                    'Please Fill All fields ',
                    'error'
                )
            }
            else{

                var grs={'deworm_given':gr.deworm_given,'vitamin_given':gr.vitamin_given,'mother_id':1,date:gr.date,
                     'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(grs);
                $http.post('/api/child_deworm_registration',grs).then(function(data) {
                    $scope.gr = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

$scope.child_voucher_registration=function (gr,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }   else if(gr==undefined){
                swal(
                    'Error',
                    'Please Fill All fields ',
                    'error'
                )
            } else if(gr.voucher_given==undefined){
                swal(
                    'Error',
                    'Please Fill Option For Subsidized Voucher Given column',
                    'error'
                )
            } else if(gr.date==undefined){
                swal(
                    'Error',
                    'Please Enter Date where Subsidized Voucher   Given',
                    'error'
                )
            }
            else{

                var grs={'voucher_given':gr.voucher_given,date:gr.date,
                     'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(grs);
                $http.post('/api/child_voucher_registration',grs).then(function(data) {
                    $scope.gr = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

$scope.child_feed_registration=function (gr,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }   else if(gr==undefined){
                swal(
                    'Error',
                    'Please Fill optional fields ',
                    'error'
                )
            }
            else{

                var grs={'feeding_type':gr.feeding_type,'mother_id':1,
                     'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(grs);
                $http.post('/api/child_feeding_registration',grs).then(function(data) {
                    $scope.gr = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.child_referral_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill All fields  ',
                    'error'
                )
            }
            else if(ref.referral_id==undefined) {
                swal(
                    'Error',
                    'Select Clinic for referring',
                    'error'
                )
            }  
            else if(ref.reason==undefined){
                swal(
                    'Error',
                    'Please Enter Reasons for  Referral ',
                    'error'
                )
            }
            else{

                var client_id_taken;
                if(client.patient_id ==undefined){
                    client_id_taken= client.client_id;
                }
                else{
                    client_id_taken= client.patient_id;
                }
                var refs={'transfered_institution_id':ref.referral_id,
                     'reason':ref.reason,mother_id:1,
                    'patient_id':selectedPatient,
                    'patient_id_table':client_id_taken,
                    'sender_clinic_id':19,
                    'facility_id':facility_id,
                    'user_id':user_id};


                $http.post('/api/child_referral_registration',refs).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }



        $scope.RCH_recommendations_registration = function(opt,patient) {
            if(opt==undefined){
                swal(
                    'Error',
                    'Write Recommendations first',
                    'error'
                )
            }
            else{


                var opts = {
                    opinion: opt.opinion,
                    opinion_type:2, facility_id:facility_id,patient_id:patient,user_id:user_id
                };

                $http.post('/api/RCH_recommendations_registration', opts).then(function (data) {
                    $scope.opinions = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )


                    }

                });
            }
        }


    }



})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-04-04.
 */
/**
 * Created by USER on 2017-04-02.
 */
/**
 * Created by USER on 2017-04-01.
 */
/**
 * Created by USER on 2017-03-27.
 */
/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('Family_planning_Controller', Family_planning_Controller);

    function Family_planning_Controller($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            //////console.log($scope.menu);

        });
        $scope.ClinicQueue=function () {
            $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                $scope.resdatas = data.data[5];
            });
        }
        $scope.ClinicQueue();


        $scope.Anti_natal_in_referral=function (selectedPatient) {

            $http.post('/api/Family_incoming_referral', selectedPatient).then(function (data) {


                $scope.selectedPatient=data.data;


            });
            $scope.ClinicQueue();
        }
        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

        $scope.department_list();
        var occupation=[];
        var resdata =[];
        var resdata1 =[];

        $scope.showSearchOccupation= function (searchKey) {

            $http.get('/api/getOccupation/'+searchKey).then(function(data) {
                occupation=data.data;

            });
            return occupation;
        }


        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/' + searchKey).then(function (data) {
                resdata = data.data;
            });

            

            return resdata;

        }


        $http.get('/api/facility_list').then(function (data) {
            $scope.facility = data.data;
        });

        $scope.showSearch = function(searchKey) {


            $http.post('/api/search_family_planing_clients',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;

            });


            return resdata;


        }

        $scope.family_planning_registration = function(patient) {

            if(patient==undefined){
                swal(
                    'Error',
                    'Please Fill All required Fields',
                    'error'
                )
            }
            else  if(patient.first_name==undefined){
                swal(
                    'Error',
                    'Please Fill First name',
                    'error'
                )
            }
            else if(patient.residence_id==undefined){
                swal(
                    'Error',
                    'Please Fill Residence',
                    'error'
                )
            }
            else   if(patient.occupation==undefined){
                swal(
                    'Error',
                    'Please Fill Occupation',
                    'error'
                )
            }



            else{


                var details={
                    facility_id:facility_id,user_id:user_id,
                    first_name:patient.first_name,
                    middle_name:patient.middle_name,
                    last_name:patient.last_name,
                    gender:patient.gender,
                    dob:patient.dob,
                    education:patient.education,
                    mobile_number:patient.mobile_number,
                    occupation_id:patient.occupation.id,
                    residence_id:patient.residence_id.residence_id,

                };
                console.log(details);
                 
                $http.post('/api/family_planning_registration',details).then(function(data) {
                    $scope.detail = data.data;


                    var sending = data.data.data;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });

            }
        }


        $scope.Family_planning_serial_no = function(patient) {

            $http.post('/api/Family_planning_serial_no',{facility_id:facility_id,patient_id:patient,user_id:user_id}).then(function(data) {
                $scope.serial_no = data.data;
                $scope.mother_planning_method_status(patient);

            });


        }

        $scope.mother_planning_method_status = function(patient) {

            $http.get('/api/mother_planning_method_status/'+patient).then(function(data) {
                $scope.method_statuses = data.data;

            });


        }

        $scope.mother_planning_method_status_update=function (datarec) {
            var name=datarec.planning_method;
            swal({
                title: 'Are you sure?',
                text: "You Want to stop Using "+name,
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes! ',
                cancelButtonText: '  No, cancel!',
                confirmButtonClass: 'btn btn-success  ',
                cancelButtonClass: '  btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/mother_planning_method_status_update',datarec).then(function(data) {
                    $scope.method_statuses = data.data.records;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }
                });






            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {

                }
            })


        }




        
        $scope.family_plan_reattendance_registration = function(patient) {

            $http.post('/api/family_plan_reattendance_registration',{facility_id:facility_id,patient_id:patient,user_id:user_id}).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


        }

 $scope.faimily_birth_registration = function(birth,patient) {
     if(birth==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(birth.pregnancy_number==undefined){
         swal(
             'Error',
             'Fill Number of Delivery column',
             'error'
         )
     } else if(birth.miscarriage_number==undefined){
         swal(
             'Error',
             'Fill Number of Miscarriage column',
             'error'
         )
     }else if(birth.msb_number==undefined){
         swal(
             'Error',
             'Fill Number of Maslated column',
             'error'
         )
     }else if(birth.alive_born_number==undefined){
         swal(
             'Error',
             'Fill Number of   Alive Born column',
             'error'
         )
     }
     else if(birth.child_alive_number==undefined){
         swal(
             'Error',
             'Fill Number of Children Alive column',
             'error'
         )
     }
else{
var births={
    pregnancy_number:birth.pregnancy_number,
    msb_number:birth.msb_number,
    alive_born_number:birth.alive_born_number,
    miscarriage_number:birth.miscarriage_number,
    child_alive_number:birth.child_alive_number,
    last_delivery_date:birth.last_delivery_date,
    facility_id:facility_id,patient_id:patient,user_id:user_id};

            $http.post('/api/faimily_birth_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }


        $scope.faimily_health_registration = function(health,patient) {
     if(health==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(health.headache==undefined){
         swal(
             'Error',
             'Fill Option of Headache column',
             'error'
         )
     }
     else if(health.yellow_fever==undefined){
         swal(
             'Error',
             'Fill Option of Yellow Fever column',
             'error'
         )
     } else if(health.heart_disease==undefined){
         swal(
             'Error',
             'Fill Option of Heart Disease column',
             'error'
         )
     }
     else if(health.bp==undefined){
         swal(
             'Error',
             'Fill Option of BP column',
             'error'
         )
     } else if(health.diabet==undefined){
         swal(
             'Error',
             'Fill Option of Diabetic column',
             'error'
         )
     }
     else if(health.breast_bunje==undefined){
         swal(
             'Error',
             'Fill Option of Bunje in Breast column',
             'error'
         )
     }
     else if(health.varicose_vein==undefined){
         swal(
             'Error',
             'Fill Option of Varicose Vein column',
             'error'
         )
     }
     else if(health.kifafa_medics==undefined){
         swal(
             'Error',
             'Fill Option of Had Ever used Kifafa Medicines ?',
             'error'
         )
     }
     else if(health.tb_medics==undefined){
         swal(
             'Error',
             'Fill Option of Had Ever used TB Medicines ?',
             'error'
         )
     }
else{
var births={
    headache:health.headache,
    yellow_fever:health.yellow_fever,
    heart_disease:health.heart_disease,
    bp:health.bp,
    diabet:health.diabet,
    breast_bunje:health.breast_bunje,
    varicose_vein:health.varicose_vein,
    kifafa_medics:health.kifafa_medics,
    tb_medics:health.tb_medics,
    other_problems:health.other_problems,

    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/faimily_health_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }


$scope.faimily_delivery_result_registration = function(delivery,patient) {
     if(delivery==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(delivery.year==undefined){
         swal(
             'Error',
             'Fill Year of Event Occurred',
             'error'
         )
     } else if(delivery.delivery_method==undefined){
         swal(
             'Error',
             'Fill Delivery Method',
             'error'
         )
     }
     else if(delivery.delivery_place==undefined){
         swal(
             'Error',
             'Fill Delivery Place',
             'error'
         )
     }else if(delivery.delivery_results==undefined){
         swal(
             'Error',
             'Fill Delivery Results',
             'error'
         )
     }else if(delivery.baby_feeding==undefined){
         swal(
             'Error',
             'Fill BAby Feeding Method',
             'error'
         )
     }

else{
var births={
    year:delivery.year,
    delivery_method:delivery.delivery_method,
    delivery_place:delivery.delivery_place,
    delivery_results:delivery.delivery_results,
    baby_feeding:delivery.baby_feeding,


    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/faimily_delivery_result_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }

$scope.faimily_menstral_result_registration = function(menstral,patient) {
     if(menstral==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(menstral.lnmp==undefined){
         swal(
             'Error',
             'Fill Last Normal Menstrauation Period',
             'error'
         )
     }
     else if(menstral.menstral_day==undefined){
         swal(
             'Error',
             'Fill   Menstruation Day',
             'error'
         )
     }
     else if(menstral.bleeding_quantity==undefined){
         swal(
             'Error',
             'Fill   Quantity of Blood Lost',
             'error'
         )
     }
     else if(menstral.menstral_cycle==undefined){
         swal(
             'Error',
             'Fill   Menstruation Cycle',
             'error'
         )
     }else if(menstral.pain==undefined){
         swal(
             'Error',
             'Fill option  Menstruation pain column',
             'error'
         )
     }
else{
var births={
    lnmp:menstral.lnmp,
    menstral_day:menstral.menstral_day,
    bleeding_quantity:menstral.bleeding_quantity,
    menstral_cycle:menstral.menstral_cycle,
    pain:menstral.pain,

    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/faimily_menstral_result_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }

$scope.faimily_iptc_registration = function(pitc,patient) {
     if(pitc==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(pitc.pitc==undefined){
         swal(
             'Error',
             'Fill Option Of PITC',
             'error'
         )
     }
     else if(pitc.pitc_result==undefined){
         swal(
             'Error',
             'Fill   IPTC Results',
             'error'
         )
     }  else if(pitc.result_date==undefined){
         swal(
             'Error',
             'Fill  Date of  IPTC Results ',
             'error'
         )
     }

else{
var births={
    pitc:pitc.pitc,
    pitc_result:pitc.pitc_result,
    result_date:pitc.result_date,


    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/faimily_iptc_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }
        $scope.faimily_cancer_registration = function(cancer,patient) {
     if(cancer==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(cancer.placenta_status==undefined){
         swal(
             'Error',
             'Fill Option Of Placenta Status',
             'error'
         )
     }
     else if(cancer.suspected_cancer==undefined){
         swal(
             'Error',
             'Fill Option Of Hypothetically Placenta Cancer Carrier',
             'error'
         )
     }
 else if(cancer.cryotherapy==undefined){
         swal(
             'Error',
             'Fill Option Of Cryotherapy ',
             'error'
         )
     }
     else if(cancer.breast_bunje==undefined){
         swal(
             'Error',
             'Fill Option Of Bunje In Breast ',
             'error'
         )
     }


else{
var births={
    placenta_status:cancer.placenta_status,
    suspected_cancer:cancer.suspected_cancer,
    cryotherapy:cancer.cryotherapy,
    breast_bunje:cancer.breast_bunje,

    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/faimily_cancer_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }

 $scope.faimily_lab_test_registration = function(lab,patient) {
     if(lab==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(lab.urine==undefined){
         swal(
             'Error',
             'Fill Option Of Urine',
             'error'
         )
     }
     else if(lab.albumin==undefined){
         swal(
             'Error',
             'Fill Option Of Albumin',
             'error'
         )
     }
 else if(lab.sugar==undefined){
         swal(
             'Error',
             'Fill Option Of Sugar ',
             'error'
         )
     }



else{
var births={
    urine:lab.urine,
    albumin:lab.albumin,
    sugar:lab.sugar,
    others:lab.others,


    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/faimily_lab_test_registration',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }


$scope.fplanning_stomach_leg_investigation = function(obser,patient) {
     if(obser==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(obser.liver_inflammation==undefined){
         swal(
             'Error',
             'Fill all Columns',
             'error'
         )
     }


else{
var births={
    liver_inflammation:obser.liver_inflammation,
    leg_inflammation:obser.leg_inflammation,
    vericose_vein:obser.vericose_vein,

    others:obser.others,


    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/fplanning_stomach_leg_investigation',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }
$scope.fplanning_viginal_by_arm_investigations = function(viginal,patient) {
     if(viginal==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(viginal.placenta_size==undefined){
         swal(
             'Error',
             'Fill placenta size Columns',
             'error'
         )
     }else if(viginal.placenta_layout==undefined){
         swal(
             'Error',
             'Fill placenta Layout Columns',
             'error'
         )
     }
else if(viginal.adnexa==undefined){
         swal(
             'Error',
             'Fill adnexa Columns',
             'error'
         )
     }


else{
var births={
    placenta_size:viginal.placenta_size,
    placenta_layout:viginal.placenta_layout,
    adnexa:viginal.adnexa,
    others:viginal.others,


    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/fplanning_viginal_by_arm_investigations',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }

$scope.fplanning_viginal_by_spec_investigations = function(spec,patient) {
     if(spec==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(spec.viginal_wet==undefined){
         swal(
             'Error',
             'Fill option for Vaginal wet Columns',
             'error'
         )
     }else if(spec.viginal_dirt==undefined){
         swal(
             'Error',
             'Fill option for Vaginal Dirt Columns',
             'error'
         )
     }
     else if(spec.cervix_normal==undefined){
         swal(
             'Error',
             'Fill option for cervix normalilty Columns',
             'error'
         )
     }else if(spec.viginal_inflammation==undefined){
         swal(
             'Error',
             'Fill option for vaginal_inflammation Columns',
             'error'
         )
     }else if(spec.cancer==undefined){
         swal(
             'Error',
             'Fill option for Cancer Columns',
             'error'
         )
     }


else{
var births={
    viginal_inflammation:spec.viginal_inflammation,
    viginal_wet:spec.viginal_wet,
    viginal_dirt:spec.viginal_dirt,
    cervix_normal:spec.cervix_normal,
    cancer:spec.cancer,
    others:spec.others,



    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/fplanning_viginal_by_spec_investigations',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }
        
        
$scope.fplanning_attendances = function(attendance,patient) {
     if(attendance==undefined){
         swal(
             'Error',
             'Fill all Fields',
             'error'
         )
     }
     else if(attendance.weight==undefined){
         swal(
             'Error',
             'Fill Body Weight Column',
             'error'
         )
     }   else if(attendance.bp==undefined){
         swal(
             'Error',
             'Fill BP Columns',
             'error'
         )
     }  else if(attendance.lnmp==undefined){
         swal(
             'Error',
             'Fill L.N.M.P Column',
             'error'
         )
     }
else{
var births={
    
    weight:attendance.weight,
    bp:attendance.bp,
    lnmp:attendance.lnmp, 
    complains:attendance.complains,
    comment_treatment:attendance.comment_treatment,
    followup_date:attendance.followup_date,
    
    facility_id:facility_id,client_id:patient,user_id:user_id};

            $http.post('/api/fplanning_attendances',births).then(function(data) {
                $scope.serial_no = data.data;

                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });


     }

        }


        $scope.planning_method_list_registration = function(method) {
     if(method==undefined){
         swal(
             'Error',
             'Fill Field',
             'error'
         )
     }

else{
var methods={
    planning_method:method.planning_method};
         //console.log(methods)
            $http.post('/api/planning_method_list_registration',methods).then(function(data) {
                $scope.serial_no = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.family_planning_method_list();
                }

            });


     }

        }

        $scope.family_planning_method_list_update = function(method) {

            var methods = {
                planning_method: method.planning_method,
                id: method.id
            };

            $http.post('/api/family_planning_method_list_update', methods).then(function (data) {
                $scope.serial_no = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    method.planning_method=null;
                    $scope.family_planning_method_list();
                }

            });
        }

 $scope.RCH_recommendations_registration = function(opt,patient) {
if(opt==undefined){
    swal(
        'Error',
        'Write Recommendations first',
        'error'
    )
}
     else{


            var opts = {
                opinion: opt.opinion,
                opinion_type:5, facility_id:facility_id,patient_id:patient,user_id:user_id
            };

            $http.post('/api/RCH_recommendations_registration', opts).then(function (data) {
                $scope.opinions = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                     
                    
                }

            });
        }
        }

$scope.mother_planning_method_registration = function(method,patient) {
//console.log(method)
    if(method==undefined){
        swal(
            'Error',
            'Fill Choose Method of Family Planning',
            'error'
        )
    }
    else if(method.id==undefined){
        swal(
            'Error',
            'Fill Choose Method of Family Planning',
            'error'
        )
    }else if(method.event_driven==undefined){
        swal(
            'Error',
            'Fill Choose Event Made you to Use This Method',
            'error'
        )
    }
    else if(method.place==undefined){
        swal(
            'Error',
            'Fill Choose Place of This Client',
            'error'
        )
    }
    else {


            var methods = {
                method_id: method.id.id,
                place: method.place,
                status:1,
                event_driven: method.event_driven,
                facility_id:facility_id,patient_id:patient,user_id:user_id
            };

            $http.post('/api/mother_planning_method_registration', methods).then(function (data) {
                $scope.method = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                $scope.mother_planning_method_status(patient);
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                }

            });
        }
        }

$scope.breast_cancer_registration = function(brs,patient) {

    if(brs==undefined){
        swal(
            'Error',
            'Fill Choose Fill All fields',
            'error'
        )
    }
    else if(brs.bunje==undefined) {
        swal(
            'Error',
            'Fill Choose Option For Bunje Column',
            'error'
        )
    }
    else if(brs.wound==undefined) {
        swal(
            'Error',
            'Fill Choose Option For Wound Column',
            'error'
        )
    }
    else if(brs.wound==undefined) {
        swal(
            'Error',
            'Fill Choose Option For Wound Column',
            'error'
        )
    }
    else {


            var brss = {
                bunje: brs.bunje,
                wound: brs.wound,
                breast_bleeding: brs.breast_bleeding,
                breast_abscess: brs.breast_abscess,
                others: brs.others,
                facility_id:facility_id,patient_id:patient,user_id:user_id
            };

            $http.post('/api/breast_cancer_registration', brss).then(function (data) {
                $scope.method = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                }

            });
        }
        }

$scope.cervix_cancer_registration = function(cerv,patient) {

    if(cerv==undefined){
        swal(
            'Error',
            'Fill Choose Fill All fields',
            'error'
        )
    }
    else if(cerv.virginal_discharge==undefined) {
        swal(
            'Error',
            'Fill Choose Option For virginal discharge Column',
            'error'
        )
    }

    else {


            var cervs = {
                virginal_discharge: cerv.virginal_discharge,
                cervix_scratching: cerv.cervix_scratching,
                cervix_swelling: cerv.cervix_swelling,
                virginal_bleeding: cerv.virginal_bleeding,
                others: cerv.others,
                facility_id:facility_id,patient_id:patient,user_id:user_id
            };

            $http.post('/api/cervix_cancer_registration', cervs).then(function (data) {
                $scope.method = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                }

            });
        }
        }

$scope.planning_vvu_registration = function(vvu,patient) {

    if(vvu==undefined){
        swal(
            'Error',
            'Fill Choose Fill All fields',
            'error'
        )
    }
    else if(vvu.current_vvu_status==undefined) {
        swal(
            'Error',
            'Fill Choose Option For VVU Current Status Column',
            'error'
        )
    }

    else {


            var vvus = {
                current_vvu_status: vvu.current_vvu_status,
                mother_vvu_status: vvu.mother_vvu_status,
                partner_vvu_status: vvu.partner_vvu_status,
                facility_id:facility_id,patient_id:patient,user_id:user_id
            };

            $http.post('/api/planning_vvu_registration', vvus).then(function (data) {
                $scope.method = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )

                }

            });
        }
        }



        $scope.institution_list=function () {

            $http.get('/api/institution_list').then(function (data) {

                $scope.institutes=data.data;
            });

        }
        $scope.institution_list();

        
 $scope.family_planning_method_list=function () {

            $http.get('/api/family_planning_method_list').then(function (data) {

                $scope.methods=data.data;
            });

        }
        $scope.family_planning_method_list();


        $scope.child_referral_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill All fields  ',
                    'error'
                )
            }
            else if(ref.referral_id==undefined) {
                swal(
                    'Error',
                    'Select Clinic for referring',
                    'error'
                )
            }
            else if(ref.reason==undefined){
                swal(
                    'Error',
                    'Please Enter Reasons for  Referral ',
                    'error'
                )
            }
            else{

                var refs={'transfered_institution_id':ref.referral_id,
                    'reason':ref.reason,mother_id:1,
                    'patient_id':selectedPatient,
                    'patient_id_table':client,
                    'sender_clinic_id':22,
                    'facility_id':facility_id,
                    'user_id':user_id};


                $http.post('/api/child_referral_registration',refs).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }



        $scope.condom_usage_registration=function (condom,selectedPatient) {

             if(condom==undefined){
                swal(
                    'Error',
                    'Please Fill All fields  ',
                    'error'
                )
            }
           

             else  if(condom.place==undefined){
                swal(
                    'Error',
                    'Please Fill client Place Status ',
                    'error'
                )
            } else  if(condom.quantity==undefined){
                swal(
                    'Error',
                    'Please Fill client quantity of condoms Given(PCs) ',
                    'error'
                )
            }
           
            else{

                 
                var condoms={ 
                    'patient_id':selectedPatient,
                    'place':condom.place,
                    'quantity':condom.quantity,
                    'facility_id':facility_id,
                    'user_id':user_id};
                  
                $http.post('/api/condom_usage_registration',condoms).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }




    }



})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-04-01.
 */
/**
 * Created by USER on 2017-03-27.
 */
/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('LabourController', LabourController);

    function LabourController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });

        $scope.ClinicQueue=function () {
            $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                $scope.resdatas = data.data[4];
            });
        }
        $scope.ClinicQueue();

        $scope.Anti_natal_in_referral=function (selectedPatient) {

            $http.post('/api/Anti_incoming_referral', selectedPatient).then(function (data) {


                $scope.selectedPatient=data.data;


            });
            $scope.ClinicQueue();
        }

        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

        $scope.department_list();

        $http.get('/api/user_list').then(function(data) {
            $scope.users=data.data;
            //console.log($scope.users)

        });
        var occupation=[];
        var resdata =[];
         

        $scope.showSearchOccupation= function (searchKey) {

            $http.get('/api/getOccupation/'+searchKey).then(function(data) {
                occupation=data.data;

            });
            return occupation;
        }


        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/' + searchKey).then(function (data) {
                resdata = data.data;
            });


            return resdata;
        }


        $http.get('/api/facility_list').then(function (data) {
            $scope.facility = data.data;
        });

        $scope.showSearch = function(searchKey) {


            $http.post('/api/searchRchpatient',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;

            });


            return resdata;


        }





        $scope.anti_natal_registration = function(patient) {

            if(patient==undefined){
                swal(
                    'Error',
                    'Please Fill All required Fields',
                    'error'
                )
            }
            else  if(patient.first_name==undefined){
                swal(
                    'Error',
                    'Please Fill First name',
                    'error'
                )
            }
            else if(patient.residence_id==undefined){
                swal(
                    'Error',
                    'Please Fill Residence',
                    'error'
                )
            }
            else   if(patient.occupation==undefined){
                swal(
                    'Error',
                    'Please Fill Occupation',
                    'error'
                )
            }


            else  if(patient.partner_name==undefined){
                swal(
                    'Error',
                    'Please Fill Partner Name',
                    'error'
                )
            }
            else  if(patient.occupation1==undefined){
                swal(
                    'Error',
                    'Please Fill Partner Occupation',
                    'error'
                )
            }
            else{


                var details={
                    facility_id:facility_id,user_id:user_id,
                    first_name:patient.first_name,
                    middle_name:patient.middle_name,
                    last_name:patient.last_name,
                    gender:'Female',
                    dob:patient.dob,
                    dob1:patient.dob1,
                    height:patient.height,
                    voucher_no:patient.voucher_no,
                    education1:patient.education1,
                    education:patient.education,
                    mobile_number:patient.mobile_number,
                    partner_name:patient.partner_name,
                    occupation_id:patient.occupation.id,
                    occupation_id1:patient.occupation1.id,
                    residence_id:patient.residence_id.residence_id,

                };
                $http.post('/api/anti_natal_registration',details).then(function(data) {
                    $scope.detail = data.data;


                    var sending = data.data.data;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });

            }
        }


        $scope.prev_preg_info_registration=function (preg_info,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(preg_info.number_of_pregnancy==undefined){
                swal(
                    'Error',
                    'Please Enter Number of pregnancy',
                    'error'
                )
            }else if(preg_info.number_of_delivery==undefined){
                swal(
                    'Error',
                    'Please Enter Number of delivery',
                    'error'
                )
            }else if(preg_info.number_alive_children==undefined){
                swal(
                    'Error',
                    'Please Enter Number of alive children',
                    'error'
                )
            }else if(preg_info.number_of_miscarriage==undefined){
                swal(
                    'Error',
                    'Please Enter Number of Miscarriage',
                    'error'
                )
            }else if(preg_info.year==undefined){
                swal(
                    'Error',
                    'Please Enter year of events above',
                    'error'
                )
            }
            else if(preg_info.lnmp==undefined){
                swal(
                    'Error',
                    'Please Enter LNMP',
                    'error'
                )
            }else if(preg_info.edd==undefined){
                swal(
                    'Error',
                    'Please Enter EDD',
                    'error'
                )
            }
            else if(preg_info.delivery_place==undefined){
                swal(
                    'Error',
                    'Please Enter Suggested Place of Delivery',
                    'error'
                )
            }
            else{

                var pregnancy_info={
                    'number_of_pregnancy':preg_info.number_of_pregnancy,
                    'number_of_delivery':preg_info.number_of_delivery,
                    'number_alive_children':preg_info.number_alive_children,
                    'number_of_miscarriage':preg_info.number_of_miscarriage,
                    'edd':preg_info.edd,
                    'lnmp':preg_info.lnmp,
                    'year':preg_info.year,
                    'delivery_place':preg_info.delivery_place.id,
                    'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(pregnancy_info);
                $http.post('/api/prev_preg_info_registration',pregnancy_info).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.prev_preg_info_indicator=function (prev_preg_indicator,selectedPatient) {

            if(prev_preg_indicator==undefined){
                swal(
                    'Error',
                    'Please Fill all fields',
                    'error'
                )
            } else if(prev_preg_indicator.fp_35_years_n_above==undefined){
                swal(
                    'Error',
                    'Mimba ya kwanza Zaidi ya miaka 35?',
                    'error'
                )
            }else if(prev_preg_indicator.lp_10_years_n_above==undefined){
                swal(
                    'Error',
                    'Mimba ya mwisho Zaidi ya miaka 10?',
                    'error'
                )
            } else if(prev_preg_indicator.delivery_method==undefined){
                swal(
                    'Error',
                    'Alijifungua Je?',
                    'error'
                )
            }else if(prev_preg_indicator.fbs_msb==undefined){
                swal(
                    'Error',
                    'Kuzaa mtoto Mfu au Kifo cha mtoto mchanga?',
                    'error'
                )
            }
            else if(prev_preg_indicator.miscarriage_three_plus==undefined){
                swal(
                    'Error',
                    'Kuharibika kwa mimba tatu au zaidi?',
                    'error'
                )
            }
            else if(prev_preg_indicator.heart_disease==undefined){
                swal(
                    'Error',
                    'Ana Ugonjwa wa Moyo?',
                    'error'
                )
            }
            else if(prev_preg_indicator.diabetic==undefined){
                swal(
                    'Error',
                    'Alishawahi kuugua Kisukari?',
                    'error'
                )
            }else if(prev_preg_indicator.tb==undefined){
                swal(
                    'Error',
                    'Alishawahi kuugua Kifua Kikuu?',
                    'error'
                )
            }
            else if(prev_preg_indicator.waist_disability==undefined){
                swal(
                    'Error',
                    'Anaulemavu wa Nyonga?',
                    'error'
                )
            }else if(prev_preg_indicator.high_bleeding==undefined){
                swal(
                    'Error',
                    'Kutoka Damu Nyingi wakati wa kujifungua?',
                    'error'
                )
            }
            else if(prev_preg_indicator.placenta_stacked==undefined){
                swal(
                    'Error',
                    ' Kondo la Nyuma Kukwama?',
                    'error'
                )
            }
            else{

                var pregnancy_indicator={

                    'fp_35_years_n_above':prev_preg_indicator.fp_35_years_n_above,
                    'lp_10_years_n_above':prev_preg_indicator.lp_10_years_n_above,
                    'delivery_method':prev_preg_indicator.delivery_method,
                    'high_bleeding':prev_preg_indicator.high_bleeding,
                    'fbs_msb':prev_preg_indicator.fbs_msb,
                    'miscarriage_three_plus':prev_preg_indicator.miscarriage_three_plus,
                    'heart_disease':prev_preg_indicator.heart_disease,
                    'diabetic':prev_preg_indicator.diabetic,
                    'tb':prev_preg_indicator.tb,
                    'waist_disability':prev_preg_indicator.waist_disability,
                    'placenta_stacked':prev_preg_indicator.placenta_stacked,
                    'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(pregnancy_indicator);
                $http.post('/api/pregnancy_indicator',pregnancy_indicator).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }
      


 $scope.admin_registration = function(adm,patient_id) {
            if (adm == undefined) {
                swal(
                    'Error',
                    'Please Fill Date and Time for This Admission',
                    'error'
                );
            }

            else {
                var admission = {
                    facility_id: facility_id, client_id: patient_id, user_id: user_id,

                    admission_date: adm.admission_date,
                    pregnancy_age: adm.pregnancy_age,
                    pregnancy_height: adm.pregnancy_height,

                };
//console.log(birth_infos);
                $http.post('/api/labour_admission_registration', admission).then(function (data) {
                    $scope.rch_4 = data.data;
                    var msg = data.data.msg;
                    var status = data.data.status;
                    if (status == 0) {
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else {
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }
        }
        
        
        
        $scope.delivery_registration = function(deli,patient_id) {
            var shona=null;
            if(deli.delivery_date == undefined) {
                swal(
                    'Error',
                    'Please Fill Date and Time of Delivery',
                    'error'
                );
            }


            else {
                if(deli.msamba !="HAUJACHANIKA" && deli.tailer_id==undefined){
                    swal(
                        'Error',
                        'Jina la Aliyeshona ni nani?',
                        'error'
                    );
                    return;
                } else if(deli.msamba =="HAUJACHANIKA" ){
                    shona==null ;
                }
                else{
                     shona=deli.tailer_id.id;
                }
                var delis = {
                    facility_id: facility_id, client_id: patient_id, user_id: user_id,
                    delivery_date: deli.delivery_date,
                    place_of_delivery: deli.place_of_delivery,
                    number_of_newborn: deli.number_of_newborn,
                    method_of_delivery: deli.method_of_delivery,
                    midwife_name: deli.midwife_name,
                    vitamin_given: deli.vitamin_given,
                    reason_for_scisoring: deli.reason_for_scisoring,
                    placenter_removed: deli.placenter_removed,
                    placenter_removed_date: deli.placenter_removed_date,
                    blood_discharged: deli.blood_discharged,
                    labour_catalyst: deli.labour_catalyst,
                    msamba: deli.msamba,
                    comment: deli.comment,
                    bp: deli.bp,
                    tailer_id: shona,

                };
 console.log(delis);
                $http.post('/api/labour_delivery_registration', delis).then(function (data) {
                    $scope.rch_4 = data.data;
                    var msg = data.data.msg;
                    var status = data.data.status;
                    if (status == 0) {
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else {
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }
        }




        $scope.child_referral_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill All fields  ',
                    'error'
                )
            }
            else if(ref.referral_id==undefined) {
                swal(
                    'Error',
                    'Select Clinic for referring',
                    'error'
                )
            }
            else if(ref.reason==undefined){
                swal(
                    'Error',
                    'Please Enter Reasons for  Referral ',
                    'error'
                )
            }
            else{

                var refs={'transfered_institution_id':ref.referral_id,
                    'reason':ref.reason,mother_id:1,
                    'patient_id':selectedPatient,
                    'patient_id_table':client,
                    'sender_clinic_id':21,
                    'facility_id':facility_id,
                    'user_id':user_id};


                $http.post('/api/child_referral_registration',refs).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }


        $scope.newborn_info_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill all Fields  ',
                    'error'
                )
            }else if(ref.gender==undefined){
                swal(
                    'Error',
                    'Please Select Newborn Gender  ',
                    'error'
                )
            }
            else if(ref.first_minute_score==undefined) {
                swal(
                    'Error',
                    '  APGAR  SCORE 1 DAKIKA',
                    'error'
                )
            } else if(ref.fifth_minute_score==undefined) {
                swal(
                    'Error',
                    '  APGAR  SCORE 5 DAKIKA',
                    'error'
                )
            }

            else if(ref.breast_feeding_within_hour==undefined){
                swal(
                    'Error',
                    'Please Choose option for  Breast feeding within hour ',
                    'error'
                )
            }
            else{

                var borns={
                    'gender':ref.gender,
                    'first_minute_score':ref.first_minute_score,
                    'fifth_minute_score':ref.fifth_minute_score,
                    'breast_feeding_within_hour':ref.breast_feeding_within_hour,
                    'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
               // console.log(borns);
                $http.post('/api/newborn_info_registration',borns).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }


$scope.labour_fsb_msb_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill  Field  ',
                    'error'
                )
            }
            else{

                var borns={
                     'fsb_msb':ref.fsb_msb,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
               // console.log(borns);
                $http.post('/api/labour_fsb_msb_registration',borns).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

$scope.labour_fgm_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill  Field  ',
                    'error'
                )
            }
            else{

                var borns={
                     'fgm':ref.fgm,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
               // console.log(borns);
                $http.post('/api/labour_fgm_registration',borns).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }


$scope.labour_complication_registration=function (ref,selectedPatient,client) {
    console.log(ref);
            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }  
            else{

                var borns={
                     'vaginal_bleeding':ref.vaginal_bleeding,'prom':ref.prom,'preeclampsia':ref.preeclampsia,'eclampsia':ref.eclampsia,
                     'anaemia':ref.anaemia, 'sepsis':ref.sepsis,'malaria':ref.malaria, 'hiv_p':ref.hiv_p,
                     'pph':ref.pph, 'fgm':ref.fgm,'obstructed_labour':ref.obstructed_labour, 'three_tear':ref.three_tear,
                     'retained_placenta':ref.retained_placenta, 'chest_pain':ref.chest_pain,
                     'loss_strength':ref.loss_strength, 'other_complication':ref.other_complication,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
               // console.log(borns);
                $http.post('/api/labour_complication_registration',borns).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }


$scope.labour_observation_registration=function (obs,selectedPatient) {

            if(obs.amniotic_bust==undefined){
                swal(
                    'Error',
                    'Please Fill Some of the Important Fields',
                    'error'
                )
            }
            else{

                var records={

                     'labour_start_date':obs.labour_start_date,'amniotic_bust':obs.amniotic_bust,
                     'amniotic_bust_date':obs.amniotic_bust_date,'baby_possition':obs.baby_possition,
                     'baby_pointer':obs.baby_pointer,'sacral_promontary_reached':obs.sacral_promontary_reached,
                     'ischial_spine_apeared':obs.ischial_spine_apeared,'narrow_outlet':obs.narrow_outlet,
                     'large_servix':obs.large_servix,'temperature':obs.temperature,
                     'hb':obs.hb,'bp':obs.bp,
                     'blood_bleeding':obs.blood_bleeding,'baby_heart_beat':obs.baby_heart_beat,
                     'comment':obs.comment,
                    'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(records);
                $http.post('/api/labour_observation_registration',records).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.labour_child_feeding_registration=function (feed,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( feed==undefined) {


                swal(
                    'Error',
                    'Please Fill Feeding Type ',
                    'error'
                )
            }

            else{



                var feeds={
                    'feeding_type':feed.feeding_type,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(arvs);
                $http.post('/api/labour_child_feeding_registration',feeds).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.labour_mother_disposition_registration=function (feed,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( feed==undefined) {


                swal(
                    'Error',
                    'Please Fill all Fields required ',
                    'error'
                )
            }

            else{



                var feeds={
                    'alive':feed.alive,
                    'disposition_date':feed.disposition_date,
                    'death_date':feed.death_date,
                    'death_reason':feed.death_reason,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(arvs);
                $http.post('/api/labour_mother_disposition_registration',feeds).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

 $scope.labour_child_disposition_registration=function (feed,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( feed==undefined) {


                swal(
                    'Error',
                    'Please Fill all Fields required ',
                    'error'
                )
            }

            else{



                var feeds={
                    'alive':feed.alive,
                    'disposition_date':feed.disposition_date,
                    'death_date':feed.death_date,
                    'death_reason':feed.death_reason,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(arvs);
                $http.post('/api/labour_child_disposition_registration',feeds).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.RCH_recommendations_registration = function(opt,patient) {
            if(opt==undefined){
                swal(
                    'Error',
                    'Write Recommendations first',
                    'error'
                )
            }
            else{


            var opts = {
                opinion: opt.opinion,
                opinion_type:2, facility_id:facility_id,patient_id:patient,user_id:user_id
            };

            $http.post('/api/RCH_recommendations_registration', opts).then(function (data) {
                $scope.opinions = data.data;
                var sending = data.data.msg;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )


                }

            });
        }
        }




    }



})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-03-27.
 */
/**
 * Created by USER on 2017-03-27.
 */
/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('PostnatalController', PostnatalController);

    function PostnatalController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            //////console.log($scope.menu);

        });

        $scope.ClinicQueue=function () {
            $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                $scope.resdatas = data.data[3];
            });
        }
        $scope.ClinicQueue();
        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

        $scope.department_list();
        var occupation=[];
        var resdata =[];
        var resdata1 =[];

        $scope.showSearchOccupation= function (searchKey) {

            $http.get('/api/getOccupation/'+searchKey).then(function(data) {
                occupation=data.data;

            });
            return occupation;
        }


        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/' + searchKey).then(function (data) {
                resdata = data.data;
            });


            return resdata;
        }


        $http.get('/api/facility_list').then(function (data) {
            $scope.facility = data.data;
        });

        $scope.showSearch = function(searchKey) {


            $http.post('/api/searchRchpatient',{searchKey:searchKey}).then(function(data) {
                resdata = data.data;

            });


            return resdata;


        }
        $scope.showARVITEM = function(searchKey) {
            if(searchKey.length<4){

            }
            else{
                $http.post('/api/searchItem',{searchKey:searchKey}).then(function(data) {
                    resdata = data.data;
                });
                return resdata;

            }

        }

        $scope.Post_natal_serial_no = function(patient) {

            $http.post('/api/Post_natal_serial_no',{facility_id:facility_id,patient_id:patient,user_id:user_id}).then(function(data) {
                $scope.serial_no = data.data;

            });


        }

        $scope.anti_natal_registration = function(patient) {

            if(patient==undefined){
                swal(
                    'Error',
                    'Please Fill All required Fields',
                    'error'
                )
            }
            else  if(patient.first_name==undefined){
                swal(
                    'Error',
                    'Please Fill First name',
                    'error'
                )
            }
            else if(patient.residence_id==undefined){
                swal(
                    'Error',
                    'Please Fill Residence',
                    'error'
                )
            }
            else   if(patient.occupation==undefined){
                swal(
                    'Error',
                    'Please Fill Occupation',
                    'error'
                )
            }


            else  if(patient.partner_name==undefined){
                swal(
                    'Error',
                    'Please Fill Partner Name',
                    'error'
                )
            }
            else  if(patient.occupation1==undefined){
                swal(
                    'Error',
                    'Please Fill Partner Occupation',
                    'error'
                )
            }
            else{


                var details={
                    facility_id:facility_id,user_id:user_id,
                    first_name:patient.first_name,
                    middle_name:patient.middle_name,
                    last_name:patient.last_name,
                    gender:'Female',
                    dob:patient.dob,
                    dob1:patient.dob1,
                    height:patient.height,
                    voucher_no:patient.voucher_no,
                    education1:patient.education1,
                    education:patient.education,
                    mobile_number:patient.mobile_number,
                    partner_name:patient.partner_name,
                    occupation_id:patient.occupation.id,
                    occupation_id1:patient.occupation1.id,
                    residence_id:patient.residence_id.residence_id,

                };
                $http.post('/api/anti_natal_registration',details).then(function(data) {
                    $scope.detail = data.data;


                    var sending = data.data.data;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });

            }
        }


        $scope.prev_preg_info_registration=function (preg_info,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(preg_info.number_of_pregnancy==undefined){
                swal(
                    'Error',
                    'Please Enter Number of pregnancy',
                    'error'
                )
            }else if(preg_info.number_of_delivery==undefined){
                swal(
                    'Error',
                    'Please Enter Number of delivery',
                    'error'
                )
            }else if(preg_info.number_alive_children==undefined){
                swal(
                    'Error',
                    'Please Enter Number of alive children',
                    'error'
                )
            }else if(preg_info.number_of_miscarriage==undefined){
                swal(
                    'Error',
                    'Please Enter Number of Miscarriage',
                    'error'
                )
            }else if(preg_info.year==undefined){
                swal(
                    'Error',
                    'Please Enter year of events above',
                    'error'
                )
            }
            else if(preg_info.lnmp==undefined){
                swal(
                    'Error',
                    'Please Enter LNMP',
                    'error'
                )
            }else if(preg_info.edd==undefined){
                swal(
                    'Error',
                    'Please Enter EDD',
                    'error'
                )
            }
            else if(preg_info.delivery_place==undefined){
                swal(
                    'Error',
                    'Please Enter Suggested Place of Delivery',
                    'error'
                )
            }
            else{

                var pregnancy_info={
                    'number_of_pregnancy':preg_info.number_of_pregnancy,
                    'number_of_delivery':preg_info.number_of_delivery,
                    'number_alive_children':preg_info.number_alive_children,
                    'number_of_miscarriage':preg_info.number_of_miscarriage,
                    'edd':preg_info.edd,
                    'lnmp':preg_info.lnmp,
                    'year':preg_info.year,
                    'delivery_place':preg_info.delivery_place.id,
                    'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(pregnancy_info);
                $http.post('/api/prev_preg_info_registration',pregnancy_info).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.prev_preg_info_indicator=function (prev_preg_indicator,selectedPatient) {

            if(prev_preg_indicator==undefined){
                swal(
                    'Error',
                    'Please Fill all fields',
                    'error'
                )
            } else if(prev_preg_indicator.fp_35_years_n_above==undefined){
                swal(
                    'Error',
                    'Mimba ya kwanza Zaidi ya miaka 35?',
                    'error'
                )
            }else if(prev_preg_indicator.lp_10_years_n_above==undefined){
                swal(
                    'Error',
                    'Mimba ya mwisho Zaidi ya miaka 10?',
                    'error'
                )
            } else if(prev_preg_indicator.delivery_method==undefined){
                swal(
                    'Error',
                    'Alijifungua Je?',
                    'error'
                )
            }else if(prev_preg_indicator.fbs_msb==undefined){
                swal(
                    'Error',
                    'Kuzaa mtoto Mfu au Kifo cha mtoto mchanga?',
                    'error'
                )
            }
            else if(prev_preg_indicator.miscarriage_three_plus==undefined){
                swal(
                    'Error',
                    'Kuharibika kwa mimba tatu au zaidi?',
                    'error'
                )
            }
            else if(prev_preg_indicator.heart_disease==undefined){
                swal(
                    'Error',
                    'Ana Ugonjwa wa Moyo?',
                    'error'
                )
            }
            else if(prev_preg_indicator.diabetic==undefined){
                swal(
                    'Error',
                    'Alishawahi kuugua Kisukari?',
                    'error'
                )
            }else if(prev_preg_indicator.tb==undefined){
                swal(
                    'Error',
                    'Alishawahi kuugua Kifua Kikuu?',
                    'error'
                )
            }
            else if(prev_preg_indicator.waist_disability==undefined){
                swal(
                    'Error',
                    'Anaulemavu wa Nyonga?',
                    'error'
                )
            }else if(prev_preg_indicator.high_bleeding==undefined){
                swal(
                    'Error',
                    'Kutoka Damu Nyingi wakati wa kujifungua?',
                    'error'
                )
            }
            else if(prev_preg_indicator.placenta_stacked==undefined){
                swal(
                    'Error',
                    ' Kondo la Nyuma Kukwama?',
                    'error'
                )
            }
            else{

                var pregnancy_indicator={

                    'fp_35_years_n_above':prev_preg_indicator.fp_35_years_n_above,
                    'lp_10_years_n_above':prev_preg_indicator.lp_10_years_n_above,
                    'delivery_method':prev_preg_indicator.delivery_method,
                    'high_bleeding':prev_preg_indicator.high_bleeding,
                    'fbs_msb':prev_preg_indicator.fbs_msb,
                    'miscarriage_three_plus':prev_preg_indicator.miscarriage_three_plus,
                    'heart_disease':prev_preg_indicator.heart_disease,
                    'diabetic':prev_preg_indicator.diabetic,
                    'tb':prev_preg_indicator.tb,
                    'waist_disability':prev_preg_indicator.waist_disability,
                    'placenta_stacked':prev_preg_indicator.placenta_stacked,
                    'client_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                console.log(pregnancy_indicator);
                $http.post('/api/pregnancy_indicator',pregnancy_indicator).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }


        $scope.vaccination_list=function () {
            $http.get('/api/vaccination_list').then(function (data) {
                $scope.vaccinations = data.data;

            });
        }

        $scope.vaccination_list();



        $scope.post_natal_registration = function(reg,patient_id) {
            if(reg==undefined){
                swal(
                    'Error',
                    'Please Enter RCH-4 Number',
                    'error'
                );
            }
           else if(reg.rch_4==undefined){
                swal(
                    'Error',
                    'Please Enter RCH-4 Number',
                    'error'
                );
            }

else if(reg.post_natal_reg_date==undefined){
                swal(
                    'Error',
                    'Please Enter Date for Post natal registration',
                    'error'
                );
            }
else{
    var regpost={facility_id:facility_id,patient_id:patient_id,user_id:user_id,rch_4:reg.rch_4,post_natal_reg_date:reg.post_natal_reg_date};
                //console.log(regpost);
                $http.post('/api/post_natal_registration_update',regpost).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }

        $scope.prev_preg_info_registration = function(birth_info,patient_id) {
            if (birth_info == undefined) {
                swal(
                    'Error',
                    'Please Fill all fields required',
                    'error'
                );
            }
            else if (birth_info.number_of_delivery == undefined) {
                swal(
                    'Error',
                    'Please Enter Number of Delivery',
                    'error'
                );
            }
            else if (birth_info.delivery_date == undefined) {
                swal(
                    'Error',
                    'Please Enter date of Delivery',
                    'error'
                );
            }
            else if (birth_info.place_of_delivery == undefined) {
                swal(
                    'Error',
                    'Please Enter Place of Delivery',
                    'error'
                );
            }
            else if (birth_info.midwife_proffesion == undefined) {
                swal(
                    'Error',
                    'Please Enter Midwife profession',
                    'error'
                );
            }

            else if (birth_info.mother_status == undefined) {
                swal(
                    'Error',
                    'Please Enter Status Of Mother',
                    'error'
                );
            }

            else if (birth_info.number_of_newborn == undefined) {
                swal(
                    'Error',
                    'Please Enter Number of Newborns',
                    'error'
                );
            }
            else if (birth_info.number_of_newborn_alive == undefined) {
                swal(
                    'Error',
                    'Please Enter Number of Newborns Alive',
                    'error'
                );
            }
            else if (birth_info.number_of_newborn_died == undefined) {
                swal(
                    'Error',
                    'Please Enter Number of Newborns Died',
                    'error'
                );
            }


            else {
                var birth_infos = {
                    facility_id: facility_id, patient_id: patient_id, user_id: user_id,
                    number_of_newborn_died: birth_info.number_of_newborn_died,
                    number_of_newborn_alive: birth_info.number_of_newborn_alive,
                    number_of_newborn: birth_info.number_of_newborn,
                    mother_status: birth_info.mother_status,
                    midwife_proffesion: birth_info.midwife_proffesion,
                    place_of_delivery: birth_info.place_of_delivery,
                    number_of_delivery: birth_info.number_of_delivery,
                    delivery_date: birth_info.delivery_date,
                };
//console.log(birth_infos);
                $http.post('/api/post_birth_info_registration', birth_infos).then(function (data) {
                    $scope.rch_4 = data.data;
                    var msg = data.data.msg;
                    var status = data.data.status;
                    if (status == 0) {
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else {
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }
        }
            $scope.baby_feed_registration = function(feed,patient_id) {
            if(feed==undefined){
                swal(
                    'Error',
                    'Please Fill Option',
                    'error'
                );
            }


else{
    var feeds={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        baby_breastfeeding_within_hour:feed.baby_breastfeeding_within_hour,

    };

                $http.post('/api/baby_feed_registration',feeds).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }


 $scope.pmtct_registration = function(pmtct,patient_id) {
            if(pmtct==undefined){
                swal(
                    'Error',
                    'Please Fill Option',
                    'error'
                );
            }
     else if(pmtct.anti_natal_vvu_infection_status==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Anti Natal VVU Infection Status',
                    'error'
                );
            }else if(pmtct.post_natal_vvu_infection_status==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Post Natal VVU Infection Status',
                    'error'
                );
            }


else{
    var pmtcts={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        anti_natal_vvu_infection_status:pmtct.anti_natal_vvu_infection_status,
        post_natal_vvu_infection_status:pmtct.post_natal_vvu_infection_status,

    };

                $http.post('/api/pmtct_post_registration',pmtcts).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }

 $scope.reattendance_registration = function(attendance,patient_id) {
            if(attendance==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Attendance Range',
                    'error'
                );
            }
     else if(attendance.attendance_range==undefined){
                swal(
                    'Error',
                    'Please Fill Option for attendance range',
                    'error'
                );
            }else if(attendance.date_attended==undefined){
                swal(
                    'Error',
                    'Please Fill Date Attended',
                    'error'
                );
            }else if(attendance.temperature==undefined){
                swal(
                    'Error',
                    'Please Fill Body Temperature',
                    'error'
                );
            }
            else if(attendance.hb==undefined){
                swal(
                    'Error',
                    'Please Fill HB',
                    'error'
                );
            } else if(attendance.bp==undefined){
                swal(
                    'Error',
                    'Please Fill BP',
                    'error'
                );
            }


else{
    var attendances={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        attendance_range:attendance.attendance_range,
        date_attended:attendance.date_attended,
        temperature:attendance.temperature,
        hb:attendance.hb,
        bp:attendance.bp,
        followup_date:attendance.followup_date,

    };

                $http.post('/api/post_reattendance_registration',attendances).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }


        $scope.post_chilreattendance_registration = function(chilreattendance,patient_id) {
            if(chilreattendance==undefined){
                swal(
                    'Error',
                    'Please Fill all Options',
                    'error'
                );
            }
              else if(chilreattendance.attendance_range==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Attendance Range',
                    'error'
                );
            }
            else if(chilreattendance.date_attended==undefined){
                swal(
                    'Error',
                    'Please Fill Date Attended',
                    'error'
                );
            }
            else if(chilreattendance.temperature==undefined){
                swal(
                    'Error',
                    'Please Fill Body Temperature',
                    'error'
                );
            }
            else if(chilreattendance.hb==undefined){
                swal(
                    'Error',
                    'Please Fill HB',
                    'error'
                );
            } else if(chilreattendance.bp==undefined){
                swal(
                    'Error',
                    'Please Fill BP',
                    'error'
                );
            }


            else{
                var chilreattendances={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
                    date_attended:chilreattendance.date_attended,
                    attendance_range:chilreattendance.attendance_range,
                    temperature:chilreattendance.temperature,
                    hb:chilreattendance.hb,
                    bp:chilreattendance.bp,
                    followup_date:chilreattendance.followup_date,

                };

                $http.post('/api/post_chilreattendance_registration',chilreattendances).then(function(data) {
                    $scope.rch_4 = data.data;
                    var msg=data.data.msg;
                    var status=data.data.status;
                    if (status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        );
                    }
                    else{
                        swal(
                            'Response',
                            msg,
                            'success'
                        );
                    }
                });

            }


        }




 $scope.breast_registration = function(breast,patient_id) {
            if(breast==undefined){
                swal(
                    'Error',
                    'Please Fill all Option for Breast status',
                    'error'
                );
            }
     else if(breast.breast_rupture==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Breast Rupture',
                    'error'
                );
            }else if(breast.mastitis==undefined){
                swal(
                    'Error',
                    'Please enter option for Mastitis',
                    'error'
                );
            }
else if(breast.abscess==undefined){
                swal(
                    'Error',
                    'Please enter option for Abscess  ',
                    'error'
                );
            }else if(breast.breast_contriction ==undefined){
                swal(
                    'Error',
                    'Please enter option for Breast constriction ',
                    'error'
                );
            }


else{
    var breasts={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        breast_rupture:breast.breast_rupture,
        mastitis:breast.mastitis,
        abscess:breast.abscess,
        breast_contriction:breast.breast_contriction,

    };

                $http.post('/api/breast_registration',breasts).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }

 $scope.post_natal_observation_lists_registration = function(part) {
            if(part==undefined){
                swal(
                    'Error',
                    'Please Fill all Option',
                    'error'
                );
            }



else{
    var parts={description:part.description


    };

                $http.post('/api/post_natal_observation_lists_registration',parts).then(function(data) {
        $scope.parts = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
            $scope.observation_lists();
        }
    });

}


        }

        $scope.observation_lists=function () {
            $http.get('/api/post_natal_observation_lists').then(function (data) {
                $scope.descriptions = data.data;


            });
        }

        $scope.observation_lists();

        $scope.description_lists=function (id) {
            $http.get('/api/post_natal_observation_description_list/'+id).then(function(data) {
                $scope.observations = data.data;

            });
        }
        //$scope.description_lists();

$scope.post_natal_observation_descriptions = function(desc) {
    console.log(desc);
            if(desc==undefined){
                swal(
                    'Error',
                    'Please Fill all Option',
                    'error'
                );
            }
    if(desc.observation_id==undefined){
                swal(
                    'Error',
                    'Please Choose Observation Part',
                    'error'
                );
            }
           if(desc.observation==undefined){
                swal(
                    'Error',
                    'Please Choose Observation',
                    'error'
                );
            }




else{
    var descs={
        observation_id:desc.observation_id,
        observation:desc.observation,


    };

                $http.post('/api/post_natal_observation_descriptions',descs).then(function(data) {
        $scope.descs = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
                    $scope.description_lists();
    });

}


        }
$scope.statuses=[];
        $scope.post_natal_observation_status = function(observation,patient_id) {
    console.log(observation,patient_id);




            if(observation==undefined){
                swal(
                    'Error',
                    'Please Fill all Option',
                    'error'
                );
            }



else{
                var i;
for( i=0; i<observation.length; i++){

if(observation.status==undefined){

}
else{


    $scope.statuses.push({'client_id':patient_id,'facility_id':facility_id,'user_id':user_id,
    'status':observation.status,'observation_id':observation[i].id});

}
}
                console.log($scope.statuses);

                $http.post('/api/post_natal_observation_status',$scope.statuses).then(function(data) {
        $scope.descs = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
                    $scope.statuses=[];

    });

}


  }


 $scope.dehiscence_registration = function(dehis,patient_id) {
            if(dehis==undefined){
                swal(
                    'Error',
                    'Please Fill all Options',
                    'error'
                );
            }
     else if(dehis.dehiscence_join==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Dehiscence Status',
                    'error'
                );
            }else if(dehis.mental_ability==undefined){
                swal(
                    'Error',
                    'Please enter option for Mental Status',
                    'error'
                );
            }
else if(dehis.fistula==undefined){
                swal(
                    'Error',
                    'Please enter option for Fistula  ',
                    'error'
                );
            } 

else{
    var dehises={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        dehiscence_join:dehis.dehiscence_join,
        mental_ability:dehis.mental_ability,
        fistula:dehis.fistula,
        
         


    };

                $http.post('/api/dehiscence_registration',dehises).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }

        $scope.post_additional_medication_registration = function(medic,patient_id) {
            if(medic==undefined){
                swal(
                    'Error',
                    'Please Fill all Options',
                    'error'
                );
            }
     else if(medic.ferrous_sulphate==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Ferrous Sulphate',
                    'error'
                );
            }else if(medic.folic_acid==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Folic Acid  Given',
                    'error'
                );
            }
else if(medic.vitamin_a==undefined){
                swal(
                    'Error',
                    'Please enter option for Vitamin A  Given ',
                    'error'
                );
            }

else{
    var medics={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        ferrous_sulphate:medic.ferrous_sulphate,
        folic_acid:medic.folic_acid,
        fs_quantity:medic.fs_quantity,
        fa_quantity:medic.fa_quantity,
        vitamin_a:medic.vitamin_a,
        other_medics:medic.other_medics,

    };

                $http.post('/api/post_additional_medication_registration',medics).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }

$scope.post_family_planing_registration = function(family,patient_id) {
            if(family==undefined){
                swal(
                    'Error',
                    'Please Fill all Options',
                    'error'
                );
            }
     else if(family.counselling_given==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Counselling column',
                    'error'
                );
            }  else if(family.iec_material_given==undefined){
                swal(
                    'Error',
                    'Please Fill Option for IEC material column',
                    'error'
                );
            }
            else if(family.referral_for_family_planning==undefined){
                swal(
                    'Error',
                    'Please Fill Option for Referral column',
                    'error'
                );
            }

else{
    var families={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        referral_for_family_planning:family.referral_for_family_planning,
        iec_material_given:family.iec_material_given,
        counselling_given:family.counselling_given,

    };

                $http.post('/api/post_family_planing_registration',families).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }




$scope.post_child_inv_registration = function(chilinvest,patient_id) {
            if(chilinvest==undefined){
                swal(
                    'Error',
                    'Please Fill all Options',
                    'error'
                );
            }
     else if(chilinvest.temperature==undefined){
                swal(
                    'Error',
                    'Please Fill Temperature',
                    'error'
                );
            }  else if(chilinvest.weight==undefined){
                swal(
                    'Error',
                    'Please Fill Weight',
                    'error'
                );
            }
            else if(chilinvest.hb==undefined){
                swal(
                    'Error',
                    'Please Fill HB',
                    'error'
                );
            } else if(chilinvest.kmc==undefined){
                swal(
                    'Error',
                    'Please Fill KMC',
                    'error'
                );
            }

else{
    var chilinvests={facility_id:facility_id,patient_id:patient_id,user_id:user_id,
        temperature:chilinvest.temperature,
        weight:chilinvest.weight,
        hb:chilinvest.hb,
        kmc:chilinvest.kmc,


    };

                $http.post('/api/post_child_inv_registration',chilinvests).then(function(data) {
        $scope.rch_4 = data.data;
        var msg=data.data.msg;
       var status=data.data.status;
        if (status==0){
            swal(
                'Error',
                msg,
                'error'
            );
        }
       else{
            swal(
                'Response',
                msg,
                'success'
            );
        }
    });

}


        }



        $scope.tt_vaccination_registration=function (tt_vaccine,selectedPatient) {
            var vaccination_id="";
            var vaccination_name="";

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }  else if(tt_vaccine.number_of_tt_given==undefined){
                swal(
                    'Error',
                    'Please Enter number of TT given ',
                    'error'
                )
            }
            else if(tt_vaccine.enough==undefined){
                swal(
                    'Error',
                    'Please Choose Option For Quantity Given ',
                    'error'
                )
            }
            else if(tt_vaccine.enough=='NO' && tt_vaccine.vaccination_date==undefined) {


                swal(
                    'Error',
                    'Please Enter Date for ' + tt_vaccine.vaccination_id.vaccination_name,
                    'error'
                )
            }





            else{
                if(tt_vaccine.enough=='NO'){
                    vaccination_id=  tt_vaccine.vaccination_id.id;
                    vaccination_name=  vaccination_id.vaccination_name;
                }


                var tt_vaccination={'vaccination_id':vaccination_id,

                    'number_of_tt_given':tt_vaccine.number_of_tt_given,
                    'enough':tt_vaccine.enough,
                    'tt_name':tt_vaccine.vaccination_name,
                    'vaccination_date':tt_vaccine.vaccination_date,'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(tt_vaccination);
                $http.post('/api/post_tt_vaccination_registration',tt_vaccination).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

 $scope.child_vaccination_registration=function (child_vaccine,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( child_vaccine==undefined) {


                swal(
                    'Error',
                    'Please Fill all Fields ',
                    'error'
                )
            }
            else if( child_vaccine.vaccination_date==undefined) {


                swal(
                    'Error',
                    'Please Enter Date for ' + child_vaccine.vaccination_id.vaccination_name,
                    'error'
                )
            }

            else{


                     ;



                var chil_vaccination={'vaccination_id':child_vaccine.vaccination_id.id,



                    'vaccination_date':child_vaccine.vaccination_date,'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(chil_vaccination);
                $http.post('/api/child_vaccination_registration',chil_vaccination).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

 $scope.child_infection_registration=function (child_inf,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( child_inf==undefined) {


                swal(
                    'Error',
                    'Please Fill all Fields ',
                    'error'
                )
            }
            else if( child_inf.navel==undefined) {


                swal(
                    'Error',
                    'Please Fill for Novel status ',
                    'error'
                )
            }
            else if( child_inf.mouth==undefined) {


                swal(
                    'Error',
                    'Please Fill for Mouth status ',
                    'error'
                )
            }
 else if( child_inf.skin==undefined) {


                swal(
                    'Error',
                    'Please Fill for Skin status ',
                    'error'
                )
            }
 else if( child_inf.eye==undefined) {


                swal(
                    'Error',
                    'Please Fill for Eye status ',
                    'error'
                )
            }else if( child_inf.jaundice==undefined) {


                swal(
                    'Error',
                    'Please Fill for Jaundice status ',
                    'error'
                )
            }else if( child_inf.high_infection==undefined) {


                swal(
                    'Error',
                    'Please Fill for High Infection status ',
                    'error'
                )
            }

            else{


                     ;



                var child_infs={
                    'navel':child_inf.navel,
                    'skin':child_inf.skin,
                    'mouth':child_inf.mouth,
                    'eye':child_inf.eye,
                    'jaundice':child_inf.jaundice,
                    'high_infection':child_inf.high_infection,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(child_infs);
                $http.post('/api/child_infection_registration',child_infs).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.post_natal_arv_registration=function (arv,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( arv==undefined) {


                swal(
                    'Error',
                    'Please Fill all Fields ',
                    'error'
                )
            }
            else if( arv.selectedItem.id==undefined) {


                swal(
                    'Error',
                    'Please Select ARV Name ',
                    'error'
                )
            } else if( arv.time==undefined) {


                swal(
                    'Error',
                    'Please Enter Time of ARV Usage ',
                    'error'
                )
            }

            else{



                var arvs={
                    'arv_id':arv.selectedItem.id,
                    'time':arv.time,

                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(arvs);
                $http.post('/api/post_natal_arv_registration',arvs).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

 $scope.post_natal_feeding_registration=function (feed,selectedPatient) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            }

            else if( feed==undefined) {


                swal(
                    'Error',
                    'Please Fill Feeding Type ',
                    'error'
                )
            }

            else{



                var feeds={
                    'feeding_type':feed.feeding_type,
                    'patient_id':selectedPatient,'facility_id':facility_id,
                    'user_id':user_id};
                //console.log(arvs);
                $http.post('/api/post_natal_feeding_registration',feeds).then(function(data) {
                    $scope.vaccines = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }

        $scope.child_referral_registration=function (ref,selectedPatient,client) {

            if(selectedPatient==undefined){
                swal(
                    'Error',
                    'Please choose Client First',
                    'error'
                )
            } else if(ref==undefined){
                swal(
                    'Error',
                    'Please Fill All fields  ',
                    'error'
                )
            }
            else if(ref.referral_id==undefined) {
                swal(
                    'Error',
                    'Select Clinic for referring',
                    'error'
                )
            }
            else if(ref.reason==undefined){
                swal(
                    'Error',
                    'Please Enter Reasons for  Referral ',
                    'error'
                )
            }
            else{

                var refs={'transfered_institution_id':ref.referral_id,
                    'reason':ref.reason,mother_id:1,
                    'patient_id':selectedPatient,
                    'patient_id_table':client,
                    'sender_clinic_id':20,
                    'facility_id':facility_id,
                    'user_id':user_id};


                $http.post('/api/child_referral_registration',refs).then(function(data) {
                    $scope.stds = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )
                    }

                });
            }

        }


        $scope.RCH_recommendations_registration = function(opt,patient) {
            if(opt==undefined){
                swal(
                    'Error',
                    'Write Recommendations first',
                    'error'
                )
            }
            else{


                var opts = {
                    opinion: opt.opinion,
                    opinion_type:2, facility_id:facility_id,patient_id:patient,user_id:user_id
                };

                $http.post('/api/RCH_recommendations_registration', opts).then(function (data) {
                    $scope.opinions = data.data;
                    var sending = data.data.msg;
                    var statusee = data.data.status;
                    if (statusee == 0) {
                        swal(
                            'Error',
                            sending,
                            'error'
                        )
                    }
                    else {
                        swal(
                            'Feedback..',
                            sending,
                            'success'
                        )


                    }

                });
            }
        }

        $scope.Anti_natal_in_referral=function (selectedPatient) {

            $http.post('/api/Anti_incoming_referral', selectedPatient).then(function (data) {


                $scope.selectedPatient=data.data;


            });
            $scope.ClinicQueue();
        }

    }

})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-04-19.
 */
/**
 * Created by USER on 2017-03-27.
 */
/**
 * Created by USER on 2017-02-24.
 */
/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('Rch_reoprtController', Rch_reoprtController);

    function Rch_reoprtController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });
        var date=new Date();

        var rch_child_attendance={facility_id:facility_id,start_date:'2017-01-01',end_date:'2017-12-01'}
 $http.post('/api/getChildAttendanceReport',rch_child_attendance).then(function(data) {
            $scope.attendances=data.data;

        });
        $http.post('/api/getChildfeedingReport',rch_child_attendance).then(function(data) {
            $scope.feeds=data.data;
            console.log(data.data)

        }); 
        $http.post('/api/getChilddewormgivenReport',rch_child_attendance).then(function(data) {
            $scope.deworms=data.data;
            console.log(data.data)

        });

        $scope.pdf = {
            src: 'example.pdf',
        };

        $scope.data = null; // this is loaded async

        $http.get("/api/getUsermenu/"+user_id, {
            responseType: 'arraybuffer'
        }).then(function (response) {
            $scope.data = new Uint8Array(response.data);
        });

    }

})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-02-13.
 */

(function() {
  'use strict';
  angular
    .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

      function fn_link(scope, element, attrs) {
        var onChange = $parse(attrs.ngFiles);
        element.on('change', function (event) {
          onChange(scope, { $files: event.target.files });
        });
      }

      return {
        link: fn_link
      };
    }]).controller('adminController', adminController);

  function adminController($http, $auth, $rootScope,$state,$location,$scope,$uibModal,toastr) {

    var user        =  $rootScope.currentUser;
    var user_name   =  $rootScope.currentUser.id;
    var facility_id =  $rootScope.currentUser.facility_id;
    var formdata    =  new FormData();

    $scope.getTheFiles = function ($files) {
      angular.forEach($files, function (value, key) {
        formdata.append(key, value);

      });
      formdata.append('photo_for',user_name);
    };

    // NOW UPLOAD THE FILES.
    $scope.uploadFiles = function () {

      var request = {
        method: 'POST',
        url: '/api/'+'fileupload',
        data: formdata,
        headers: {
          'Content-Type': undefined
        }
      };

      // SEND THE FILES.
      $http(request).then(function (data) {
        console.log(request);
        swal({
          title: '',
          html: $('<div>')
            .addClass('some-class')
            .text(''+data.data+''),
          animation: false,
          customClass: 'animated tada'
        });
      })
      .then(function () {
      });
    };

    $scope.runViews= function(){

      $http.get('/api/userView/'+facility_id).then(function(data) {
        $scope.icons=data.data;

        var getstatus=data.status;
        var getdata='SYSTEM DATABASE ACTIVATED';
        toastr.success('',getdata);
      });
    };

    $scope.setSystemData=function () {
      $http.get('/api/getPerm').then(function(data) {
        $scope.perms=data.data;
        console.log($scope.perms);
      });
      $http.get('/api/geticon').then(function(data) {
        $scope.icons=data.data;
      });

      $http.get('/api/getUserImage/'+user_name).then(function(data) {
        if(data.data.length !== 0){
          $scope.photo='/uploads/'+data.data[0].photo_path;
        }
      });

      $http.get('/api/getRoles').then(function(data) {
        $scope.roles=data.data;
      });


      $http.get('/api/user_list').then(function(data) {
        $scope.users = data.data;
        console.log($scope.users);
      });
    };

    $scope.savePermRoles= function(permRoles){

      var perm_list=$scope.labcartsxx;
      angular.forEach(perm_list, function(value, key) {
        console.log(key + ': ' + value);
      });
    }

    $scope.saveModules= function(modules){
      var menu={'main_menu':1,'module':modules.module,'title':modules.title,'glyphicons':modules.glyphicons.icon_class};
      console.log(menu);
      $http.post('/api/addPermission',menu).then(function(data) {
        var getstatus=data.status;
        var getdata=data.data;
        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      }).then(function(data){
        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      });
    }


    $scope.saveRoles= function(roles){
      var title = roles.title;
      var parents = roles.parent;

      var save_roles={'title':title,'parent':parents};


      console.log(save_roles);
      $http.post('/api/addRoles',save_roles).then(function(data) {
        var getstatus=data.status;
        var getdata=data.data;

        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      }).then(function(data){

        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      });
    }

    $scope.logout = function() {
      // Remove the authenticated user from local storage
      localStorage.removeItem('user');

      // Flip authenticated to false so that we no longer
      // show UI elements dependant on the user being logged in
      $rootScope.authenticated = false;

      // Remove the current user info from rootscope
      $rootScope.currentUser = null;
      event.preventDefault();
      $state.go('auth');

    }
    var user_id=$rootScope.currentUser.id;
    var state_name=$state.current.name;

    $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
      $scope.menu=data.data;
      console.log($scope.menu);

    });


    $scope.labcartsxx = [];

    $scope.checkTest = function(item,permRoles){

      if (angular.isDefined(permRoles)==false) {
        swal({
          title: 'ERROR:',
          html: $('<div>')
            .addClass('some-class')
            .text('PLEASE SELECT THE ROLE ,FROM SEARCH BOX ABOVE BEFORE PROCEED'),
          animation: false,
          customClass: 'animated tada'
        });
      }else{
        var permission_id=item.id;
        var role_id=permRoles.role.id;

        var perm_roles={'permission_id':permission_id,'role_id':role_id,'grant':1};

        $http.get('/api/getPermName/'+permission_id).then(function(data) {
          $scope.perms=data.data;
          console.log(role_id);
          var perm_name='Permission '+$scope.perms+' was selected and SAVED in the SYSTEM';

          $http.post('/api/perm_role',perm_roles).then(function(data) {
            var getstatus=data.status;
            var getdata=data.data;

            swal({
              title: ''+getstatus+'',
              html: $('<div>')
                .addClass('some-class')
                .text(''+getdata+''),
              animation: false,
              customClass: 'animated tada'
            });


          });

        });

        if((item.selected)==true){
        }
        else if((item.selected)==false){
          var indexremove =$scope.labcartsxx.indexOf(item);
          $scope.labcartsxx.splice(indexremove, 1);
        }

      }
    }




    $scope.chooseUser = function(user) {

      $scope.selectedUser=user;

      $scope.getAssignedPerms(user);

    }

    $scope.chooseRole = function(role) {

      $scope.selectedRole=role;

      $scope.getAssignedRole(role);

    }

    $scope.getAssignedRole=function (selectedRole) {

      var selectedRoleId=selectedRole.id;
      $http.get('/api/getAssignedRole/'+selectedRoleId).then(function (data) {
        $scope.savedRolePerms= data.data;
      });

    }

    $scope.getAssignedPerms=function (permUsers) {

      var selectedUserId=permUsers.id;
      $http.get('/api/getAssignedMenu/'+selectedUserId).then(function (data) {
        $scope.savedPerms= data.data;
      });

    }


    $scope.removeAccess=function (accessgiven) {
      console.log(accessgiven);
      var perm_user_id=accessgiven.id;
      var user_id=accessgiven.user_id;
      var title=accessgiven.title;
      var data={"perm_id":perm_user_id,"title":title};
      $http.post('/api/removeAccess',data).then(function (data) {

        var getdata= data.data.data;
        toastr.success(getdata, '');
      }).finally(function () {
        $http.get('/api/getAssignedMenu/'+user_id).then(function (data) {
          $scope.savedPerms= data.data;
        });

      });

    }

    $scope.removeRoleAccess=function (accessgiven) {
      var permission_role_id=accessgiven.id;
      var role_id=accessgiven.role_id;
      var title=accessgiven.title;
      var role_name=accessgiven.role_name;
      var data={"role_name":role_name,"permission_role_id":permission_role_id,"title":title};
      $http.post('/api/removeRoleAccess',data).then(function (data) {

        var getdata= data.data.data;
        toastr.success(getdata, '');
      }).finally(function () {
        $http.get('/api/getAssignedRole/'+role_id).then(function (data) {
          $scope.savedRolePerms= data.data;
        });

      });

    }

    $scope.checkUserPerms = function(permUserVal,item,permUsers){

      if(permUserVal==true) {

        if (angular.isDefined(permUsers) == false) {
          toastr.error('PLEASE SELECT THE USER ,FROM SEARCH BOX ABOVE BEFORE PROCEED', '');

        } else {
          var permission_id = item.id;
          var user_id = permUsers.id;
          console.log(user_id);
          var perm_users = {'permission_id': permission_id, 'user_id': user_id, 'grant': 1};

          $http.get('/api/getPermName/' + permission_id).then(function (data) {
            $scope.perms = data.data;
            var perm_name = 'Permission ' + $scope.perms + ' was selected and SAVED in the SYSTEM';

            $http.post('/api/perm_user', perm_users).then(function (data) {
              var getstatus = data.status;
              var getdata = data.data.data;


              if (data.data.status == 0) {
                toastr.error(getdata, '');
              } else {
                $scope.getAssignedPerms(permUsers);
                toastr.success(getdata, '');
              }


            });

          });


        }
      }
    }


    $scope.checkRolePerms = function(permUserVal,item,selectedRole){
      console.log(item);
      if(permUserVal==true) {

        if (angular.isDefined(selectedRole) == false) {
          toastr.error('PLEASE SELECT THE ROLE ', '');

        } else {
          var permission_id = item.id;
          var role_id = selectedRole.id;
          var perm_roles = {'permission_id': permission_id, 'role_id': role_id, 'grant': 1};

          $http.get('/api/getPermName/' + permission_id).then(function (data) {
            $scope.perms = data.data;
            var perm_name = 'Permission ' + $scope.perms + ' was selected and SAVED in the SYSTEM';

            $http.post('/api/perm_role', perm_roles).then(function (data) {
              var getstatus = data.status;
              var getdata = data.data.data;


              if (data.data.status == 0) {
                toastr.error(getdata, '');
              } else {
                $scope.getAssignedRole(selectedRole);
                toastr.success(getdata, '');
              }


            });

          });


        }
      }
    }













    $scope.mytime1 = new Date();
    $scope.mytime2 = new Date();

    $scope.AdmissionNotes="";
    var resdata =[];
    var nextresdata =[];
    var patientCategory =[];
    var patientService =[];
    var patientsList=[];
    var maritals=[];
    var tribe=[];
    var occupation=[];				   
    var country=[];				   
    var relationships=[];

    angular.element(document).ready(function () {
      $scope.setSystemData();
      $scope.setTabUserReg(1);
      toastr.success('Opening Admin Dashboard...', '');
      $scope.getProffesions();
    });

    $scope.setTabUserReg= function(newTab){
      $scope.tab = newTab;
    };

    $scope.setTabSystemMenu= function(newTab){
      $scope.tab = newTab;
    };

    $scope.setTabPermUser= function(newTab){
      $scope.tab = newTab;
    };

    $scope.setTabPermRole= function(newTab){
      $scope.getSystemActivity();
      $scope.tab = newTab;
    };

    $scope.user_list=function () {
      $http.get('/api/user_list').then(function(data) {
        $scope.users=data.data;
        //console.log($scope.users)

      });
    }
    $scope.user_registration=function (user) {

      $http.post('/api/user_registration',user).then(function(data) {

        $scope.user_list();
        var sending=data.data;
        swal(
            'Feedback..',
            sending,
            'success'
            )
      });
    }

    $scope.getFacilities= function(){
      $http.get('/api/facility_list').then(function(data) {
        $scope.facilities=data.data;

      });
    };

    $scope.getSystemActivity= function(){
      $http.get('/api/getSystemActivity').then(function(data) {
        $scope.systemActivities=data.data;

      });
    };


    $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
      $scope.menu=data.data;
    });





    $scope.isSet = function(tabNum){
      return $scope.tab === tabNum;
    }
    $scope.oneAtATime = true;




    $scope.addWardTypes= function (wards) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(wards)==false) {
        return sweetAlert("Please Enter WARD TYPE", "", "error");
      }else{
        $http.post('/api/saveWardTypes',{"ward_type_name":wards.ward_type}).then(function(data) {

          if(data.data.status ==0){
            $scope.wards = null;
            sweetAlert(data.data.data, "", "error");
          }else{
            $scope.wards = null;
            sweetAlert(data.data.data, "", "success");            				  					


          }




        });  

      } 


    }





    $scope.addDevices= function (device) {
      if (angular.isDefined(device)==false) {
        return sweetAlert("Please Enter DEVICE ", "", "error");
      }
      else{

        var dataPost={"eraser":0,"reagents":device.reagents,"equipment_name":device.equip_name,
          "equipment_status_id":device.equip_status,"sub_department_id":device.subdepartment,"facility_id":facility_id,"user_id":user_id};

        $http.post('/api/addDevices',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            device.reagents= null;
            device.equip_name= null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.addLabTest= function (test) {
      if (angular.isDefined(test)==false) {
        return sweetAlert("Please Enter TEST Name", "", "error");
      }
      else{

        var dataPost={"erasor":0,"equipment_id":test.equipment_id,"minimum_limit":test.minimum_limit,"panel_compoent_name":test.name,
          "si_units":test.si_units,"maximum_limit":test.maximum_limit,"user_id":user_id};

        $http.post('/api/addLabTest',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            test.name= null;
            test.si_units= null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.addLabTestPanel= function (testPanel) {
      if (angular.isDefined(testPanel)==false) {
        return sweetAlert("Please Enter TEST PANEL ", "", "error");
      }
      else{
        var dataPost={"erasor":0,"item_id":testPanel.item_id,"equipment_id":testPanel.equipment_id,"minimum_limit":testPanel.minimum_limit,"panel_compoent_name":testPanel.name,
          "si_units":testPanel.si_units,"maximum_limit":testPanel.maximum_limit,"user_id":user_id};
        console.log(dataPost);
        $http.post('/api/addLabTestPanel',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            testPanel.name= null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.addLabPanel= function (test) {
      if (angular.isDefined(test)==false) {
        return sweetAlert("Please Enter LAB TEST PANEL", "", "error");
      }
      else{

        var dataPost={"erasor":0,"equipment_id":test.equipment_id,"panel_name":test.name,
          "user_id":user_id};

        $http.post('/api/addLabPanel',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            test.name= null;
            test.si_units= null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }





    $scope.PreOPCondition= function (PreOPCondition,selectedPatient) {
      if (angular.isDefined(PreOPCondition)==false) {
        return sweetAlert("Please Enter Pre Operation Condition", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{

        var information_category="PRE-OPERTION CONDITION";
        var dataPost={"erasor":0,"noted_value":PreOPCondition.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":PreOPCondition.case,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.PreOPCondition = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }



    $scope.anaesthBloodLoss= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Please Enter AMOUNT OF BLOOD COLLECTED", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{

        var information_category="BLOOD LOSS";
        var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":pulse_rate.noted_amount,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.PreOPCondition = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.anaesthFluidGiven= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Please Enter AMOUNT OF FLUID GIVEN", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{

        var information_category="FLUID GIVEN";
        var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount_fluid,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":pulse_rate.noted_amount_fluid,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.PreOPCondition = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.anaesthUrineOutput= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Please Enter AMOUNT OF URINE OUTPUT", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{

        var information_category="URINE OUTPUT";
        var dataPost={"erasor":0,"noted_value":pulse_rate.urine_output,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":pulse_rate.urine_output,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            pulse_rate.urine_output = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.anaesthComplications= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Write any Compilcations found during Operations", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }
      else{
        var information_category="COMPLICATIONS";
        var dataPost={"erasor":0,"noted_value":pulse_rate.complications,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":pulse_rate.complications,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            pulse_rate.complications = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.anaesthPulseRate= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }
      else if (pulse_rate.am_pm==null) {
        return sweetAlert("IS IT AM/PM ? ", "", "error");
      }

      else if (pulse_rate.hr==null) {
        return sweetAlert("HOURS MISSED ", "", "error");
      }
      else if (pulse_rate.mins==null) {
        return sweetAlert("MINUTES MISSED ", "", "error");
      }
      else if (pulse_rate.mins.length !=2) {
        return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
      }
      else if (pulse_rate.mins >=60) {
        return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
      }

      else if (pulse_rate.mins < 0) {
        return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
      }
      else if (pulse_rate.read==null) {
        return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
      }


      else{

        var information_category="PULSE RATE";

        var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addPrBp',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.PreOPCondition = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.anaesthSystolic= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }
      else if (pulse_rate.am_pm==null) {
        return sweetAlert("IS IT AM/PM ? ", "", "error");
      }

      else if (pulse_rate.hr==null) {
        return sweetAlert("HOURS MISSED ", "", "error");
      }
      else if (pulse_rate.mins==null) {
        return sweetAlert("MINUTES MISSED ", "", "error");
      }
      else if (pulse_rate.mins.length !=2) {
        return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
      }
      else if (pulse_rate.mins >=60) {
        return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
      }

      else if (pulse_rate.mins < 0) {
        return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
      }
      else if (pulse_rate.read==null) {
        return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
      }


      else{

        var information_category="SYSTOLIC PRESSURE";

        var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addPrBp',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            pulse_rate.read = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.anaesthDiastolic= function (pulse_rate,selectedPatient) {
      if (angular.isDefined(pulse_rate)==false) {
        return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }
      else if (pulse_rate.am_pm==null) {
        return sweetAlert("IS IT AM/PM ? ", "", "error");
      }

      else if (pulse_rate.hr==null) {
        return sweetAlert("HOURS MISSED ", "", "error");
      }
      else if (pulse_rate.mins==null) {
        return sweetAlert("MINUTES MISSED ", "", "error");
      }
      else if (pulse_rate.mins.length !=2) {
        return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
      }
      else if (pulse_rate.mins >=60) {
        return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
      }

      else if (pulse_rate.mins < 0) {
        return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
      }
      else if (pulse_rate.read_diastolic==null) {
        return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
      }


      else{

        var information_category="DIASTOLIC PRESSURE";

        var dataPost={"erasor":0,"noted_value":pulse_rate.read_diastolic,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addPrBp',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            pulse_rate.read_diastolic = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.anaesthIntubation= function (Intubation,selectedPatient) {
      if (angular.isDefined(Intubation)==false) {
        return sweetAlert("Please Enter INTUBATION INFO", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{

        var information_category="INTUBATION";
        var dataPost={"erasor":0,"noted_value":Intubation.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":Intubation.condition,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.PreOPCondition = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.anaesthRespiration= function (Respiration,selectedPatient) {
      if (angular.isDefined(Respiration)==false) {
        return sweetAlert("Please Enter RESPIRATION INFO", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{
        var information_category="RESPIRATION";
        var dataPost={"erasor":0,"noted_value":Respiration.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":Respiration.condition,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.Respiration = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.anaesthLocal= function (Local,selectedPatient) {
      if (angular.isDefined(Local)==false) {
        return sweetAlert("Please Enter LOCAL INFO", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{
        var information_category="LOCAL";
        var dataPost={"erasor":0,"noted_value":Local.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":Local.condition,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.Respiration = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.anaesthPosition= function (Position,selectedPatient) {
      if (angular.isDefined(Position)==false) {
        return sweetAlert("Please Enter POSITION INFO", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{
        var information_category="POSITION";
        var dataPost={"erasor":0,"noted_value":Position.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":Position.condition,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.Respiration = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }


    $scope.anaesthNeedle= function (Needle,selectedPatient) {
      if (angular.isDefined(Needle)==false) {
        return sweetAlert("Please Enter NEEDLE INFO", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{
        var information_category="NEEDLE";
        var dataPost={"erasor":0,"noted_value":Needle.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":Needle.condition,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.Needle = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.anaesthEffect= function (Effect,selectedPatient) {
      if (angular.isDefined(Effect)==false) {
        return sweetAlert("Please Enter NEEDLE INFO", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Select Patient Before Proceed", "", "error");
      }

      else{
        var information_category="EFFECT";
        var dataPost={"erasor":0,"noted_value":Effect.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "remarks":Effect.condition,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/addTimesQue',dataPost).then(function(data) {
          if(data.data.status ==0){
            sweetAlert(data.data.data, "", "error");
          }
          else{
            $scope.Effect = null;
            sweetAlert(data.data.data, "", "success");
          }});
      }
    }

    $scope.saveHb= function (hb,selectedPatient) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(hb)==false) {
        return sweetAlert("Please Enter Laboratory Status", "", "error");
      } 
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Enter Patient Selected", "", "error");
      } else{
        var information_category='LABORATORY STATUS';
        var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "value_noted":hb.laboratory,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            hb.laboratory = null;
            sweetAlert(data.data.data, "", "success");            				  					


          }




        });  

      } 


    }


    $scope.savePreAnaestheticOrder= function (hb,selectedPatient) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(hb)==false) {
        return sweetAlert("Please Enter PRE ANAESTHETIC ORDER", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Enter Patient Selected", "", "error");
      } else{
        var information_category='PRE ANAESTHETIC ORDER';
        var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "value_noted":hb.pre_anaesthetic_order,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            hb.pre_anaesthetic_order = null;
            sweetAlert(data.data.data, "", "success");


          }




        });

      }


    }


    $scope.saveAnaestheticTechniques= function (hb,selectedPatient) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(hb)==false) {
        return sweetAlert("Please Enter ANAESTHETIC TECHNIQUES", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Enter Patient Selected", "", "error");
      } else{
        var information_category='ANAESTHETIC TECHNIQUES';
        var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "value_noted":hb.anaesthetic_technique,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            hb.anaesthetic_technique = null;
            sweetAlert(data.data.data, "", "success");


          }




        });

      }


    }

    $scope.savePhysicalStatus= function (hb,selectedPatient) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(hb)==false) {
        return sweetAlert("Please Enter Physical Status", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Enter Patient Selected", "", "error");
      } else{
        console.log(hb);
        var information_category='PHYSICAL STATUS';
        var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "value_noted":hb.physical_status,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            hb.laboratory = null;
            sweetAlert(data.data.data, "", "success");


          }




        });

      }


    }

    $scope.saveOral= function (hb,selectedPatient) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(hb)==false) {
        return sweetAlert("Please Enter LAST ORAL INTAKE", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Enter Patient Selected", "", "error");
      } else{
        console.log(hb);
        var information_category='LAST ORAL INTAKE';
        var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "value_noted":hb.oral,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            hb.oral = null;
            sweetAlert(data.data.data, "", "success");


          }




        });

      }


    }

    $scope.saveNutritional= function (hb,selectedPatient) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(hb)==false) {
        return sweetAlert("Please Enter NUTRITIONAL STATUS", "", "error");
      }
      else if (angular.isDefined(selectedPatient)==false) {
        return sweetAlert("Please Enter Patient Selected", "", "error");
      } else{
        console.log(hb);
        var information_category='NUTRITIONAL STATUS';
        var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
          "value_noted":hb.nutrional,"information_category":information_category,"nurse_id":user_id};
        $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            hb.nutrional = null;
            sweetAlert(data.data.data, "", "success");


          }




        });

      }


    }

    var ward_types=[];
    $scope.showSearchWardTypes= function (searchKey) {

      $http.get('/api/searchWardTypes/'+searchKey).then(function(data) {
        ward_types=data.data;

      });
      return ward_types;
    }	

    var ward_classes=[];
    $scope.showSearchWardClass= function (searchKey) {

      $http.get('/api/getWardClasses/'+searchKey).then(function(data) {
        ward_classes=data.data;

      });
      return ward_classes;
    }	


    var beds=[];
    $scope.showSearchBedTypes= function (searchKey) {				
      $http.get('/api/searchBedTypes/'+searchKey).then(function(data) {
        beds=data.data;			
      });
      return beds;
    }	


    $scope.getOutPutTypes= function () {
      $http.get('/api/getOutPutTypes').then(function(data) {
        $scope.getOutPutTypes=data.data;

      });

    }

    $scope.getVital= function () {
      $http.post('/api/getVital').then(function(data) {
        $scope.getVitals=data.data;
        //console.log($getVitals);			
      });

    }



    $scope.saveAssociateHistory= function (associate_history,selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }
      else if(angular.isDefined(associate_history)==false){

        return sweetAlert("Please Enter History Records or NILL", "", "error");
      }
      var admission_id=selectedPatient.admission_id;
      var information_category='ASSOCIATE HISTORY';
      var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
        "medical":associate_history.medical,"surgical":associate_history.surgical,
        "anaesthetic":associate_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
      $http.post('/api/saveAssociateHistory',associateHistory).then(function(data) {

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");		 				
        }			
      });

    }

    $scope.savePastHistory= function (past_history,selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }
      else if(angular.isDefined(past_history)==false){

        return sweetAlert("Please Enter History Records or NILL", "", "error");
      }
      var admission_id=selectedPatient.admission_id;
      var information_category='PAST HISTORY';
      var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"medical":past_history.medical,"surgical":past_history.surgical,"anaesthetic":past_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
      $http.post('/api/savePastHistory',associateHistory).then(function(data) {

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");		 				
        }			
      });

    }


    $scope.saveSocialSurgery= function (social,selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }
      else if(angular.isDefined(social)==false){

        return sweetAlert("Please Enter Social History Records or NILL", "", "error");
      }
      var admission_id=selectedPatient.admission_id;
      var information_category='SOCIAL AND FAMILY HISTORY';
      var socialHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"chronic_illness":social.chronic_illness,"substance_abuse":social.substance_abuse,"adoption":social.adoption,"others":social.others,"other_information":information_category,"nurse_id":user_id};
      $http.post('/api/saveSocialHistory',socialHistory).then(function(data) {

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");		 				
        }			
      });

    }



    $scope.saveDentalStatus= function (tooth_id,tooth_number,selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){					  
        return sweetAlert("Select the Patient Before ENTERING DENTAL STATUS", "", "error");
      }
      else{

        $scope.selectedPatient=selectedPatient;
        console.log($scope.selectedPatient);

        $scope.dentals={"tooth_id":tooth_id,"tooth_number":tooth_number};
        var object =angular.extend($scope.selectedPatient,$scope.dentals); 
        console.log(object);				 
        console.log($scope.dentals);				 
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/dental_status.html',
          size: 'lg',
          animation: true,
          controller: 'physicalExaminations',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });



      }

    }

    $scope.saveCardivascularExaminations= function (selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){					  
        return sweetAlert("Select the Patient Before Adding Cardivascular System", "", "error");
      }
      else{

        $scope.selectedPatient=selectedPatient;
        console.log($scope.selectedPatient);

        //console.log(beds_number);			  
        var object =$scope.selectedPatient; 
        //console.log(beds_number);				 
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/cardivascular_examinations.html',
          size: 'lg',
          animation: true,
          controller: 'physicalExaminations',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });



      }

    }	


    $scope.saveGastroIntestineExaminations= function (selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){					  
        return sweetAlert("Select the Patient Before Adding Gastro Intestine System", "", "error");
      }
      else{

        $scope.selectedPatient=selectedPatient;
        console.log($scope.selectedPatient);

        //console.log(beds_number);			  
        var object =$scope.selectedPatient; 
        //console.log(beds_number);				 
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/gastrointestine.html',
          size: 'lg',
          animation: true,
          controller: 'physicalExaminations',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });



      }

    }

    $scope.saveCentralNervousSystem= function (selectedPatient) {
      if(angular.isDefined(selectedPatient)==false){					  
        return sweetAlert("Select the Patient Before Adding CENTRAL NERVOUS SYSTEM", "", "error");
      }
      else{

        $scope.selectedPatient=selectedPatient;
        console.log($scope.selectedPatient);

        //console.log(beds_number);			  
        var object =$scope.selectedPatient; 
        //console.log(beds_number);				 
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/centralNervousSystem.html',
          size: 'lg',
          animation: true,
          controller: 'physicalExaminations',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });



      }

    }

    $scope.getDiagnosis= function () {
      $http.get('/api/getDiagnosis').then(function(data) {
        $scope.getDiagnosises=data.data;
        //console.log($getVitals);			
      });

    }

    $scope.getTeeth= function (selectedPatient) {

      $http.get('/api/getTeethAbove').then(function(data) {
        $scope.teethAboves=data.data;
        $http.get('/api/getTeethBelow').then(function(data) {
          $scope.teethBelows=data.data;
          console.log($scope.teethBelows);
        });

      });

      if(angular.isDefined(selectedPatient)==false){					  
        return sweetAlert("Select the Patient Before SETTING DENTAL STATUS", "", "error");
      }else{
        var request_id=selectedPatient.id;
        $http.get('/api/getTeethStatusFromPatientAbove/'+request_id).then(function(data) {
          $scope.teeth_patientsAboves=data.data;

        });

        $http.get('/api/getTeethStatusFromPatientBelow/'+request_id).then(function(data) {
          $scope.teeth_patientsBelows=data.data;

        });

      }




    }








    $scope.addImplementation= function (implementations,selectedPatient) {
      if (angular.isDefined(implementations)==false) {
        return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
      }
      else if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }


      var admission_id=selectedPatient.admission_id;
      var nursing_care_type="IMPLEMENTATIONS";

      var implementations={"targeted_plans":implementations.implementation,
        "nurse_diagnosis_id":implementations.getDiagnos,
        "admission_id":admission_id,
        "nursing_care_types":nursing_care_type,"nurse_id":user_id};
      $http.post('/api/addImplementations',implementations).then(function(data) {

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");            				  					
          //$scope.getAdmPatient(selectedPatient);

        }			
      });

    }

    $scope.addEvaluations= function (evaluations,selectedPatient) {
      if (angular.isDefined(evaluations)==false) {
        return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
      }
      else if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }


      var admission_id=selectedPatient.admission_id;
      var nursing_care_type="EVALUATIONS";

      var evaluations={"targeted_plans":evaluations.evaluation,
        "nurse_diagnosis_id":evaluations.getDiagnos,
        "admission_id":admission_id,
        "nursing_care_types":nursing_care_type,"nurse_id":user_id};
      $http.post('/api/addEvaluations',evaluations).then(function(data) {

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");            				  					
          //$scope.getAdmPatient(selectedPatient);

        }			
      });

    }	

    $scope.addTimes= function (times,selectedPatient) {
      if (angular.isDefined(times)==false) {
        return sweetAlert("Please Select Diagnosis for TIMING", "", "error");
      }
      else if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }

      console.log(times); 

      var admission_id=selectedPatient.admission_id;
      var nursing_care_type="TIME";
      var daytime=times.time_day;
      var resultsTime=times.time+' '+daytime;

      var times={"targeted_plans":resultsTime,
        "nurse_diagnosis_id":times.getDiagnos,
        "admission_id":admission_id,
        "nursing_care_types":nursing_care_type,"nurse_id":user_id,"daytime":daytime};
      console.log(times);

      $http.post('/api/addTimes',times).then(function(data) {

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");            				  					

        }			
      });

    }	

    $scope.patientDischarge= function (selectedPatient) {		
      $scope.selectedPatient=selectedPatient;
      console.log($scope.selectedPatient);

      //console.log(beds_number);			  
      var object =$scope.selectedPatient; 
      //console.log(beds_number);				 
      var modalInstance = $uibModal.open({
        templateUrl: '/views/modules/nursing_care/patientDischarge.html',
        size: 'lg',
        animation: true,
        controller: 'patientDischargedModal',
        resolve:{
          object: function () {
            return object;
          }
        }				  
      });

    }





    $scope.addOutPuts= function (getOutPuts,selectedPatient) {
      if (angular.isDefined(getOutPuts)==false) {
        return sweetAlert("Please Select the OUTPUT TYPES", "", "error");
      }
      else if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }

      var admission_id=selectedPatient.admission_id;
      var getOutPuts={"amount":getOutPuts.amount,
        "observation_output_type_id":getOutPuts.types,
        "admission_id":admission_id,
        "si_units":getOutPuts.units,
        "nurse_id":user_id
      };
      console.log(getOutPuts);
      $http.post('/api/addOutPuts',getOutPuts).then(function(data) {
        $scope.getOutPuts=data.data;

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");            				  					
          //$scope.getAdmPatient(selectedPatient);

        }			
      });

    }	



    $scope.addIntravenous= function (intravenous,selectedPatient) {
      if (angular.isDefined(intravenous)==false) {
        return sweetAlert("Please Select the INTRAVENOUS FLUID", "", "error");
      }
      else if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }


      var admission_id=selectedPatient.admission_id;
      var intravenous={"intravenous_mils":intravenous.amount,"intravenous_types_id":intravenous.types,"admission_id":admission_id};
      $http.post('/api/addIntakeObservation',intravenous).then(function(data) {
        $scope.getIntravenous=data.data;

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");            				  					
          //$scope.getAdmPatient(selectedPatient);

        }			
      });

    }	


    $scope.addIntakeFluid= function (oral,selectedPatient) {
      if (angular.isDefined(oral)==false) {
        return sweetAlert("Please Select the ORAL FLUID TYPE TAKEN", "", "error");
      }
      else if(angular.isDefined(selectedPatient)==false){

        return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
      }						
      var admission_id=selectedPatient.admission_id;

      var oral_mils={"oral_mils":oral.amount,"oral_types_id":oral.types,"admission_id":admission_id};
      $http.post('/api/addIntakeFluid',oral_mils).then(function(data) {
        $scope.getIntravenous=data.data;

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{

          sweetAlert(data.data.data, "", "success");		  					

        }			
      });

    }	


    $scope.addWard= function (wards,ward_class) {
      //var ward_type=wards.ward_type;
      //console.log(ward_class);
      if (angular.isDefined(wards)==false) {
        return sweetAlert("Please Enter WARD NAME", "", "error");
      }
      else if (angular.isDefined(wards.ward_type)==false) {
        return sweetAlert("Please Enter WARD TYPE", "", "error");
      }

      else if (angular.isDefined(ward_class)==false) {
        return sweetAlert("Please Enter WARD CLASS", "", "error");
      } 

      else if (angular.isDefined(ward_class.ward_class_id)==false) {
        return sweetAlert("Please Enter WARD CLASS", "", "error");
      }

      else{

        $http.post('/api/saveWards',{"ward_class_id":ward_class.ward_class_id.item_id,"ward_name":wards.ward_name,"ward_type_id":wards.ward_type.id,"ward_type_name":wards.ward_type.ward_type_name,"facility_id":facility_id}).then(function(data) {

          if(data.data.status ==0){
            $scope.wards = null;
            sweetAlert(data.data.data, "", "error");
          }else{
            $scope.wards = null;
            sweetAlert(data.data.data, "", "success");            				  					


          }




        });  

      } 


    }


    $scope.addBed= function (wards,ward_id) {
      //var ward_type=wards.ward_type;
      if (angular.isDefined(wards)==false) {
        return sweetAlert("Please Enter BED NUMBER "+ward_id, "", "error");
      }	   
      else if (angular.isDefined(wards.bed_type)==false) {
        return sweetAlert("Please Enter BED TYPE "+ward_id, "", "error");
      }
      else{
        console.log(wards.bed_type);
        $http.post('/api/saveBeds',{"bed_name":wards.bed_number,"bed_type_id":wards.bed_type.id,"ward_id":ward_id,"facility_id":facility_id,"eraser":1}).then(function(data) {           
          if(data.data.status ==0){

            sweetAlert(data.data.data, "", "error");
          }else{
            // $scope.wards = null;
            sweetAlert(data.data.data, "", "success");  					

          }




        });  

      } 


    }



    var beds_number=0;
    var beds=[];
    var wards=[];
    $scope.getWardDetails= function (ward_id) {

      $http.get('/api/getWardOneInfo/'+ward_id).then(function(data){
        wards=data.data;		 
      }); 
      $http.get('/api/getBedsNumber/'+ward_id).then(function(data){
        beds_number=data.data;
      });

      $http.get('/api/getBeds/'+ward_id).then(function(data) {
        beds=data.data; 	
        //console.log(beds_number);			  
        var object =angular.extend({},wards, beds_number); 
        //console.log(beds_number);				 
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/manageWardBeds.html',
          size: 'lg',
          animation: true,
          controller: 'wardManagementModal',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });

        modalInstance.result.then(function(quick_registration) {
          $scope.quick_reg = quick_registration;
          console.log($scope.quick_reg);
        });	

      });

    }	



    $scope.getBedDetails=function (bed_id,ward_id,bed_available) {					
      $http.get('/api/OnThisBed/'+bed_id).then(function(data) {
        beds=data.data; 

        if(data.data.status ==0){

          sweetAlert(data.data.data, "", "error");
        }else{
          var bed_details=bed_available+ ' TAKEN BY '+ data.data.data;
          sweetAlert(bed_details, "", "success");  					

        }			  

      });

    }





    var patapata="";
    $scope.getAdmissionNotes= function (patient) {				
      $http.post('/api/getInstructions',{"patient_id":patient}).then(function(data) {
        $scope.AdmissionNotes=data.data;
        patapata=$scope.AdmissionNotes;
        console.dir($scope.AdmissionNotes);
      });

    }

    $scope.getProffesions= function () {
      $http.get('/api/professional_registration').then(function(data) {
        $scope.professsionals=data.data;
        //console.log($scope.professsionals)

      });

    }

    $scope.giveBed= function (bed_id,last_name,ward_id,admission_id,bed_available) {

      // sweetAlert(bed_id+' '+bed_available, "", "success"); 
      console.log(admission_id);

      $http.post('/api/giveBed',{"bed_id":bed_id,"ward_id":ward_id,"admission_id":admission_id,"bed_available":bed_available}).then(function(data) {
        $scope.giveBeds=data.data;
        console.log($scope.giveBeds);

        if(data.data.status ==0){					
          sweetAlert(data.data.data, "", "error");
        }else{
          var bed_details=bed_available+ ' SUCCESSFULLY ASSIGNED TO '+last_name;
          sweetAlert(bed_details, "", "success");  					

        }	


      });


    }	


    $scope.getAdmPatient= function (admitted) {
      $scope.selectedPatient=admitted;
      console.log($scope.selectedPatient);
    }

    $scope.getPatientsSentToTheatre= function () {

      $http.get('/api/getPatientSentToTheatre').then(function(data){
        $scope.patientsSentToTheatres=data.data;			
      });
    }



    $scope.getAdmission= function (patient,ward_id,admission_id) {



      $http.post('/api/getInstructions',{"patient_id":patient,"ward_id":ward_id}).then(function(data) {
        $scope.AdmissionNotes=data.data;
        patapata=$scope.AdmissionNotes;
        console.dir($scope.AdmissionNotes);
      });

      $http.get('/api/getPatientInfo/'+patient).then(function(data) {
        $scope.quick_registration=data.data;


        var object = angular.extend({}, $scope.quick_registration, patapata);        
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/bedAllocation.html',
          size: 'lg',
          animation: true,
          controller: 'nursingCareModal',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });

        modalInstance.result.then(function(quick_registration) {
          $scope.quick_reg = quick_registration;
          console.log($scope.quick_reg);
        });	

      });

    }	



    $scope.assignToTheatre= function (patient,ward_id,admission_id) {



      $http.get('/api/getFullAdmitedPatientInfo/'+admission_id).then(function(data) {
        $scope.admissions=data.data;
        console.log(data.data);
        console.log(admission_id);		
        var object = $scope.admissions;        
        var modalInstance = $uibModal.open({
          templateUrl: '/views/modules/nursing_care/postPatientsToTheatre.html',
          size: 'lg',
          animation: true,
          controller: 'postPatientsToTheatreModal',
          resolve:{
            object: function () {
              return object;
            }
          }				  
        });
      });
    }
  }})();

/**
 * Created by USER on 2017-02-13.
 */

(function() {
  'use strict';
  angular
    .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

      function fn_link(scope, element, attrs) {
        var onChange = $parse(attrs.ngFiles);
        element.on('change', function (event) {
          onChange(scope, { $files: event.target.files });
        });
      }

      return {
        link: fn_link
      };
    }]).controller('rolesController', rolesController);

  function rolesController($http, $auth, $rootScope,$state,$location,$scope,toastr) {

    var time_sent_text;

    var user=$rootScope.currentUser;
    var user_name=$rootScope.currentUser.id;
    var facility_id=$rootScope.currentUser.facility_id;
    $scope.messages_counts=0;

    $scope.messages = ['Write your notification to staff members'];
    var sender_text="Hi, "+$rootScope.currentUser.name;
    $scope.messages.push({
      time: new Date().toISOString().replace(/T/, ' ').substr(0, 19),
      text: sender_text,
      own: 'their'
    });



    $scope.countNotifications = function(sms) {


      $http.get('/api/getNotifications').then(function(data) {
        var message_sent = data.data[3];
        var messages_received = data.data[1][1];
        $scope.messages_counts = data.data[2];
        $scope.readMessages=message_sent;

        $scope.messages.push({
          time: messages_received.updated_at,
          text: messages_received.message,
          own: 'their'
        });

        $scope.messages.push({
          time: time_sent_text,
          text: sms,
          own: 'mine'
        });
        toastr.success('','Message Sent');
        $scope.my_text=null;
      });
    };



    $scope.countNotifications();


    $scope.add = function(sms) {

      var sendSmsToGroup={"delete_sms":1,"receiver_id":null,"sender_id":user_id,"message":sms};

      $http.post('/api/sendSmsToGroup',sendSmsToGroup).then(function(data) {
        var message_sent = data.data[0][0];
        var messages_received = data.data[1][1];
        var time_sent_text = data.data[2][0];
        $scope.messages_counts = data.data[3];

        $scope.messages.push({
          time: messages_received.updated_at,
          text: messages_received.message,
          own: 'their'
        });

        $scope.messages.push({
          time: time_sent_text,
          text: sms,
          own: 'mine'
        });
        toastr.success('','Message Sent');
        $scope.my_text=null;
      });
    };



    var formdata = new FormData();

    $scope.getTheFiles = function ($files) {
      angular.forEach($files, function (value, key) {
        formdata.append(key, value);

      });
      formdata.append('photo_for',user_name);
    };


    // NOW UPLOAD THE FILES.
    $scope.uploadFiles = function () {

      var request = {
        method: 'POST',
        url: '/api/'+'fileupload',
        data: formdata,
        headers: {
          'Content-Type': undefined
        }

      };

      // SEND THE FILES.
      $http(request).then(function (data) {
        console.log(request);
        swal({
          title: '',
          html: $('<div>')
            .addClass('some-class')
            .text(''+data.data+''),
          animation: false,
          customClass: 'animated tada'
        });


      })
      .then(function () {
      });
    }





    $scope.runViews= function(){

      $http.get('/api/userView/'+facility_id).then(function(data) {
        $scope.icons=data.data;

        var getstatus=data.status;
        if(getstatus==200){
          var getdata='ALL SYSTEM VIEWS WERE SUCCESSFULLY CREATED';
        }
        else{
          var getdata='SOME THING WENT WRONG,PLEASE CONTACT DATABASE ADMINISTRATOR TO REVIEW YOUR TABLE STRUCTURE';


        }            
        swal({
          title: '',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });				  

      });		
    }


    $http.get('/api/getPerm').then(function(data) {
      $scope.perms=data.data;
      console.log($scope.perms);		  

    });		

    $http.get('/api/geticon').then(function(data) {
      $scope.icons=data.data;			  
    });


    $http.get('/api/getUserImage/'+user_name).then(function(data) {

      console.log(data);

      if (data.data.length > 0) {
      $scope.photo = '/uploads/'+ data.data[0].photo_path;
      }

    });

    $http.get('/api/getRoles').then(function(data) {
      $scope.roles=data.data;

    });


    $http.get('/api/user_list').then(function(data) {
      $scope.users=data.data;	  
      console.log($scope.users);
    });


    $scope.savePermRoles= function(permRoles){					

      var perm_list=$scope.labcartsxx;	
      angular.forEach(perm_list, function(value, key) {
        console.log(key + ': ' + value);
      });
      /**
        $http.post('/api/perm_role',$scope.labcartsxx).then(function(data) {
        console.log(data);	            
        });	**/				
    }



    $scope.saveModules= function(modules){
      var menu={'main_menu':1,'module':modules.module,'title':modules.title,'glyphicons':modules.glyphicons.icon_class}; 
      console.log(menu);		
      $http.post('/api/addPermission',menu).then(function(data) {
        var getstatus=data.status;
        var getdata=data.data;            
        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      }).then(function(data){							
        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      });					
    }


    $scope.saveRoles= function(roles){	
      var title = roles.title;
      var parents = roles.parent;

      var save_roles={'title':title,'parent':parents}; 


      console.log(save_roles);
      $http.post('/api/addRoles',save_roles).then(function(data) {
        var getstatus=data.status;
        var getdata=data.data;

        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });
      }).then(function(data){

        swal({
          title: ''+getstatus+'',
          html: $('<div>')
            .addClass('some-class')
            .text(''+getdata+''),
          animation: false,
          customClass: 'animated tada'
        });					
      });
    }

    $scope.logout = function() {           
      // Remove the authenticated user from local storage
      localStorage.removeItem('user');

      // Flip authenticated to false so that we no longer
      // show UI elements dependant on the user being logged in
      $rootScope.authenticated = false;

      // Remove the current user info from rootscope
      $rootScope.currentUser = null;
      event.preventDefault();
      $state.go('auth');
    };

    var user_id=$rootScope.currentUser.id;
    var state_name=$state.current.name;

    $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
      $scope.menu=data.data;
      console.log($scope.menu);

    });

    $scope.labcartsxx = [];	

    $scope.checkTest = function(item,permRoles){

      if (angular.isDefined(permRoles)==false) {
        swal({
          title: 'ERROR:',
          html: $('<div>')
            .addClass('some-class')
            .text('PLEASE SELECT THE ROLE ,FROM SEARCH BOX ABOVE BEFORE PROCEED'),
          animation: false,
          customClass: 'animated tada'
        });
      }else{
        var permission_id=item.id;
        var role_id=permRoles.role.id;

        var perm_roles={'permission_id':permission_id,'role_id':role_id,'grant':1}; 

        $http.get('/api/getPermName/'+permission_id).then(function(data) {
          $scope.perms=data.data;
          console.log(role_id);
          var perm_name='Permission '+$scope.perms+' was selected and SAVED in the SYSTEM';

          $http.post('/api/perm_role',perm_roles).then(function(data) {
            var getstatus=data.status;
            var getdata=data.data;

            swal({
              title: ''+getstatus+'',
              html: $('<div>')
                .addClass('some-class')
                .text(''+getdata+''),
              animation: false,
              customClass: 'animated tada'
            });


          });	

        });

        if((item.selected)==true){		     
        }
        else if((item.selected)==false){ 
          var indexremove =$scope.labcartsxx.indexOf(item);
          $scope.labcartsxx.splice(indexremove, 1);
        }

      }
    }

    $scope.checkUserPerms = function(item,permUsers){

      if (angular.isDefined(permUsers)==false) {
        swal({
          title: 'ERROR:',
          html: $('<div>')
            .addClass('some-class')
            .text('PLEASE SELECT THE USER ,FROM SEARCH BOX ABOVE BEFORE PROCEED'),
          animation: false,
          customClass: 'animated tada'
        });
      }else{
        var permission_id=item.id;
        var user_id=permUsers.user.id;
        console.log(user_id);
        var perm_users={'permission_id':permission_id,'user_id':user_id,'grant':1}; 

        $http.get('/api/getPermName/'+permission_id).then(function(data) {
          $scope.perms=data.data;
          var perm_name='Permission '+$scope.perms+' was selected and SAVED in the SYSTEM';

          $http.post('/api/perm_user',perm_users).then(function(data) {
            var getstatus=data.status;
            var getdata=data.data;

            swal({
              title: '',
              html: $('<div>')
                .addClass('some-class')
                .text(''+getdata+''),
              animation: false,
              customClass: 'animated tada'
            });
          });

        });
      }
    };
  }})();

/**
 * Created by USER on 2017-02-14.
 */
 
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('userSettingController', userSettingController);

    function userSettingController($http, $auth, $rootScope,$state,$location,$scope) {
		
		//loading menu
		var user_id=$rootScope.currentUser.id;
              $http.get('public/api/getUsermenu/'+user_id ).then(function(data) {
                  $scope.menu=data.data;
				  //console.log($scope.menu);
            
            });

        // users lis
        $http.get('public/api/patientsearch').then(function(data) {

            //console.log(data)
            $scope.patients=data.data;


        });

        $http.get('public/api/facility_list').then(function(data) {
            $scope.facilities=data.data;

        });
        $http.get('public/api/professional_registration').then(function(data) {
            $scope.professsionals=data.data;
           //console.log($scope.professsionals)

        });
        $scope.user_list=function () {
            $http.get('public/api/user_list').then(function(data) {
                $scope.users=data.data;
                //console.log($scope.users)

            });
        }

        $scope.user_list();

        $scope.user_registration=function (user) {

             $http.post('public/api/user_registration',user).then(function(data) {

                 $scope.user_list();
                 var sending=data.data;
                 swal(
                     'Feedback..',
                     sending,
                     'success'
                 )
            });
        }

        //  update


        $scope.user_update=function (user) {

            swal({
                title: 'Are you sure?',
                text: "  ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.post('public/api/user_update', user).then(function (data) {


                    $scope.user_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'User Details Updated..',
                        'success'
                    )
                })
            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        {
                            timer:200,
                            title:'Cancelled'
                        }
                    )
                }
            })



        }


//  delete
        $scope.user_delete=function (user,id) {

            swal({
                title: 'Are you sure?',
                text: "  ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('public/api/user_delete/'+id).then(function(data) {


                    $scope.user_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'User Deleted....',
                        'error'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        {
                            timer:200,
                            title:'Cancelled'
                        }
                    )
                }
            })



        }

        $scope.password=function(password){

         console.log(password);
          var  user_password={'password':password,'user_id':user_id};
            console.log(user_password);
            $http.post('public/api/check_password',user_password).then(function(data) {
 $scope.passwordCheck=data.data;

                console.log(data.data);
            })
        }

        $scope.resset_password=function(resset){

          var new_password=resset.new_password;
          var re_password=resset.re_password;
          var  user_password={'password':resset.new_password,'user_id':user_id};
if(new_password==re_password){
    $http.post('public/api/reset_password',user_password).then(function(data) {
        var reset_password=data.data;

        swal(
            '',
            reset_password,
            'success'
        )

    })
}
            else{
    swal(
        '',
        'Password Mismatch',
        'error'
    )
}
            $scope.resset={};
            $scope.resset="";
        }




    }

})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

  'use strict';

  angular
    .module('authApp')
    .controller('countryController', countryController);

  function countryController($http, $auth, $rootScope,$state,$location,$scope) {

    //country_zones Get Data From the database
    $scope.getcountry_zone=function () {
      $http.get('public/api/getcountry_zone').then(function(data) {
        $scope.countryzones=data.data;
      });
    }

    //Country Zone Registrations
    $scope.country_zone_registration=function (countryzone) {
      //console.log(countryzone);
      var comit=confirm('Are you sure you want to Register '+countryzone.country_zone);
      if(comit) {
        $http.post('public/api/country_zone_registration',countryzone).then(function(data) {
        });
      }
    }		

    //country zone Update
    $scope.updatecountryzone=function (countryzone) {
      console.log(countryzone);
      var comit=confirm('Are you sure you want to Update '+countryzone.country_zone);
      if(comit) {
        $http.post('public/api/update_country_zone', countryzone).then(function (data) {
          $scope.getcountry_zone();
        })
      }
      else{
        return false;
      }
    }

    //country zone delete
    $scope.deletecountryzone=function (countryzones) {
      var comit=confirm('Are you sure you want to delete '+countryzones.country_zone);
      if(comit){
        $http.get('public/api/deletecountryzone/'+countryzones.id).then(function(data) {
          $scope.getcountry_zone();
        })
      }
      else {
        return false;
      }
    }
    $scope.getcountry_zone();


    //country Get Data From the database
    $scope.getcountry=function () {
      $http.get('public/api/getcountries').then(function(data) {
        $scope.country=data.data;
      });
    }

    //Country Registrations
    $scope.country_name_registration=function (countr) {
      console.log(countr);
      var comit=confirm('Are you sure you want to Register '+countr.country_name);
      if(comit) {
        $http.post('public/api/country_name_registration',countr).then(function(data) {
          $scope.getcountry();
        });
      } 
    }
    $scope.getcountry();



    //country Update
    $scope.updatecountry=function (country) {
      var comit=confirm('Are you sure you want to Update '+country.country_name);
      if(comit) {
        $http.post('public/api/update_country_name', country).then(function (data) {
          $scope.getcountry();
        })
      }
      else{
        return false;
      }
    }
    $scope.getcountry();

    //Country delete
    $scope.deletecountry=function (country) {
      var comit=confirm('Are you sure you want to delete'+" "+country.country_name);
      if(comit){
        $http.get('public/api/deletecountry/'+country.id).then(function(data) {
          $scope.getcountry();
        })
      }
      else {
        return false;
      }
    }
    $scope.getcountry();

  }

})();

(function() {
  'use strict';

  angular.module('authApp').directive('userAvatar', function() {
    return {
      replace: true,
      template: '<svg class="user-avatar" viewBox="0 0 128 128" height="64" width="64" pointer-events="none" display="block" > <path fill="#FF8A80" d="M0 0h128v128H0z"/> <path fill="#FFE0B2" d="M36.3 94.8c6.4 7.3 16.2 12.1 27.3 12.4 10.7-.3 20.3-4.7 26.7-11.6l.2.1c-17-13.3-12.9-23.4-8.5-28.6 1.3-1.2 2.8-2.5 4.4-3.9l13.1-11c1.5-1.2 2.6-3 2.9-5.1.6-4.4-2.5-8.4-6.9-9.1-1.5-.2-3 0-4.3.6-.3-1.3-.4-2.7-1.6-3.5-1.4-.9-2.8-1.7-4.2-2.5-7.1-3.9-14.9-6.6-23-7.9-5.4-.9-11-1.2-16.1.7-3.3 1.2-6.1 3.2-8.7 5.6-1.3 1.2-2.5 2.4-3.7 3.7l-1.8 1.9c-.3.3-.5.6-.8.8-.1.1-.2 0-.4.2.1.2.1.5.1.6-1-.3-2.1-.4-3.2-.2-4.4.6-7.5 4.7-6.9 9.1.3 2.1 1.3 3.8 2.8 5.1l11 9.3c1.8 1.5 3.3 3.8 4.6 5.7 1.5 2.3 2.8 4.9 3.5 7.6 1.7 6.8-.8 13.4-5.4 18.4-.5.6-1.1 1-1.4 1.7-.2.6-.4 1.3-.6 2-.4 1.5-.5 3.1-.3 4.6.4 3.1 1.8 6.1 4.1 8.2 3.3 3 8 4 12.4 4.5 5.2.6 10.5.7 15.7.2 4.5-.4 9.1-1.2 13-3.4 5.6-3.1 9.6-8.9 10.5-15.2M76.4 46c.9 0 1.6.7 1.6 1.6 0 .9-.7 1.6-1.6 1.6-.9 0-1.6-.7-1.6-1.6-.1-.9.7-1.6 1.6-1.6zm-25.7 0c.9 0 1.6.7 1.6 1.6 0 .9-.7 1.6-1.6 1.6-.9 0-1.6-.7-1.6-1.6-.1-.9.7-1.6 1.6-1.6z"/> <path fill="#E0F7FA" d="M105.3 106.1c-.9-1.3-1.3-1.9-1.3-1.9l-.2-.3c-.6-.9-1.2-1.7-1.9-2.4-3.2-3.5-7.3-5.4-11.4-5.7 0 0 .1 0 .1.1l-.2-.1c-6.4 6.9-16 11.3-26.7 11.6-11.2-.3-21.1-5.1-27.5-12.6-.1.2-.2.4-.2.5-3.1.9-6 2.7-8.4 5.4l-.2.2s-.5.6-1.5 1.7c-.9 1.1-2.2 2.6-3.7 4.5-3.1 3.9-7.2 9.5-11.7 16.6-.9 1.4-1.7 2.8-2.6 4.3h109.6c-3.4-7.1-6.5-12.8-8.9-16.9-1.5-2.2-2.6-3.8-3.3-5z"/> <circle fill="#444" cx="76.3" cy="47.5" r="2"/> <circle fill="#444" cx="50.7" cy="47.6" r="2"/> <path fill="#444" d="M48.1 27.4c4.5 5.9 15.5 12.1 42.4 8.4-2.2-6.9-6.8-12.6-12.6-16.4C95.1 20.9 92 10 92 10c-1.4 5.5-11.1 4.4-11.1 4.4H62.1c-1.7-.1-3.4 0-5.2.3-12.8 1.8-22.6 11.1-25.7 22.9 10.6-1.9 15.3-7.6 16.9-10.2z"/> </svg>'
    };
  });

  angular.module('authApp').directive('avatarWithText', function() {
    return {
      replace: true,
      templateUrl: '/views/avatar-with-title.html'
    };
  });
})();

(function() {
  'use strict';

  angular.module('authApp').directive('hamburger', [ function() {
    return {
      restrict: 'E',
      scope: false,
      replace: true,
      template: '<md-button ng-if="showHamburger()" ng-click="showLeft()" class="hamburger">'+
        '<ng-md-icon icon="menu" size="48"></ng-md-icon>'+
        '</md-button>'
    };
  }]);

  angular.module('authApp').directive('appHeader', [ function() {
    return {
      restrict: 'E',
      scope: false,
      replace: true,
      templateUrl: '/views/app-header.html'
    };
  }]);
})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('maritalController', maritalController);

    function maritalController($http, $auth, $rootScope,$state,$location,$scope) {
				
		//Marital Status Registrations
        $scope.marital_registration=function (marital) {
		var comit=confirm('Are you sure you want to Register '+marital.marital_status);
		if(comit) {
		$http.post('public/api/marital_registration',marital).then(function(data) {
		});
		 }
        }
		
		//Marital Get Data From the database
        $scope.getmarital_status=function () {
            $http.get('public/api/getmarital_status').then(function(data) {
                $scope.maritalstatus=data.data;
            });
        } 
		
		//Marital Status Update
        $scope.updatemaritalstatus=function (maritalstatus) {
		var comit=confirm('Are you sure you want to Update '+maritalstatus.marital_status);
		if(comit) {
		$http.post('public/api/updatemaritalstatus', maritalstatus).then(function (data) {
		})
		$scope.getmarital_status();
		}
		else{
			return false;
		}
        }
		$scope.getmarital_status();
		
		
		//Marital Status delete
        $scope.deletemaritalstatus=function (maritalstatus) {
		var comit=confirm('Are you sure you want to delete '+maritalstatus.marital_status);
		if(comit){
		$http.get('public/api/deletemaritalstatus/'+maritalstatus.id).then(function(data) {
			$scope.getmarital_status();
		})
		}
		else {
		return false;
		}
		}
		$scope.getmarital_status();
					
	}
})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('occupationController', occupationController);

    function occupationController($http, $auth, $rootScope,$state,$location,$scope) {
				
		//Occupation Get Data From the database
        $scope.getoccupation=function () {
            $http.get('/api/getoccupation').then(function(data) {
                $scope.occupation=data.data;
            });
        }		
		
		//Occupation Registrations
        $scope.occupation_registration=function (occupati) {
			//var fr={'occupation_name':occupation.occupation_name};
			//console.log(fr);
			//console.log(occupation);
		 var comit=confirm('Are you sure you want to Register '+occupati.occupation_name);
		if(comit) {
		$http.post('/api/occupation_registration',occupati).then(function(data) {
		});
		 }
		 $scope.getoccupation(); 
        }
		
		//Occupation Update
        $scope.updateoccupation=function (occupation) {
		var comit=confirm('Are you sure you want to Update '+occupation.occupation_name);
		if(comit) {
		$http.post('/api/updateoccupation', occupation).then(function (data) {
		})
		$scope.getoccupation();
		}
		else{
			return false;
		}
        }
		$scope.getoccupation();
		
		
		//Occupation delete
        $scope.deleteoccupation=function (occupation) {
		var comit=confirm('Are you sure you want to delete '+occupation.occupation_name);
		if(comit){
		$http.get('/api/deleteoccupation/'+occupation.id).then(function(data) {
			$scope.getoccupation();
		})
		}
		else {
		return false;
		}
		}
		$scope.getoccupation();
			
	}

})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('professionalController', professionalController);

    function professionalController($http, $auth, $rootScope,$state,$location,$scope) {


	  //Professioals Get Data From the database
        $scope.getprofessional=function () {

            $http.get('/api/professional_registration').then(function(data) {
                $scope.professional=data.data;
            });
        }
	
            //Professionals Registrations
        $scope.professional_registration=function (prof) {
			var comit=confirm('Are you sure you want to Register '+prof.prof_name);
            if(comit) {
            $http.post('/api/professional_registration',prof).then(function(data) {
                //$scope.prof.prof_name="";
				//$scope.region_list();
				$scope.getprofessional();			
            });
			 }
        }
		 
		
		//Professionals Update
        $scope.update=function (professional) {
            var comit=confirm('Are you sure you want to Update '+professional.prof_name);
            if(comit) {
                $http.post('/api/update_professional', professional).then(function (data) {
                    $scope.good = professional.prof_name + " " + 'Successful Updated';
                    $scope.kol = data.status;
                    //$scope.region_list();
					$scope.getprofessional();
                })
            }
            else{
                return false;
            }
        }
		
		//Professionals delete
        $scope.deleteprof=function (professional) {
            var comit=confirm('Are you sure you want to delete'+" "+professional.prof_name);
            if(comit){
                $http.get('/api/deleteprof/'+professional.id).then(function(data) {
                   $scope.getprofessional();
                })
            }
            else {
                return false;
            }
            }
		
    }

})();

/**
 * Created by Jeph on 2017-03-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('deviceModal',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.deviceSetting = object;

            var user_id = $rootScope.currentUser.id;
            var facility_id=$rootScope.currentUser.facility_id;


            $scope.equipmentOnOff = function(id,device){
                var equip_id=device;
                var status_named=id.status_name.id;

                var equipmentonnoff={
                    'equipment_name':equip_id,
                    'equipment_status':status_named,
                    'user_id':user_id,
                    'facility_id':facility_id


                };
               console.log(equipmentonnoff);

                $http.post('/api/equipmentOnOff',equipmentonnoff).then(function(data) {

                    console.log(data.data);
                    swal(
                        'Equipment',
                        'Updated Successfully!',
                        'success'
                    )


                });
            };

        }]);
})();

/**
 * Created by APPLE on 19/03/2017.
 */
(function () {

    'use strict';

    angular
        .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

        function fn_link(scope, element, attrs) {
            var onChange = $parse(attrs.ngFiles);
            element.on('change', function (event) {
                onChange(scope, { $files: event.target.files });
            });
        };

        return {
            link: fn_link
        }
    } ])


    var app = angular.module('authApp');

    app.controller('queManagementModal',

        ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

                console.log(object);
                $scope.XrayQue = object;
                var user_name=$rootScope.currentUser.id;
                var facility_id=$rootScope.currentUser.facility_id;
                var formdata = new FormData();





                // NOW UPLOAD XRAY FILES.
                $scope.xrayUpload = function (explanation,orders,mrns,patient_ids) {


                    console.log(explanation);
                    console.log(orders);
                    console.log(mrns);
                    console.log(patient_ids);

                    formdata.append('explanation',explanation.explanation);
                    formdata.append('mrn',mrns);
                    formdata.append('order',orders);
                    formdata.append('patient_id',patient_ids);
                    var request = {
                        method: 'POST',
                        url: '/api/'+'xrayImage',
                        data: formdata,
                        headers: {
                            'Content-Type': undefined
                        }

                    };

                    // SEND THE FILES.
                    $http(request).then(function (data) {
                        console.log(request);
                        swal({
                            title: '',
                            html: $('<div>')
                                .addClass('some-class')
                                .text(''+data.data+''),
                            animation: false,
                            customClass: 'animated tada'
                        });


                    })
                        .then(function () {
                        });
                }




            }]);





}());

/**
 * Created by japhari on 02/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

        function fn_link(scope, element, attrs) {
            var onChange = $parse(attrs.ngFiles);
            element.on('change', function (event) {
                onChange(scope, { $files: event.target.files });
            });
        };

        return {
            link: fn_link
        }
    } ])

        .controller('radiologyController', radiologyController);

    function radiologyController($http, $auth, $rootScope,$state,$location,$scope,$timeout,$interval,$window,$uibModal) {


        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user_name=$rootScope.currentUser.id;
        var username=$rootScope.currentUser.name;
        var facility_id=$rootScope.currentUser.facility_id;
        var formdata = new FormData();



        $scope.getTheFiles = function ($files) {

            angular.forEach($files, function (value, key) {
                formdata.append(key, value);

            });

        };

        $http.get('/api/facility_list').then(function(data) {
            $scope.facilities=data.data;

        });



        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };


        //Xrays Image
        $scope.getXrays=function () {

            $http.get('/api/getXrayImage').then(function(data) {
                $scope.Xrays=data.data;

            });


        }

        //Diagnosed Patients
        $scope.getDiagnoses=function (patient_id) {
           console.log(patient_id);

            $http.get('/api/getdiagnosis/'+patient_id).then(function(data) {
                $scope.diagnosed=data.data;

            });


        }
        $scope.getXrays();
        $scope.getDiagnoses();
$scope.loadPatientRequest=function (request) {
    $scope.selectedPatients=request;
    console.log(request)
}

//radiology patients Queue
        $scope.imageStatus = function(patient_id){


            console.log(patient_id);

            $http.get('/api/imageStatus/'+patient_id).then(function(data) {

                $scope.patient_orders=data.data;

                console.log(data.data);
            });
        };

//Verify Radiology Images

        $scope.VerifyXray = function(id,remarks){
console.log(remarks);
var verify_user = user_name;
            var VerifyXrays={
                'remarks':remarks,
                'verify_user':verify_user,
                'id':id
            };
            console.log(VerifyXrays);

            $http.post('/api/VerifyXrays',VerifyXrays).then(function(data) {

                console.log(data.data);
                swal(
                    'Updated Successfully',
                    'Image  Verified!',
                    'success'
                )


            });
        };

        //Delete Imaging before validating

        $scope.DeleteXray = function(id){
         var del_user = user_name;
            console.log(del_user);
            var DeleteXray={
                'verify_user':del_user,
                'id':id
            };
            console.log(del_user);
            $http.post('/api/DeleteXray',DeleteXray).then(function(data) {

                console.log(data.data);

                swal(
                    'Deleted Successfully',
                    'Findings Removed',
                    'success'
                )


            });
        };


        $scope.PatientsXray = function(){



            $http.get('/api/PatientsXray').then(function(data) {

                console.log(data.data);

                 $scope.gpatientsXarayss=data.data;

            });
        };
        //SEARCH PATIENT IN XRAY

        var patients=[];
        $scope.SearchPatientInXray=function ($value) {

            var SearchKey = {
                'searchKey': $value,
                'user_id': user_name,
                'facility_id': facility_id
            };
            if ($value.length>3){
                $http.post('/api/SearchPatientInXray', SearchKey).then(function (data) {

                    patients = data.data;
                });
        }
            return patients;
        }

        $scope.loadPatientRequest1=function (patient_id) {


            var patientRequest={
                'patient_id':patient_id,
                'facility_id':facility_id

            };

            console.log(patientRequest);

            $http.post('/api/loadPatientRadiologyRequest', patientRequest).then(function(data) {
            $scope.requestPatient=data.data;

            });
        }

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });
        var user_id=$rootScope.currentUser.id;
        $scope.printUserMenu(user_id);



        $http.get('/api/getradiologypatients').then(function(data) {
            $scope.radiologyList=data.data;

        });




        //Save Imaging Findings
        $scope.SaveImages = function(explanation,order){
            console.log(explanation);
            if (explanation==undefined)
            {
                swal(
                    username,
                    'Findings are Missed',
                    'error'
                )
            }
            else if (explanation=="")
            {
                swal(
                    username,
                    'Findings are Missed',
                    'error'
                )
            }

            else
            {

                var ImageData={
                    'order_id':order,
                    'description':explanation,
                    'post_user':user_name,
                    'confirmation_status':0,
                    'eraser':1

                };
                swal({
                    title: username,
                    text: "Are you sure you want to send this Findings",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, send it!'
                }).then(function () {



                $http.post('/api/SaveImage',ImageData).then(function(data) {

                    console.log(data.data);
                    swal(
                        'Registered Successfully',
                        'Findings sent!',
                        'success'
                    )

                });

                })
            }
        }




        // NOW UPLOAD XRAY FILES.
        $scope.xrayImage = function (explanation,orders,mrns) {

        var id_user = user_name;
        console.log(id_user);



            formdata.append('explanation',explanation.explanation);
            formdata.append('mrn',mrns);
            formdata.append('order',orders);
            formdata.append('post_user',id_user);
            var request = {
                method: 'POST',
                url: '/api/'+'xrayImage',
                data: formdata,
                headers: {
                    'Content-Type': undefined
                }

            };

            swal({
                title: username,
                text: "Are you sure you want to Upload Image",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, send it!'
            }).then(function () {


            // SEND THE FILES.
            $http(request).then(function (data) {
                console.log(request);
                swal({
                    title: '',
                    html: $('<div>')
                        .addClass('some-class')
                        .text(''+data.data+''),
                    animation: false,
                    customClass: 'animated tada'
                });


            })
                .then(function () {
                });
            })
        }



    //    start

        $scope.loadPatientRequest= function (patient_id) {

            var object = angular.extend({},patient_id);

            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/radiology/XrayQueModal.html',
                size: 'lg',
                animation: true,
                controller: 'queManagementModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });



        }


        //    end


        //    TABS


        $scope.tabs = [
            { title:'Dynamic Title 1', content:'Dynamic content 1' },
            { title:'Dynamic Title 2', content:'Dynamic content 2', disabled: true }
        ];


        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };


        //    @END OF TABS

        //Accordion

        $scope.oneAtATime = true;




        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        //Accordion end

    }





})();

/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('radiologyDepartmentController', radiologyDepartmentController);

    function radiologyDepartmentController($http, $auth, $rootScope,$state,$location,$scope,$window,$uibModal,toastr) {




        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var username=$rootScope.currentUser.name;
        var facility_id=$rootScope.currentUser.facility_id;


        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }

        //Return equipment lists
        $scope.equipments_list=function () {
            $http.get('/api/getEquipmentStatus').then(function(data) {
                $scope.equipments=data.data;

            });


            }

        //Department list
        $scope.departments_list=function () {
            $http.get('/api/getdepartments').then(function(data) {
                $scope.departments=data.data;

            });


        }
        //Registered Departments
        $scope.departments_registered=function () {
            $http.get('/api/getRegistered_departments').then(function(data) {
                $scope.registered=data.data;

            });


        }

        //Equipments list
        $scope.registered_list=function () {
            $http.get('/api/getEquipments_list').then(function(data) {
                $scope.getEquipmentStatus=data.data;

            });


        }

        //Accordion

        $scope.oneAtATime = true;

        //Users Sub-Departments
        // $scope.getUsersSubdepartments=function () {
        //
        //     $http.get('/api/usersSubdepartments/'+facility_id).then(function(data) {
        //         $scope.imagingusers=data.data;
        //
        //     });
        //
        //
        // }

        //Equipment Status
        $scope.getStatus=function () {

            $http.get('/api/getEquipments_status/'+facility_id).then(function(data) {
                $scope.statusEquipment=data.data;

            });


        }
        $scope.sum = function () {
            var  total = 0;
            for(var i = 0; i < $scope.rejesta.length ; i++) {
                total += ($scope.rejesta[i].sub_total);
            }
            return total;
        }

        $scope.getRejesta = function (item) {
            console.log(item);
            $http.post('/api/getRejestaReport',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.rejesta = data.data;
                $scope.selIdx= -1;
                $scope.detailedTotal = $scope.sum();
                $scope.selData=function(d,idx){
                    $scope.selectedData=d;
                    $scope.selIdx=idx;
                }
                $scope.isSelData=function(d){
                    return $scope.selectedData===d;
                }
            });
        }

        $scope.getrequestedInvestigation = function (item) {
            console.log(item);
            $http.post('/api/requestedInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.investigation = data.data;

            });
        }

        $scope.getSkullInvestigation = function (item) {
            console.log(item);
            $http.post('/api/skullInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.skull = data.data;

            });
        }
        $scope.getChestInvestigation = function (item) {
            console.log(item);
            $http.post('/api/chestInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.chest = data.data;

            });
        }
        $scope.getAbdomenInvestigation = function (item) {
            console.log(item);
            $http.post('/api/abdomenInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.abdomen = data.data;

            });
        }
        $scope.getSpineInvestigation = function (item) {
            console.log(item);
            $http.post('/api/spineInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.spine = data.data;

            });
        }
        $scope.getPelvisInvestigation = function (item) {
            console.log(item);
            $http.post('/api/pelvisInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.pelvis = data.data;

            });
        }
        $scope.getExtremitiesInvestigation = function (item) {
            console.log(item);
            $http.post('/api/extremitiesInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.extremities = data.data;

            });
        }
        $scope.getHSGInvestigation = function (item) {
            console.log(item);
            $http.post('/api/HSGInvestigation',
                {
                    "start":item.start,
                    "end":item.end,
                    "facility_id":facility_id
                }).then(function (data) {
                $scope.hsg = data.data;

            });
        }

        //Rejesta Report
        $scope.getRejestaReport=function () {

            $http.get('/api/getRejestaReport/'+facility_id).then(function(data) {
                $scope.Rejesta_Report=data.data;

            });


        }
        //Users before assigning departments
        $scope.geuserdepartment=function () {

            $http.get('/api/getUserDepartment/'+facility_id).then(function(data) {
                $scope.userdepartment=data.data;

            });


        }
        //Service Data
        $scope.getInvestigationData=function () {

            $http.get('/api/investigationData').then(function(data) {
                $scope.investigationData=data.data;

            });


        }

        //LOAD ITEMS FROM ITEM TABLE
        $scope.getServices=function () {

            $http.get('/api/getServicedata').then(function(data) {
                $scope.servicesData=data.data;

            });

            $http.get('/api/getItemCategory').then(function(data) {
                $scope.category=data.data;

            });


        }


        //Device names
        $scope.deviceName=function () {
            $http.get('/api/deviceName/'+facility_id).then(function(data) {
                $scope.devicesdata=data.data;

            });
            //Services per Devices
            $scope.pagination= [];
            $scope.device_services=function () {
                $http.get('/api/deviceServices/'+facility_id).then(function(data) {
                    $scope.ServedDevice=data.data;
                    $scope.pagination=data.data;


                    $scope.viewby = 10;
                    $scope.ServedDevices = $scope.pagination.length;
                    $scope.currentPage = 1;
                    $scope.itemsPerPage = $scope.viewby;
                    $scope.maxSize = 2; //Number of pager buttons to show

                    $scope.setPage = function (pageNo) {
                        $scope.currentPage = pageNo;
                    };



                    $scope.setItemsPerPage = function(num) {
                        $scope.itemsPerPage = num;
                        $scope.currentPage = 1;
                    }

                });


            }


        }
        //Device denied
        $scope.serviceDenied=function () {
            $http.get('/api/deniedDevices/'+facility_id).then(function(data) {
                $scope.deniedDevices=data.data;

            });


        }

        $scope.serviceonnoff=function () {
            $http.get('/api/OnnOffDevices/'+facility_id).then(function(data) {
                $scope.onnoff=data.data;

            });


        }

          $scope.departments_registered();
         $scope.serviceonnoff();
         $scope.equipments_list();
         $scope.departments_list();
         $scope.registered_list();
         $scope.getStatus();
         $scope.getServices();
        $scope.getServices();
        $scope.deviceName();
         $scope.device_services();
         $scope.serviceDenied();
        //USER PER DEPARTMENT
        $scope.geuserdepartment();
       //$scope.getUsersSubdepartments();
       // LOAD ITEMS
        $scope.getInvestigationData();

        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });


        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


        //Department Registration
        $scope.departmentRegistration = function(department){
            console.log(department);
            if (department==undefined)
            {
                swal(
                    'Department is missing',
                    'Register all required field!',
                    'error'
                )
            }
            else if (department.department_name.id==undefined)
            {
                swal(
                    'Department is missing',
                    'Register Department!',
                    'error'
                )
            }else if (department.name==undefined)
            {
                swal(
                    'Sub-Department is missing',
                    'Register sub dept!',
                    'error'
                )
            }
            else
            {

            var departmentData={
                    'sub_department_name':department.name,
                    'department_id':department.department_name.id,
                    'eraser':1

                };




            console.log(departmentData);



            $http.post('/api/departmentRegistration',departmentData).then(function(data) {

                console.log(data.data);
                var msg=data.data.msg;
                var status=data.data.status;
                if(status==0){
                    swal(
                        'Error',
                        msg,
                        'error'
                    )
                }
                else{
                    swal(
                        'Success Registration',
                        msg,
                        'success'
                    )
                }

                $scope.departments_list();
            });
        };
        }


        $scope.statusRegistration = function(status){

            var statusData={
                'status_name':status.name,
                'eraser':1
            };


            $http.post('/api/statusRegistration',statusData).then(function(data) {

                console.log(data.data);
                var msg=data.data.sent;
                var status=data.data.status;
                if(status==0){
                    toastr.error('Status Denied', 'Error');
                }
                else{
                    toastr.success('Successfully', 'Status Registered');
                }

                $scope.equipments_list();
            });
        };

        $scope.InvestigationRegistration = function(investigation){

            var item_name=investigation.name;



            var InvestigationPart={
                'item_name':item_name,
                'dept_id':3
            };
            console.log(InvestigationPart)


            $http.post('/api/InvestigationRegistration',InvestigationPart).then(function(data) {

                console.log(data.data);
                var msg=data.data.msg;
                var status=data.data.status;
                if(status==0){
                    toastr.error(msg, 'Error');
                }
                else{
                    toastr.success(msg, 'Success');
                }


            });
        };

        $scope.InvestigationPart = function(investigation){
            console.log(investigation);

             var item_name=investigation.item_name.id;
             var item=investigation.item_name.item_name;
             var sub_item_category=investigation.part.name;
             var item_category=investigation.category.item_category_name;
             console.log(item_category);


            var InvestigationType={
                'item_id':item_name,
                'item_name':item,
                'item_category':item_category,
                'sub_item_category':sub_item_category
            };
            console.log(InvestigationType)


            $http.post('/api/InvestigationPart',InvestigationType).then(function(data) {

                console.log(data.data);
                var msg=data.data.msg;
                var status=data.data.status;
                if(status==0){
                    toastr.error(msg, 'Error');
                }
                else{
                    toastr.success(msg, 'Success');
                }


            });
        };

        $scope.DeactivateUser = function(id){
        var del_user = user_name;
            var deactiveUser={
                'id':id,
                'del_user':del_user
            };
console.log(deactiveUser);
            $http.post('/api/DeactivateUser',deactiveUser).then(function(data) {

                console.log(data.data);
                toastr.error('Deleted Successfully', 'User');
                // swal(
                //     'Deleted Successfully',
                //     'User  Removed!',
                //     'success'
                // )

            });
        };

        $scope.equipmentRegistration = function(equipment){

            var equipmentData={
                'equipment_name':equipment.name,
                'description':equipment.description,
                'equipment_status_id':equipment.status_name.id,
                'facility_id':facility,
                'eraser':1,
                'sub_department_id':equipment.sub_department_name.id,
                'user_id':user_id

            };
            console.log(equipmentData);

            $http.post('/api/equipmentRegistration',equipmentData).then(function(data) {

                console.log(data.data);
                toastr.success('Successfully Registered', 'Equipment');
                // swal(
                //     'Success Registration',
                //     ' Equipment Registered!',
                //     'success'
                // )
                $scope.serviceonnoff();
            });
        };

        $scope.RadiologyUpdate = function(statusEquipments,status,descr,condition){
console.log(descr);
            var radiologyData={
                'statuses_id':status,
                'descriptions':descr,
                'equipment_name':statusEquipments.equipment_name,
                'description_id':statusEquipments.id,
                'condition':statusEquipments.condition,
                'conditions':condition,
                'status_id':statusEquipments.status_id,
                'description':statusEquipments.description,
                'equipment_status_id':statusEquipments.status_name.id,
                // 'status_name':statusEquipments.status_name.status_name,
                'facility_id':facility,
                'user_id':user_id
            };
            console.log(radiologyData);


            $http.post('/api/RadiologyUpdate',radiologyData).then(function(data) {

                console.log(data.data);
                toastr.success('Updated Successfully', 'Equipment');
                // swal(
                //     'Updated Successfully',
                //     ' Equipment Updated!',
                //     'success'
                // )
                $scope.device_services();
            });
        };

        $scope.statusUpdate = function(equipment){

            var updateData={
                'status_name':equipment.status_name
            };
            console.log(equipment);

            $http.post('/api/statusUpdate',equipment).then(function(data) {

                console.log(data.data);
                toastr.success('Updated Successfully', 'Status');
                // swal(
                //     'Updated Successfully',
                //     'Status  Updated!',
                //     'success'
                // )
                $scope.equipments_list();
            });
        };

        $scope.departmentUpdate = function(department){
            var id = department.id;
            var sub_department_name = department.sub_department_name;
            var department_id = department.department_id;
            console.log(id);
            console.log(department_id);
            console.log(sub_department_name);


            var departmentUpdate={
                'sub_department_name':sub_department_name,
                'id':id,
                'department_id':department_id
            };
            console.log(departmentUpdate);




            $http.post('/api/departmentUpdate',departmentUpdate).then(function(data) {

                console.log(data.data);
                toastr.success('Successfully', 'Updated Successfully ');

                $scope.departments_list();

            });


        };




        // INITIALIZATION OF INVESTIGATION BODY PARTS
        $scope.states = [
            {
                "name": "Skull",
                "id": "1"
            },
            {
                "name": "Chest",
                "id": "2"
            },{
                "name": "Abdomen",
                "id": "3",
            },{
                "name": "Spine",
                "id": "4"
            },{
                "name": "Extremities",
                "id": "5"
            },{
                "name": "HSG",
                "id": "6"
            },{
                "name": "Others Specify",
                "id": "7"
            }


        ];

        $scope.departmentDelete = function(id){

            console.log(id);
            swal({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then(function () {

                $http.get('/api/departmentDelete/'+id).then(function(data) {

                    console.log(data.data);
                    toastr.error('Deleted Successfully', 'Sub-department');
                    // swal(
                    //     'Deleted!',
                    //     'Sub-department has been deleted.',
                    //     'success'
                    // )
                    $scope.departments_list();
                });


            })


        };


        $scope.statusDelete = function(id){

            console.log(id);
            swal({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then(function () {

                $http.get('/api/statusDelete/'+id).then(function(data) {

                    console.log(data.data);
                    toastr.error('Deleted Successfuly', ' Status');
                    // swal(
                    //     'Deleted!',
                    //     'Status has been deleted.',
                    //     'success'
                    // )
                    $scope.equipments_list();
                });


            })


        };

        var _selected;





        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };



    //    TABS



        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };


    //    @END OF TABS

        //Accordion

        $scope.oneAtATime = true;




        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        //Accordion end

        //Services per Devices

        $scope.device_services=function () {
            $http.get('/api/deviceServices/'+facility_id).then(function(data) {
                $scope.ServedDevice=data.data;



                $scope.viewby = 5;
                $scope.ServedDevices = data.data.length;
                $scope.currentPage = 1;
               // $scope.itemsPerPage = $scope.viewby;
               $scope.maxSize = 10; //Number of pager buttons to show

                $scope.setPage = function (pageNo) {
                    $scope.currentPage = pageNo;
                };



                $scope.setItemsPerPage = function(num) {
                    $scope.itemsPerPage = num;
                    $scope.currentPage = 1;
                }

            });


        }
        $scope.device_services();





        //Service registration
        $scope.serviceRegistration = function(devicesdata){
 console.log(devicesdata);


            if (devicesdata.item_name==undefined)
            {
                swal(username,
                    'Service is missing',
                    'error'
                )
            }

            else if (devicesdata.sub_department_name==undefined)
            {
                swal(
                    'Sub-Department is missing',
                    'Register all required field!',
                    'error'
                )
            }
            else if (devicesdata.item_name==undefined)
            {
                swal(
                    'Service is missing',
                    'Register all required field!',
                    'error'
                )
            }
           else if (devicesdata.equipment_name==undefined)
            {
                swal(
                    username,
                    'Register equipment name!',
                    'error'
                )
            }


else {


                var serviceData = {
                    'sub_department_id': devicesdata.sub_department_name.id,
                    'equipment_id': devicesdata.equipment_name.equip_id,
                    'item_id': devicesdata.item_name.order_id,
                    'eraser': 1

                }


                console.log(serviceData);
                $http.post('/api/serviceRegistration', serviceData).then(function (data) {

                    console.log(data.data);
                    var msg = data.data.msg;
                    var status = data.data.status;
                    if (status == 0) {
                        toastr.error(msg, ' Error');
                        // swal(
                        //     'Error',
                        //     msg,
                        //     'error'
                        // )
                    }
                    else {
                        toastr.success(msg, ' Success Registration');
                        // swal(
                        //     'Success Registration',
                        //     msg,
                        //     'success'
                        // )
                    }

                    $scope.device_services();
                });
            }

        };





        //Users Registration
        $scope.userRegistration = function(userdepartment){



            if (userdepartment.name==undefined)
            {
                swal(username,
                    'Please fill required fields',
                    'error'
                )
            }

            else if (userdepartment.name==undefined)
            {
                swal(
                    username,
                    'User is missing',
                    'error'
                )
            }
            else if (userdepartment.sub_department_name==undefined)
            {
                swal(
                    username,
                    'Sub-Department is missing',
                    'error'
                )
            }



            else {


                var userRegister = {
                    'user_id': userdepartment.name.user_id,
                    'subdept_id': userdepartment.sub_department_name.id,
                    'assigned_by':user_name,
                    'grant':1

                }


                console.log(userRegister);
                $http.post('/api/userRegistration', userRegister).then(function (data) {

                    console.log(data.data);
                    var msg = data.data.msg;
                    var status = data.data.status;
                    if (status == 0) {

                        toastr.error(msg, ' Error');
                        // swal(
                        //     'Error',
                        //     msg,
                        //     'error'
                        // )
                    }
                    else {
                        toastr.success(msg, ' Registered');
                        swal(
                            'Success Registration',
                            msg,
                            'success'
                        )
                    }

                    $scope.getUsersSubdepartments();

                });
            }

        };





        $scope.OpenDeviceModal = function (device) {
            console.log(device);
            var object =device;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/radiology/deviceModal.html',
                size: 'lg',
                animation: true,
                controller: 'deviceModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }




//Verify Radiology Images

        $scope.VerifyXray = function(id){

            console.log(id);

            $http.get('/api/VerifyXray/'+id).then(function(data) {

                console.log(data.data);
                swal(
                    'Updated Successfully',
                    'Image  Verified!',
                    'success'
                )
                $scope.getXrays();

            });
        };


        $scope.ServiceDelete = function(id){

console.log(id);

            swal({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then(function () {


            $http.get('/api/ServiceDelete/'+id).then(function(data) {

                console.log(data.data);
                toastr.error('Deleted Successfully', 'Service');
                // swal(
                //     'Deleted Successfully',
                //     'Service  Removed!',
                //     'success'
                // )

            $scope.device_services();
            });


            })

        };





    }

})();


/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('radiologyTestController', radiologyTestController);

    function radiologyTestController($http, $auth, $rootScope,$state,$location,$scope) {


        //Accordion

        $scope.oneAtATime = true;




        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        //Accordion end



        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;




        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        //Equipments list with status
        $scope.getXrays=function () {

            $http.get('/api/getXrayImage').then(function(data) {
                $scope.Xrays=data.data;

            });


        }
        //Service Data
        $scope.getServices=function () {

            $http.get('/api/getServicedata').then(function(data) {
                $scope.servicesData=data.data;

            });


        }

        //Sub-Department list
        $scope.departments_list=function () {
            $http.get('/api/getdepartments').then(function(data) {
                $scope.departments=data.data;

            });


        }

        //Services per Devices
        $scope.device_services=function () {
            $http.get('/api/deviceServices').then(function(data) {
                $scope.ServedDevice=data.data;



                $scope.viewby = 10;
                $scope.ServedDevices = data.data.length;
                $scope.currentPage = 1;
                $scope.itemsPerPage = $scope.viewby;
                $scope.maxSize = 5; //Number of pager buttons to show

                $scope.setPage = function (pageNo) {
                    $scope.currentPage = pageNo;
                };



                $scope.setItemsPerPage = function(num) {
                    $scope.itemsPerPage = num;
                    $scope.currentPage = 1;
                }

            });


        }


        //Device names
        $scope.deviceName=function () {
            $http.get('/api/deviceName').then(function(data) {
                $scope.devicesdata=data.data;

            });


        }
        //Device denied
        $scope.serviceDenied=function () {
            $http.get('/api/deniedDevices').then(function(data) {
                $scope.deniedDevices=data.data;

            });


        }

        $scope.getXrays();
        $scope.getServices();
        $scope.departments_list();
        $scope.deviceName();
        $scope.device_services();
        $scope.serviceDenied();




        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);

//radiology patients Queue
        $scope.imageStatus = function(patient_id){


            console.log(patient_id);

            $http.get('/api/imageStatus/'+patient_id).then(function(data) {

                $scope.patient_orders=data.data;

                console.log(data.data);
            });
        };

//Verify Radiology Images

        $scope.VerifyXray = function(id){

            console.log(id);

            $http.get('/api/VerifyXray/'+id).then(function(data) {

                console.log(data.data);
                swal(
                    'Updated Successfully',
                    'Image  Verified!',
                    'success'
                )
                $scope.getXrays();

            });
        };
        //Service registration
        $scope.serviceRegistration = function(devicesdata){
            var serviceData = {
                'sub_department_id':devicesdata.sub_department_name.id,
                'equipment_id':devicesdata.equipment_name.id,
                'item_id':devicesdata.item_name.id,
                'eraser':1
            }

            console.log(serviceData);
            $http.post('/api/serviceRegistration',serviceData).then(function(data) {

                console.log(data.data);
                swal(
                    'Registered Successfully',
                    'Service  Registered!',
                    'success'
                )
                devicesdata="";
                $scope.device_services();
            });

        };




        var _selected;





        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };













    }

})();



/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('radiologyViewController', radiologyViewController);

    function radiologyViewController($http, $auth, $rootScope,$state,$location,$scope) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;




        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        //Equipments list with status
        $scope.getXrays=function () {

            $http.get('/api/getXrayImage').then(function(data) {
                $scope.Xrays=data.data;

            });


        }
        $scope.getXrays();




        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);

//radiology patients Queue
        $scope.imageStatus = function(patient_id){


            console.log(patient_id);

            $http.get('/api/imageStatus/'+patient_id).then(function(data) {

                $scope.patient_orders=data.data;

                console.log(data.data);
            });
        };

//Verify Radiology Images

        $scope.VerifyXray = function(id){

            console.log(id);

            $http.get('/api/VerifyXray/'+id).then(function(data) {

                console.log(data.data);
                swal(
                    'Updated Successfully',
                    'Image  Verified!',
                    'success'
                )
                $scope.getXrays();

            });
        };

















    }

})();


/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('radiopatientsController', radiopatientsController);

    function radiopatientsController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;




        //
        // $scope.patientQueImaging = function() {
        //     $http.get('/api/PatientsXray').then(function(data) {
        //
        //         console.log(data.data);
        //
        //         $scope.gpatientsXarayss=data.data;
        //
        //     });
        // };
        // // the $interval call every 1 second itself.
        // $interval(function() {
        //     $scope.patientQueImaging();
        // }, 10000);

        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        //Equipments list with status
        $scope.getXrays=function () {

            $http.get('/api/getXrayImage').then(function(data) {
                $scope.Xrays=data.data;

            });


        }
        $scope.getXrays();




        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);

//radiology patients Queue
        $scope.imageStatus = function(patient_id){


            console.log(patient_id);

            $http.get('/api/imageStatus/'+patient_id).then(function(data) {

                $scope.patient_orders=data.data;

                console.log(data.data);
            });
        };


        //    start

        $scope.RadioPatientsQue= function (patient_id) {

            var object = angular.extend({},patient_id);

            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/radiology/XrayQueModal.html',
                size: 'lg',
                animation: true,
                controller: 'queManagementModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });



        }


        //    end

        //PATIENTS FROM DOCTOR TO RADIOGRAPH

        $scope.PatientsXray = function(){



            $http.get('/api/PatientsXray/'+facility_id).then(function(data)
            {
                console.log(data.data);

                $scope.gpatientsXarayss=data.data;

            });
        };

        $scope.PatientsXray();










    }

})();


/**
 * Created by USER on 2017-02-13.
 */
/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('facilityController', facilityController);

    function facilityController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {

        //loading menu
        var user_id=$rootScope.currentUser.id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            //console.log($scope.menu);

        });


        $http.get('/api/region_registration').then(function(data) {
                $scope.regions=data.data;

            });
        $http.get('/api/council_type_list').then(function(data) {
            $scope.council_types=data.data;

        });


        $http.get('/api/council_list').then(function(data) {
            $scope.councils=data.data;

        });
        //facility_type_registration  CRUD

        $http.get('/api/facility_type_list').then(function(data) {
            $scope.facility_types=data.data;

        });

        $scope.facility_type_registration=function (facility_type) {
            //console.log(facility_type)
            $http.post('/api/facility_type_registration',facility_type).then(function(data) {
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

                $scope.facility_type_list();
                $scope.fading();
            });
        }


        $scope.facility_type_list=function () {

            $http.get('/api/facility_type_list').then(function(data) {
                $scope.facility_types=data.data;

            });
        }



        //facility update


        $scope.facility_type_update=function (facility_type) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {



                $http.post('/api/facility_type_update', facility_type).then(function (data) {
                    $scope.facility_type_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success'
                    )
                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }
       
       

//facility delete
        $scope.facility_type_delete=function (facility_type,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {



                $http.get('/api/facility_type_delete/'+id).then(function(data) {


                    $scope.facility_type_list();

                    swal(
                        'Feedback..',
                        'Deleted...',
                        'warning'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }


        //facilitys registration CRUD



        $scope.facility_registration=function (facility) {
            //console.log(facility);
            $http.post('/api/facility_registration',facility).then(function(data) {
                $scope.facility_code="";

                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )


//$scope.facility.facility_name=="";
            });
        }

//displaying facilities when function clicked
        $scope.facility_list=function () {

            $http.get('/api/facility_list').then(function(data) {
                $scope.facilities=data.data;

            });
        }



        //  update


        $scope.facility_update=function (facility) {
            //console.log(facility)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {



                $http.post('/api/facility_update', facility).then(function (data) {


                    $scope.facility_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })





        }


//  delete
        $scope.facility_delete=function (facility,id) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.get('/api/facility_delete/'+id).then(function(data) {


                    $scope.facility_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Item Deleted...',
                        'warning'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })





        }




        //department registration CRUD



        $scope.department_registration=function (department) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/department_registration',department).then(function(data) {


                    var sending=data.data;
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                    $scope.department.department_name=="";
                    $scope.department_list();


                });

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }

//displaying department when function clicked
        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

//displaying department when browser loading
        $http.get('/api/department_list').then(function(data) {
            $scope.departments=data.data;

        });

        //  update


        $scope.department_update=function (department) {
            //console.log(department)

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/department_update', department).then(function (data) {


                    $scope.department_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success',2000
                    )
                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }


//  delete
        $scope.department_delete=function (department,id) {


            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('/api/department_delete/'+id).then(function(data) {


                    $scope.department_list();
                    var sending=data.data;
                    swal(
                        'Feedback..',
                        'Item Deleted...',
                        'warning'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })







        }







        
    }

})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('regionController', regionController);

    function regionController($http, $auth, $rootScope,$state,$location,$scope,$timeout) {
        //loading menu
        var user_id=$rootScope.currentUser.id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            //console.log($scope.menu);

        });
   //Region Registrations
        $scope.region_registration=function (region) {
           //console.log(region);
            $http.post('/api/region_registration',region).then(function(data) {
               // region.region.region_name ==' ';

                $scope.region_list();
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

            });

        }
        // $http.get('/api/user_rights/'+$rootScope.currentUser.id).then(function(data) {
        //     $scope.roles=data.data;
        //    ////console.log( $scope.roles);
        //
        // });
        //displaying region list when function clicked
        $scope.region_list=function () {

            $http.get('/api/region_registration').then(function(data) {
                $scope.regions=data.data;

            });
        }

        //displaying region list when browser loading
        $http.get('/api/region_registration').then(function(data) {
            $scope.regions=data.data;

        });


   //region update


        $scope.update=function (region) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/update_region', region).then(function (data) {

$scope.e="";
                    console.log($scope.e);
                    $scope.region_list();
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })





        }


//regions delete
        $scope.delete=function (region,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('/api/delete/'+id).then(function(data) {


                    $scope.region_list();
                    swal(
                        'Feedback..',
                        'Deleted...',
                        'warning'
                    )
                })




            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



            }



            //council_type_registration  CRUD


        $scope.council_type_registration=function (council_type) {

            $http.post('/api/council_type_registration',council_type).then(function(data) {

                $scope.council_type_list();
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

            });
        }


        $scope.council_type_list=function () {

            $http.get('/api/council_type_list').then(function(data) {
                $scope.council_types=data.data;

            });
        }

//displaying council types list when browser loading
        $http.get('/api/council_type_list').then(function(data) {
            $scope.council_types=data.data;

        });

   //council_type update


        $scope.council_type_update=function (council_type) {

            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {


                $http.post('/api/council_type_update', council_type).then(function (data) {


                    $scope.council_type_list();
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success'
                    )
                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })




        }


//council_type delete
        $scope.council_type_delete=function (council_type,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {
                $http.get('/api/council_type_delete/'+id).then(function(data) {


                    $scope.council_type_list();
                    swal(
                        'Feedback..',
                        'Deleted...',
                        'warning'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



            }


        //councils registration CRUD



        $scope.council_registration=function (council) {

            $http.post('/api/council_registration',council).then(function(data) {

                $scope.council_list();
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )
            });
        }

//displaying region list when function clicked
        $scope.council_list=function () {

            $http.get('/api/council_list').then(function(data) {
                $scope.councils=data.data;

            });
        }
//displaying region list when browser loading
        $http.get('/api/council_list').then(function(data) {
            $scope.councils=data.data;

        });

        //  update


        $scope.council_update=function (council) {
           //console.log(council)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {
                $http.post('/api/council_update', council).then(function (data) {


                    $scope.council_list();
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success'
                    )
                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })



        }


//  delete
        $scope.council_delete=function (council,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {

                $http.get('/api/council_delete/'+id).then(function(data) {


                    $scope.council_list();
                    swal(
                        'Feedback..',
                        'Deleted...',
                        'warning'
                    )
                })


            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })


        }




        //residence registration CRUD



        $scope.residence_registration=function (residence) {
           //console.log(residence)
            $http.post('/api/residence_registration',residence).then(function(data) {


                $scope.residence_list();
                var sending=data.data;
                swal(
                    'Feedback..',
                    sending,
                    'success'
                )

            });
        }


        $scope.residence_list=function () {

            $http.get('/api/residence_list').then(function(data) {
                $scope.residences=data.data;

            });

        }

        $scope.residence_list();

        //  update


        $scope.residence_update=function (residence) {
            var updates={'id':residence.residence_id,'residence_name':residence.residence_name,'council_id':residence.council_id};
           //console.log(updates)
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {



                $http.post('/api/residence_update', updates).then(function (data) {


                    $scope.residence_list();
                    swal(
                        'Feedback..',
                        'Updates Success...',
                        'success'
                    )
                })

            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })






        }


//  delete
        $scope.residence_delete=function (residence,id) {
            swal({
                title: 'Are you sure?',
                text: " ",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No, cancel!',
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false
            }).then(function () {
                $http.get('/api/residence_delete/'+id).then(function(data) {

                    $scope.residence_list();
                    swal(
                        'Feedback..',
                        'Deleted...',
                        'warning'
                    )
                })



            }, function (dismiss) {
                // dismiss can be 'cancel', 'overlay',
                // 'close', and 'timer'
                if (dismiss === 'cancel') {
                    swal(
                        'Cancelled',
                        ' ',
                        'error'
                    )
                }
            })




        }
        


    }

})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

  'use strict';

  angular
    .module('authApp')
    .controller('tribeController', tribeController);

  function tribeController($http, $auth, $rootScope,$state,$location,$scope) {

    //Tribe Get Data From the database
    $scope.gettribe_name=function () {
      $http.get('/api/gettribe_name').then(function(data) {
        $scope.tribename=data.data;
      });
    };

    //Tribe Registrations
    $scope.tribe_registration=function (tribe) {
      var comit=confirm('Are you sure you want to Register '+tribe.tribe_name);
      if(comit) {
        $http.post('/api/tribe_registration',tribe).then(function(data) {
          $scope.gettribe_name();
        });
      }
    };

    //Tribe Update
    $scope.updatetribe=function (tribe) {

      var comit=confirm('Are you sure you want to Update '+tribe.tribe_name);
      if(comit) {
        $http.post('/api/updatetribe', tribe).then(function (data) {
          $scope.good = tribe.tribe_name + " " + 'Successful Updated';
          $scope.gettribe_name();
        });
      }
      else{
        return false;
      }
    };

    //Tribe delete
    $scope.deletetribe=function (tribe) {
      var comit=confirm('Are you sure you want to delete '+tribe.tribe_name);
      if(comit){
        $http.get('/api/deletetribe/'+tribe.id).then(function(data) {
          $scope.deleted=tribe.id+" "+'Successful Deleted';
          $scope.gettribe_name();
        });
      }
      else {
        return false;
      }
    };
    $scope.gettribe_name();
  }
})();

/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('VitalSignController', VitalSignController);

    function VitalSignController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal,toastr) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        $scope.regex=/\s/g;

        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });
        $http.get('/api/getVitals').then(function(data) {
            $scope.Vitals=data.data;

        });

        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


        //    TABS


        $scope.tabs = [

        ];

        //get patients who have paid consultation fee/exempted/insurance
        var patientData =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getVitalsPatients',{
                "search":searchKey,
                "facility_id":facility_id
            }).then(function(data)
            {
                patientData = data.data;
            });
            return patientData;
        }




        $scope.states = [
            {
                "name": "Body Weight",
                "unit":"Kg",
                "value":"weight",
                "status": "1"
            },
            {
                "name": "Height/Length",
                "unit":"cm",
                "value":"height",
                "status": "2"
            },{
                "name": "Body Temperature",
                "unit":"℃",
                "value":"temperature",
                "status": "3"
            },{
                "name": "Systolic Pressure",
                "unit":"mmHg",
                "value":"systolic",
                "status": "4"
            },{
                "name": "Diastolic Pressure",
                "unit":"mmHg",
                "value":"diastolic",
                "status": "5"
            },{
                "name": "Respiratory Rate",
                "unit":"Breaths/Min",
                "value":"respiratory",
                "status": "6"
            },{
                "name": "Pulse Rate",
                "unit":"Breaths/Min",
                "value":"pulse",
                "status": "7"
            },{
                "name": "Oxygen Saturation",
                "unit":"Beats/Min",
                "value":"oxygen",
                "status": "8"
            }


        ];



        $scope.VitalQue= function (patient_id) {

            var object = angular.extend({},patient_id);

            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/VitalSign/vitalModal.html',
                size: 'lg',
                animation: true,
                controller: 'vitalModal',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });



        }

        $scope.getVitalPatient_id= function (id) {

            console.log(id);
            $http.get('/api/getVitalsAccount/'+id).then(function(data) {
                $scope.accountVital=data.data;

            });
        }

        $scope.vitalsDate= function (id) {

            console.log(id);
            $http.get('/api/getVitalsDate/'+id).then(function(data) {
                $scope.vitalDatas=data.data;

            });
        }


        $scope.oneAtATime = true;


        $scope.vitalRegister = function(visit_id) {
            var VitalData = [];
            var field_id;
            $scope.Vitals.forEach(function (vital) {
                field_id = vital.vital_name.replace($scope.regex, '_');
                if ($('#' + field_id).val() != '') {
                    VitalData.push({
                        'vital_sign_id': vital.vital_id,
                        'vital_sign_value': $('#' + field_id).val(),
                        'patient_id':visit_id,
                        'registered_by':user_id
                    });
                    $('#' + field_id).val('');
                }
            })

            console.log(VitalData);

            if (VitalData.length > 0) {
                $http.post('/api/VitalSignRegister', VitalData).then(function (data) {
                    var msg = data.data.msg;
                    var notification = data.data.notification;
                    var status = data.data.status;
                    if (status == 0) {
                        toastr.error(notification, msg);
                    }
                    else {
                        toastr.success(notification, msg);



                    }
                });
            }
        }

        $scope.getPatientData=function (data) {
            console.log(data);
            $scope.selectedPatient=data;



        };
        $scope.getPatientData1=function (data) {
            console.log(data);
            $scope.selectedPatient=data;


        };





        //    VIEW PATIENT VITAL SIGN IN EMERGENCE


        $scope.x_axis=[];
        $scope.y_axis=[];

        $scope.viewVitals = function(id){

            console.log(id);

            $http.get('/api/viewVitals/'+id).then(function(data) {
                $scope.vitalData=data.data;
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.x_axis.push(data.data[i].time_attended);
                    $scope.y_axis.push(data.data[i].Body_temperature);

                }
                console.log($scope.y_axis);

                $scope.labels=$scope.x_axis;
                $scope.data=$scope.y_axis;





            });
        };







        $scope.viewVitals = function(id){

            console.log(id);

            $http.get('/api/viewVitals/'+id).then(function(data) {
                $scope.vitalData=data.data;
                $scope.x_axis=[];
                $scope.y_axis=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.x_axis.push(data.data[i].time_attended);
                    $scope.y_axis.push(data.data[i].Body_temperature);

                }
                console.log($scope.y_axis);

                $scope.labels=$scope.x_axis;
                $scope.data=$scope.y_axis;





            });
        };

        $scope.viewDiastolicPressure = function(id){

            console.log(id);

            $http.get('/api/viewDiastolicPressure/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Diastolic_pressure);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };
        $scope.viewTemperature = function(id){

            console.log(id);

            $http.get('/api/viewTemperature/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Body_temperature);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };
        $scope.viewPulseRate = function(id){

            console.log(id);

            $http.get('/api/viewPulseRate/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Pulse_rate);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };



        $scope.patients=function () {


            $http.get('/api/vitalSignsUsers/' + facility_id).then(function (data) {
                $scope.observationusers = data.data;





            });


        }





        $scope.cancel=function () {


            $scope.patients();

        }

        $scope.patients();

        $scope.viewSystolicPressure = function(id){

            console.log(id);

            $http.get('/api/viewSystolicPressure/'+id).then(function(data) {
                $scope.vitalData=data.data;
                $scope.valueX=[];
                $scope.ValueY=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valueX.push(data.data[i].time_attended);
                    $scope.ValueY.push(data.data[i].Systolic_pressure);

                }
                console.log($scope.ValueY);

                $scope.labels=$scope.valueX;
                $scope.data=$scope.ValueY;





            });
        };

        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };


        //Accordion

        $scope.oneAtATime = true;


        var _selected;
        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };


        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };





    }

})();



/**
 * Created by Jeph on 2017-07-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('vitalModal',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
           console.log(object);
            $scope.vitalQue = object;
            var user_id = $rootScope.currentUser.id;
            var facility_id=$rootScope.currentUser.facility_id;

            $http.get('/api/getVitals').then(function(data) {
                $scope.Vitals=data.data;

            });




        }]);
})();

/**
 * Created by Mazigo Jr on 2017-03-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('admissionModal',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
    function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
        $scope.admissionDetails = object;
        $scope.users = object;
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        var bill_id = object.bill_id;
        var dept_id = object.id;
        angular.element(document).ready(function () {
            $http.post('/api/getConsultation',{"dept_id":dept_id,"patient_category_id":bill_id,"facility_id":facility_id}).then(function (data) {
              $scope.consultations = data.data;
            });
        });
        $scope.admitPatient = function (item,notes) {
        if(notes == null){
            swal("Ooopss Sorry!","Please write admission notes and prescription instructions","error"); return;
        }
        var admissionData = {"patient_id":item.patient_id,"admission_status_id":1,"facility_id":item.facility_id,"user_id":user_id,
            "instructions":notes.instructions,"prescriptions":notes.prescriptions,"ward_id":item.ward_id};
        $http.post('/api/admitPatient',admissionData).then(function (data) {
            if(data.data.status ==0){

                swal(data.data.data, "", "error");
            }else{
                swal("Patient successfully admitted to "+item.ward_full_name,"","success");
            }
        });

            $uibModalInstance.dismiss();
        }
        //admission to specialized clinics
        $scope.internalTransfer = function (clinic,summary) {
            if(clinic.sender_clinic_id==clinic.id){
                swal('Oops you can not transfer this patient to '+clinic.department_name,'you can only transfer patients to other clinics, not your clinic','error');
                return;
            }
            var clinicData = {"sender_clinic_id":clinic.sender_clinic_id,"doctor_requesting_id":user_id,"summary":summary.instructions,
                "consultation_id":clinic.item_id,"received":0,"visit_id":clinic.visit_id,"dept_id":dept_id};
           $http.post('/api/postToClinics',clinicData).then(function (data) {

           });
            $scope.notes = null;
            swal(clinic.first_name+' '+clinic.middle_name+' '+clinic.last_name+' transferred to '+clinic.department_name,'','success');
            $uibModalInstance.dismiss();
        }

    }]);
})();

/**
 * Created by Mazigo Jr on 2017-03-09.
 */

(function () {
    'use strict';
    var app =  angular.module('authApp');
    app.controller('ipdController',['$scope','$http','$state','$rootScope','$uibModal','$uibModalInstance','object',
        function ($scope,$http,$state,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.selectedPatient = object;
            $scope.patientBills = object;
            var user_id = $rootScope.currentUser.id;
            var facility_id = $rootScope.currentUser.facility_id;
            var patient_id = object.patient_id;
            $scope.setTab = function(newTab){
                $scope.tab = newTab;
            };
            $scope.isSet = function(tabNum){
                return $scope.tab === tabNum;
            }
            $scope.toto = function () {
                var  total = 0;
                for(var i = 0; i < $scope.patientBills.length ; i++) {
                    total += ($scope.patientBills[i].quantity * $scope.patientBills[i].price - $scope.patientBills[i].discount);
                }
                return total;
            }
            $scope.cancelBill = function (item) {
                $http.post('/api/cancelBillItem',{"id":item.id,"patient_id":item.patient_id,"facility_id":facility_id,"user_id":user_id}).then(function (data) {
                    swal(item.item_name+" Has been cancelled for this patient","","success");

                });
            }
            $scope.oneAtATime = true;
            $scope.closeModal = function () {
                $uibModalInstance.dismiss();
            }
            $scope.templates = [
                {   name: 'Admission',
                    url: 'admission.html'},
                {
                    name: 'Internal Referral',
                    url: 'internal.html'},
                {
                    name: 'External Referral',
                    url: 'referral.html'},
                {
                    name: 'Deceased',
                    url: 'deceased.html'}
            ];

            //get patients who have paid consultation fee/exempted/insurance
            var patientData =[];
            $scope.showSearch = function(searchKey) {
                $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                    patientData = data.data;

                });
                return patientData;
            }

            var patientInvData = [];
            $scope.showSearch = function (searchKey) {
                $http.post('/api/getOpdInvPatients', {"facility_id": facility_id}).then(function (data) {
                    patientInvData = data.data;
                });
                return patientInvData;
            }
            //Previous History
            angular.element(document).ready(function () {
                $scope.setTab(1);

                $http.post('/api/previousVisits',{"patient_id":patient_id}).then(function (data) {
                    $scope.patientsVisits = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":3}).then(function (data) {
                    $scope.radiology = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":2}).then(function (data) {
                    $scope.labInvestigations = data.data;
                });
            });
            $scope.getPatientReport = function (item) {

                $http.post('/api/prevHistory',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevHistory = data.data;
                });
                $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevDiagnosis = data.data;
                });
                $http.post('/api/getPrevRos',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevRos = data.data;
                });
                $http.post('/api/getPrevBirth',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevBirth = data.data;
                });
                $http.post('/api/getPrevObs',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevObs = data.data;
                });
                $http.post('/api/getPrevFamily',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevFamily = data.data;
                });
                $http.post('/api/getPrevPhysical',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevPhysical = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":2}).then(function (data) {
                    $scope.labInvestigations = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":3}).then(function (data) {
                    $scope.radiologyResults = data.data;
                });
                $http.post('/api/getPastMedicine',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                $http.post('/api/getPastProcedures',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.pastProcedures = data.data;
                });

            }
            $scope.getVitalTime=function (item,patient) {
                $http.post('/api/vitalsTime',{"patient_id":patient.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.vitalsTime = data.data;
                });
            }
            var patientVitals = [];
            $scope.getVitalData=function (item,patient) {
                $http.post('/api/patientVitals',{"patient_id":patient.patient_id,"time_attended":item.time_attended}).then(function (data) {
                    patientVitals = data.data;
                    var object = angular.extend({},patientVitals,patient);
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/ClinicalServices/vitalSigns.html',
                        size: 'lg',
                        animation: true,
                        controller: 'admissionModal',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });
                });
            }
            $scope.getDiagnosis = function (item) {
                $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevDiagnosis = data.data;
                });
            }
            $scope.getHistory = function (item) {
                $http.post('/api/prevHistory',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevHistory = data.data;
                });
            }
            $scope.getRos = function (item) {
                $http.post('/api/getPrevRos',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevRos = data.data;
                });
            }
            $scope.getBirth = function (item) {
                $http.post('/api/getPrevBirth',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevBirth = data.data;
                });
            }
            $scope.getObs = function (item) {
                $http.post('/api/getPrevObs',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevObs = data.data;
                });
            }
            $scope.getFamily = function (item) {
                $http.post('/api/getPrevFamily',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevFamily = data.data;
                });
            }
            $scope.getPhysical = function (item) {
                $http.post('/api/getPrevPhysical',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevPhysical = data.data;
                });
            }
            //chief complaints
            var chiefComplaints = [];
            $scope.complaints = function (search) {
                $http.post('/api/chiefComplaints',{"search":search}).then(function (data) {
                    chiefComplaints = data.data;
                });
                return chiefComplaints;
            }
            //review of systems
            var cardiovascular = [];
            $scope.showCardio = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Cardiovascular"}).then(function (data) {
                    cardiovascular = data.data;
                });
                return cardiovascular;
            }
            var Respiratory = [];
            $scope.showRespiratory = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Respiratory"}).then(function (data) {
                    Respiratory = data.data;
                });
                return Respiratory;
            }
            var gatro = [];
            $scope.showGastro = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Gastrointerstinal"}).then(function (data) {
                    gatro = data.data;
                });
                return gatro;
            }
            var musculo = [];
            $scope.showMusculo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Musculoskeletal"}).then(function (data) {
                    musculo = data.data;
                });
                return musculo;
            }
            var genito = [];
            $scope.showGenito = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Genitourinary"}).then(function (data) {
                    genito = data.data;
                });
                return genito;
            }
            var cns = [];
            $scope.showCNS = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Central Nervous System"}).then(function (data) {
                    cns = data.data;
                });
                return cns;
            }
            var endo = [];
            $scope.showEndo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Endocrine"}).then(function (data) {
                    endo = data.data;
                });
                return endo;
            }
            var allergy = [];
            $scope.showAllergy = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Allergy"}).then(function (data) {
                    allergy = data.data;
                });
                return allergy;
            }
            var pastMed = [];
            $scope.showMedication = function (search) {
                $http.post('/api/pastMedications',{"search":search,"category":"Medication"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }

            var pastMed = [];
            $scope.showIllness = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Past Medical History"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }
            var pastAdm = [];
            $scope.showAdmission = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Admission History"}).then(function (data) {
                    pastAdm = data.data;
                });
                return pastAdm;
            }
            var pastImmune = [];
            $scope.showImmune = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Immunisation"}).then(function (data) {
                    pastImmune = data.data;
                });
                return pastImmune;
            }
            var pastInsp = [];
            $scope.showInspection = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Inspection"}).then(function (data) {
                    pastInsp = data.data;
                });
                return pastInsp;
            }
            var pastPalp = [];
            $scope.showPalpation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Palpation"}).then(function (data) {
                    pastPalp = data.data;
                });
                return pastPalp;
            }
            var pastPerc = [];
            $scope.showPercussion = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Percussion"}).then(function (data) {
                    pastPerc = data.data;
                });
                return pastPerc;
            }
            var pastAus = [];
            $scope.showAuscultation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Auscultation"}).then(function (data) {
                    pastAus = data.data;
                });
                return pastAus;
            }
            var diag = [];
            $scope.showDiagnosis = function (search) {
                $http.post('/api/getDiagnosis',{"search":search}).then(function (data) {
                    diag = data.data;
                });
                return diag;
            }
            $scope.allergyChecker = function (item) {
                $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                    swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
                });
            }
            //Investigations
            $scope.getSubDepts = function (item) {
                $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                    $scope.subDepartments = data.data;
                });
            }
            $scope.getTests = function (item,category) {
                if(angular.isDefined(category)==false){swal("Please...select Patient first","","error");return;}
                var category_id =category.bill_id;
                if(category.main_category_id == 3){
                    category_id = 1;
                }
                $http.post('/api/getPanels',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.panels = data.data;
                });

                $http.post('/api/getSingleTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.singleTests = data.data;
                });

                $http.post('/api/getTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.labTests = data.data;
                    if(data.data.length>0){
                        swal("Items with red marks are currently not available..","But You can still order them if necessary","info");
                    }
                    else {
                        swal("If  no Tests displayed under this category..","Please, Contact Lab manager","info");
                    }
                });
            }
            $scope.investigationOrders = [];
            $scope.unavailableOrders = [];
            $scope.orders = function (item,isChecked,patient) {
                var status_id = 1;
                var filter = '';
                if(patient.patient_id == null){
                    swal("Ooops!! no Patient selected","Please search and select patient first..");
                    return;
                }
                if(isChecked==true){
                    for(var i=0;i<$scope.investigationOrders.length;i++)
                        if($scope.investigationOrders[i].item_id == item.item_id){
                            swal(item.item_name+' '+" already in your order list!");
                            return;
                        }
                    if(item.on_off== 1) {
                        if(patient.main_category_id != 1){ filter = patient.bill_id;}
                        $scope.investigationOrders.push({"requesting_department_id":5,"admission_id":patient.admission_id,"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.item_price_id,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name,
                            "priority":'',"clinical_note":'',"payment_filter":filter});
                        console.log($scope.investigationOrders);
                    }
                    else {
                        for(var i=0;i<$scope.unavailableOrders.length;i++)
                            if($scope.unavailableOrders[i].item_id == item.item_id){
                                swal(item.item_name+' '+" already in your order list!");
                                return;
                            }
                        $scope.unavailableOrders.push({"facility_id":facility_id,"visit_date_id":patient.account_id,
                            "patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name});
                        return;
                    }
                }
            }
            $scope.saveInvestigation = function (item) {
                if ($scope.investigationOrders == "" && $scope.unavailableOrders == null) {
                    swal("You dont have Items to save!", "Please select Items first!");
                    return;
                }
                for (var i = 0; i < $scope.investigationOrders.length; i++) {
                    $scope.investigationOrders[i]["priority"] = item.priority;
                    $scope.investigationOrders[i]["clinical_note"] = item.clinical_note;
                }
                if($scope.investigationOrders !=""){
                    $http.post('/api/postInvestigations', $scope.investigationOrders).then(function (data) {
                    });
                    $scope.investigationOrders = [];

                }
                $http.post('/api/postUnavailableInvestigations',$scope.unavailableOrders).then(function (data) {

                });
                swal("Investigation order successfully saved!","","success");

                $scope.unavailableOrders = [];
                $("#clinical_summary").val('');
                $("#priority").val('');
                $("#x").val('');
                $("#prio_radi").val('');

            }

            //Investigation results
            $scope.getLabResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.labResults = data.data;
                });
            }
            $scope.getRadResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.radResults = data.data;
                });
            }
//posting from history and examinations
            $scope.complaintz = [];
            $scope.addComplaint = function (item,duration,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                for(var i=0;i<$scope.complaintz.length;i++)
                    if($scope.complaintz[i].id == item.id){
                        swal(item.description+' '+"already in your wish list!");
                        return;
                    }
                $scope.complaintz.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"facility_id":facility_id,"visit_date_id":patient.account_id,"user_id":user_id,"description":item.name,
                    "id":item.id,"duration":duration.durationqty,"duration_unit":duration.durationunit,"status":'Chief Complaints'});

                $("#complaint").val('');
                $("#duration_qty").val('');
                $("#duration_unit").val('');
            }
            $scope.saveComplaints = function (objectData,history) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please fill all necessary fields, click 'Add' Button then 'Save Complaints' Button to save data..","error");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['other_complaints']= history.other_complaints;
                    objectData[i]['hpi']= history.hpi;
                }
                $http.post('/api/postHistory',objectData).then(function (data) {

                });
                swal("Complaints successfully saved!","","success");
                $scope.complaintz=[];
                $("#other_complaints").val('');
                $("#hpi").val('');
            }
            $scope.rosTemp = [];
            $scope.reviewOfSystems = function (item,patient) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems2 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems6 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems7 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.saveRoS = function (objectData,rosSummary) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['review_summary'] = rosSummary;
                }
                $http.post('/api/postRoS',objectData).then(function (data) {

                });
                swal("Review of systems data successfully Saved!","","success");
                $scope.rosTemp = [];
            }
            //Past medical history
            $scope.pastTemp = [];
            $scope.pastMedicals = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }

            $scope.pastMedicals3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.pastMedicals4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.pastMedicals5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }

            $scope.savePastMedical = function (objectData,other_past_medicals) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0; i<objectData.length;i++){
                    objectData[i]['other_past_medicals'] = other_past_medicals;
                }
                $http.post('/api/postPastMed',objectData).then(function (data) {

                });
                swal("Past medical history data successfully Saved!","","success");
                $scope.pastTemp = [];

            }
            $scope.saveBirthHistory = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,
                    "antenatal":item.antenatal,"natal":item.natal,"post_natal":item.post_natal,"nutrition":item.nutrition,"growth":item.growth,"development":item.development};
                $http.post('/api/birthHistory',child).then(function (data) {
                    swal("Birth history data Successfully Saved!","","success");
                });
                $("#antenatal").val('');
                $("#natal").val('');
                $("#post_natal").val('');
                $("#nutrition").val('');
                $("#growth").val('');
                $("#development").val('');
            }
            $scope.saveObsGyn = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var obs = {"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"menarche":item.menarche,"menopause":item.menopause,"menstrual_cycles":item.menstrual_cycles,"pad_changes":item.pad_changes,
                    "recurrent_menstruation":item.recurrent_menstruation,"contraceptives":item.contraceptives,"pregnancy":item.pregnancy,"lnmp":item.lnmp,"gravidity":item.gravidity,"parity":item.parity,"living_children":item.living_children};
                $http.post('/api/postObs',obs).then(function (data) {
                    swal("Obstetrics and gynaecological data Successfully Saved!","","success");
                });
                $("#menarche").val('');
                $("#menopause").val('');
                $("#menstrual_cycles").val('');
                $("#pads").val('');
                $("#recurrent_menstruation").val('');
                $("#contraceptives").val('');
                $("#pregnancy").val('');
                $("#lnmp").val('');
                $("#gravidity").val('');
                $("#parity").val('');
                $("#living_children").val('');
            }
            //Physical Examinations
            $scope.removeFromSelection = function(item,objectdata){
                var indexremoveobject = objectdata.indexOf(item);
                objectdata.splice(indexremoveobject,1);
            }
            $scope.physicalMusculoskeletal = [];  $scope.physicalRespiratory = [];
            $scope.physicalCardiovascular = [];  $scope.physicalGastrointestinal = [];
            $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];

            $scope.physicalMusculo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalMusculoskeletal.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalResp = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalRespiratory.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalCardio = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCardiovascular.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalGastro = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGastrointestinal.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalGenito = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGenitourinary.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalCns = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCNS.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalEndo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalEndocrine.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.savePhysicalExamination = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postPhysical',objectData).then(function (data) {

                });
                swal(objectData[0].system+'  ' +"system data successfully Saved!","","success");
                $scope.physicalMusculoskeletal = []; $scope.physicalRespiratory = [];  $scope.physicalCardiovascular = [];
                $scope.physicalGastrointestinal = [];  $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];
            }
            $scope.saveLocalExams = function (patient,examData) {
                if(examData == null){
                    swal('Please write examination for this patient first','','error'); return;
                }
                var local_examz = {"admission_id":patient.admission_id,"patient_id":patient.patient_id,
                    "visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"local_examination":examData}
                $http.post('/api/postLocalPhysical',local_examz).then(function (data) {
                });
                swal('Local Examination','data for this patient saved','success');
                $('#local_exam').val('');
            }
            //family and social history
            $scope.saveSocialCommunity = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"chronic_illness":item.chronic_illness,"substance_abuse":item.substance_abuse,"adoption":item.adoption,"others":item.others};
                $http.post('/api/familyHistory',child).then(function (data) {
                    swal("Family and social history data successfully Saved!","","success");
                });
                $("#chronic_illness").val('');
                $("#substance_abuse").val('');
                $("#adoption").val('');
                $("#others").val('');
            }
            //Provisional , differential and confirmed diagnosis
            $scope.diagnosisTemp =[];
            $scope.addProv = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addDiff = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addConf = function (item,patient,status) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":patient.admission_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.saveDiagnosis = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postDiagnosis',objectData).then(function (data) {
                    swal("Diagnosis data successfully Saved!","","success");
                });
                $scope.diagnosisTemp =[];
            }
            //Dispositions
            $http.get('/api/getWards/'+facility_id).then(function (data) {
                $scope.wards = data.data;
            });
            $http.get('/api/getSpecialClinics/'+facility_id).then(function (data) {
                $scope.clinics = data.data;
            });
            var facilities =[];
            $scope.showFacility = function(searchKey) {
                $http.get('/api/getFacilities',{"searchKey":searchKey}).then(function(data) {

                    facilities = data.data;
                });
                return facilities;
            }
            $scope.exReferral = function (patient,facility,ref) {
                if(facility==null ||ref==null){
                    swal("Please fill all fields and click save","","error");return;
                }
                var ext = {"summary":ref.summary,"patient_id":patient.patient_id,"from_facility_id":facility_id,"sender_id":user_id,"to_facility_id":facility.id,"referral_type":1,"status":1};
                $http.post('/api/postReferral',ext).then(function (data) {
                    $scope.ref == null;
                    swal("Patient Referred successfully","","success");
                });

            }
            $scope.internalTransfer = function (clinic,patient) {
                var patientDetails = {"sender_clinic_id":5,"first_name":patient.first_name,"middle_name":patient.middle_name,"last_name":patient.last_name,
                    "medical_record_number":patient.medical_record_number,"gender":patient.gender,"dob":patient.dob,"visit_id":patient.account_id};
                var object = angular.extend({},clinic, patientDetails);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/internalTransfer.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
                $uibModalInstance.dismiss();
            }
            //continuation notes
            $scope.contNotes = function (item,patient) {
                if(item ==null){
                    swal('Please write continuation notes for this patient','then click save notes button','error'); return;
                }
                var notes ={"notes":item.notes,"patient_id":patient.patient_id,"user_id":user_id,"facility_id":facility_id};
                $http.post('/api/postNotes',notes).then(function (data) {

                });
                $http.post('/api/getNotes',{"patient_id":patient.patient_id}).then(function (data) {
                    $scope.prevNotes = data.data;
                });
                $scope.note = null;
                swal("Continuation notes successfully saved!","","success");
            }
            //Treatments:medication and procedures
            var mediData =[];
            $scope.medicines =[];
            $scope.medicinesOs =[];
            $scope.searchItems = function(searchKey,patient) {
                var pay_id =patient.bill_id;
                if(pay_id==null){
                    swal("Please search patient to be prescribed before searching Medicine!");
                    return;
                }
                if(patient.main_category_id == 3){
                    pay_id = 1;
                }
                $http.post('/api/getMedicine',{"search":searchKey,"facility_id":facility_id,"patient_category_id":pay_id}).then(function(data) {
                    mediData = data.data;

                });
                return mediData;

            }
            var balance=[];
            $scope.checkDosage = function (item_id,patient_id) {
                var item_name=item_id.item_name;
                $http.post('/api/dosageChecker',{"item_id":item_id.item_id,"patient_id":patient_id}).then(function (data) {
                    console.log(data.data);
                    if(data.data.length>0){
                        var diff = data.data[0].duration - data.data[0].days;
                        $scope.dosageCheck=data.data;
                        swal('ATTENTION',item_name+' In Dosage Progress '+ diff +' day(s) remained to Complete this Dosage','info');
                    }
                });


            }
            $scope.addMedicine = function (item,patient,dawa) {
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity = item.dose*item.duration*24/item.frequency;
                if(patient ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(dawa ==null){ swal("Please search and select medicine!"); return;}
                if(item.instructions ==null){ swal("Please Write Instructions and click 'Add to List' Button","","error"); return;}
                for(var i=0;i<$scope.medicines.length;i++)
                    if($scope.medicines[i].item_id == dawa.item_id){ swal(dawa.item_name+" already in your order list!"); return;}
                if(main_category != 1 && dawa.exemption_status == 0){
                    filter = patient.bill_id;
                }
                if(main_category == 3  && dawa.exemption_status == 1){
                    filter = '';
                }
                if(main_category == 2  && dawa.exemption_status == 1){
                    filter = patient.bill_id;
                }
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":dawa.item_id,"facility_id":facility_id}).then(function (data) {
                    balance = data.data;
                    console.log(balance)
                    if(balance.length >0 && balance[0].balance>=quantity){
                        $scope.medicines.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                            "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"","payment_filter":filter,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name,"dose_formulation":dawa.dose_formulation
                        });
                    }
                    else if (balance.length<1 || balance[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to prescribe anyway?");
                        if(conf== true){
                            for(var i=0;i<$scope.medicinesOs.length;i++)
                                if($scope.medicinesOs[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
                            $scope.medicinesOs.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                                "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"OS",
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item for Prescription","info");
                            return;
                        }
                    }
                });
                $("#item_search").val('');
                $("#dose").val('');
                $("#frequency").val('');
                $("#duration").val('');
                $("#instruction").val('');
            }
            $scope.saveMedicine = function () {
                if($scope.medicines == "" && $scope.medicinesOs == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.medicines !=""){
                    $http.post('/api/postMedicines',$scope.medicines).then(function (data) {

                    });
                    $scope.medicines = [];
                }
                $http.post('/api/outOfStockMedicine',$scope.medicinesOs).then(function (data) {

                });
                swal("Patient successfully prescribed!","","success");
                $scope.medicinesOs = [];
            }
            $scope.prevMedics = function (item) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
            }
            $scope.prevProcedure = function (item) {

                $http.post('/api/getPrevProcedures',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevProcedures = data.data;
                });
            }
            //medical supplies starts
            var supplies = [];
            var balance02 = [];
            $scope.supplies=[];
            $scope.suppliesOS=[];
            $scope.searchMediSupplies = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching medical supplies!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getMedicalSupplies', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    supplies = data.data;
                });
                return supplies;
            }
            $scope.addSupplies = function (patient,qty,item) {
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity =qty;
                if(patient ==null){ swal("Please search and select Patient","","error"); return; }
                if(item ==null){
                    swal("Please search and select Medical supplies!","","error"); return;
                }
                for(var i=0;i<$scope.supplies.length;i++)
                    if($scope.supplies[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(main_category != 1 && item.exemption_status == 0){
                    filter = patient.bill_id;
                }
                if(main_category == 3  && item.exemption_status == 1){
                    filter = '';
                }
                if(main_category == 2  && item.exemption_status == 1){
                    filter = patient.bill_id;
                }
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":item.item_id,"facility_id":facility_id}).then(function (data) {
                    balance02 = data.data;
                    if(balance02.length<1){
                        swal(item.item_name +' is not available in store.','Contact store manager','info');
                        return;
                    }
                    else if(balance02.length >0 && balance02[0].balance>=quantity){
                        $scope.supplies.push({"out_of_stock":'',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                        });
                    }
                    else if (balance02.length<1 || balance02[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to select it anyway?","","info");
                        if(conf== true){
                            for(var i=0;i<$scope.suppliesOS.length;i++)
                                if($scope.suppliesOS[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!"); return;}
                            $scope.suppliesOS.push({"out_of_stock":'OS',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item","info");
                            return;
                        }
                    }
                });
                $("#supplies").val('');
                $("#qty").val('');
            }
            $scope.saveSupplies = function (){
                if($scope.supplies == "" && $scope.suppliesOS == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.supplies !=""){
                    $http.post('/api/postMedicalSupplies',$scope.supplies).then(function (data) {

                    });
                    $scope.supplies = [];
                }
                $http.post('/api/outOfStockMedicalSupplies',$scope.suppliesOS).then(function (data) {

                });
                swal("Patient's medical supplies successfully saved!","","success");
                $scope.suppliesOS = [];
            }
            //medical supplies ends
            //procedures
            var procedureData =[];
            $scope.procedures =[];
            $scope.searchProcedures = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getPatientProcedures', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    procedureData = data.data;
                });
                return procedureData;
            }
            $scope.getDefaultProcedures = function (patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getProcedures',{"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    $scope.defaultProcedures = data.data;
                });
            }
            $scope.addProcedure = function (item,patient) {
                var filter = '';
                var status_id = 1;
                var main_category = patient.main_category_id;
                if(patient.patient_id ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(item.item_id ==null){ swal("Please search and select Procedure!"); return;}
                for(var i=0;i<$scope.procedures.length;i++)
                    if($scope.procedures[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(main_category != 1 && item.exemption_status == 0){
                    filter = patient.bill_id;
                }
                if(main_category == 3  && item.exemption_status == 1){
                    filter = '';
                }
                if(main_category == 2  && item.exemption_status == 1){
                    filter = patient.bill_id;
                }


                $scope.procedures.push({"payment_filter":filter,"admission_id":patient.admission_id,"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":1,"status_id":status_id,
                    "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                });
            }
            $scope.saveProcedures = function (objectData) {
                $http.post('/api/postPatientProcedures',objectData).then(function (data) {

                });
                swal("Patient procedures successfully saved!","","success");
                $scope.procedures = [];
            }

            $scope.deceased = function (item,corpse) {
                if(angular.isDefined(corpse)==false){
                    swal("An error occurred","Data not saved...Please write causes of death and click send to last office button","error");return;
                }
                var deceased = {"first_name":item.first_name,"middle_name":item.middle_name,"last_name":item.last_name,
                    "patient_id":item.patient_id,"user_id":user_id,"facility_id":facility_id,"immediate_cause":corpse.immediate_cause,
                    "underlying_cause":corpse.underlying_cause,"dept_id":5};
                $http.post('/api/postDeceased',deceased).then(function (data) {
                    if(data.data.status ==0){

                        swal(data.data.data, "", "error");
                    }
                    else{
                        swal(item.first_name+' '+item.last_name+" sent to Last office","","success");
                    }
                });
                $("#immediate_cause").val('');
                $("#underlying_cause").val('');
                swal(item.first_name+' '+item.last_name+" sent to Last office","","success");
            }




        }
    ]);
})();

/**
 * Created by Mazigo Jr on 2017-05-02.
 */
(function () {
    angular.module('authApp').controller('ipdQueueController',ipdQueueController);
    function ipdQueueController($scope,$state,$http,$rootScope,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        angular.element(document).ready(function () {
            $http.post('/api/getIpdPatients',{"facility_id":facility_id}).then(function(data) {
                $scope.inpatients = data.data;
            });
        });

        var patientData =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getAllIpdPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientData = data.data;
            });
            return patientData;
        }
        $scope.getIpdModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/in_patients.html',
                size: 'lg',
                animation: true,
                controller: 'ipdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.getTreatmentModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/treatmentModal.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.billsCancellation = function () {
            $http.post('/api/getBillList',{"facility_id":facility_id}).then(function (data) {
                $scope.patientBill=data.data;
            });
        }
        $scope.getBillModal = function (item) {
            $http.post('/api/cancelPatientBill',{"patient_id":item.patient_id,"facility_id":facility_id}).then(function (data) {
                var object = data.data;
                var modalInstance = $uibModal.open({
                    templateUrl:'/views/modules/ClinicalServices/billCancellationModal.html',
                    size: 'lg',
                    animation:true,
                    controller:'opdController',
                    windowClass: 'app-modal-window',
                    resolve :{
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }
    }
})();

/**
 * Created by Mazigo Jr on 2017-03-09.
 */

(function () {
    'use strict';
   var app =  angular.module('authApp');
    app.controller('opdController',['$scope','$http','$state','$rootScope','$uibModal','$uibModalInstance','object',
        function ($scope,$http,$state,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.selectedPatient = object;
            $scope.patientBills = object;
            var user_id = $rootScope.currentUser.id;
            var facility_id = $rootScope.currentUser.facility_id;
            var patient_id = object.patient_id;
			 $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
            $scope.toto = function () {
                var  total = 0;
                for(var i = 0; i < $scope.patientBills.length ; i++) {
                    total += ($scope.patientBills[i].quantity * $scope.patientBills[i].price - $scope.patientBills[i].discount);
                }
                return total;
            }
            $scope.cancelBill = function (item) {
                $http.post('/api/cancelBillItem',{"id":item.id,"patient_id":item.patient_id,"facility_id":facility_id,"user_id":user_id}).then(function (data) {
                   swal(item.item_name+" Has been cancelled for this patient","","success");

                });
            }

        $scope.oneAtATime = true;
            $scope.closeModal = function () {
                $uibModalInstance.dismiss();
            }
        $scope.templates = [
            {   name: 'Admission',
                url: 'admission.html'},
            {
                 name: 'Internal Referral',
                 url: 'internal.html'},
            {
                 name: 'External Referral',
                 url: 'referral.html'},
            {
                name: 'Deceased',
                url: 'deceased.html'}
        ];

        //get patients who have paid consultation fee/exempted/insurance
        var patientData =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                patientData = data.data;

                });
            return patientData;
        }

        var patientInvData = [];
        $scope.showSearch = function (searchKey) {
            $http.post('/api/getOpdInvPatients', {"facility_id": facility_id}).then(function (data) {
                patientInvData = data.data;
            });
            return patientInvData;
        }
		//Previous History
            angular.element(document).ready(function () {
                $scope.setTab(1);

                $http.post('/api/previousVisits',{"patient_id":patient_id}).then(function (data) {
                    $scope.patientsVisits = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":3}).then(function (data) {
                    $scope.radiology = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":2}).then(function (data) {
                    $scope.labInvestigations = data.data;
                });
                $http.get('/api/getWards/'+facility_id).then(function (data) {
                    $scope.wards = data.data;
                });
                $http.get('/api/getSpecialClinics').then(function (data) {
                    $scope.clinics = data.data;
                });
            });
            $scope.getPatientReport = function (item) {

                    $http.post('/api/prevHistory',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevHistory = data.data;
                    });
                    $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevDiagnosis = data.data;
                    });
                    $http.post('/api/getPrevRos',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevRos = data.data;
                    });
                    $http.post('/api/getPrevBirth',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevBirth = data.data;
                    });
                    $http.post('/api/getPrevObs',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevObs = data.data;
                    });
                    $http.post('/api/getPrevFamily',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevFamily = data.data;
                    });
                    $http.post('/api/getPrevPhysical',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                        $scope.prevPhysical = data.data;
                    });
                $http.post('/api/prevInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":2}).then(function (data) {
                    $scope.labInvestigationsz = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":3}).then(function (data) {
                    $scope.radiologyResults = data.data;
                });
                $http.post('/api/getPastMedicine',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                $http.post('/api/getPastProcedures',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.pastProcedures = data.data;
                });
                $http.post('/api/getAllergies',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.allergies = data.data;
                });

            }

        $scope.getVitalTime=function (item,patient) {
            $http.post('/api/vitalsTime',{"patient_id":patient.patient_id,"date_attended":item.date_attended}).then(function (data) {
                $scope.vitalsTime = data.data;
            });
        }        
        var patientVitals = [];
        $scope.getVitalData=function (item,patient) {
            $http.post('/api/patientVitals',{"patient_id":patient.patient_id,"time_attended":item.time_attended}).then(function (data) {
                patientVitals = data.data;
                var object = angular.extend({},patientVitals,patient);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/vitalSigns.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }

        //chief complaints
        var chiefComplaints = [];
        $scope.complaints = function (search) {
            $http.post('/api/chiefComplaints',{"search":search}).then(function (data) {
                chiefComplaints = data.data;
            });
            return chiefComplaints;
        }
        //review of systems
        var cardiovascular = [];
        $scope.showCardio = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Cardiovascular"}).then(function (data) {
                cardiovascular = data.data;
            });
            return cardiovascular;
        }
        var Respiratory = [];
        $scope.showRespiratory = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Respiratory"}).then(function (data) {
                Respiratory = data.data;
            });
            return Respiratory;
        }
        var gatro = [];
        $scope.showGastro = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Gastrointerstinal"}).then(function (data) {
                gatro = data.data;
            });
            return gatro;
        }
        var musculo = [];
        $scope.showMusculo = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Musculoskeletal"}).then(function (data) {
                musculo = data.data;
            });
            return musculo;
        }
        var genito = [];
        $scope.showGenito = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Genitourinary"}).then(function (data) {
                genito = data.data;
            });
            return genito;
        }
        var cns = [];
        $scope.showCNS = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Central Nervous System"}).then(function (data) {
                cns = data.data;
            });
            return cns;
        }
        var endo = [];
                $scope.showEndo = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Endocrine"}).then(function (data) {
                        endo = data.data;
                    });
                    return endo;
                }
        var allergy = [];
                $scope.showAllergy = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Allergy"}).then(function (data) {
                        allergy = data.data;
                    });
                    return allergy;
                }
        var pastMed = [];
                $scope.showMedication = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Medication"}).then(function (data) {
                        pastMed = data.data;
                    });
                    return pastMed;
                }

        var pastMed = [];
                $scope.showIllness = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Past Medical History"}).then(function (data) {
                        pastMed = data.data;
                    });
                    return pastMed;
                }
        var pastAdm = [];
                $scope.showAdmission = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Admission History"}).then(function (data) {
                        pastAdm = data.data;
                    });
                    return pastAdm;
                }
        var pastImmune = [];
                $scope.showImmune = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Immunisation"}).then(function (data) {
                        pastImmune = data.data;
                    });
                    return pastImmune;
                }
        var pastInsp = [];
                $scope.showInspection = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Inspection"}).then(function (data) {
                        pastInsp = data.data;
                    });
                    return pastInsp;
                }
       var pastPalp = [];
                $scope.showPalpation = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Palpation"}).then(function (data) {
                        pastPalp = data.data;
                    });
                    return pastPalp;
                }
      var pastPerc = [];
                $scope.showPercussion = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Percussion"}).then(function (data) {
                        pastPerc = data.data;
                    });
                    return pastPerc;
                }
        var pastAus = [];
                $scope.showAuscultation = function (search) {
                    $http.post('/api/reviewOfSystems',{"search":search,"category":"Auscultation"}).then(function (data) {
                        pastAus = data.data;
                    });
                    return pastAus;
                }
                var diag = [];
                $scope.showDiagnosis = function (search) {
                    $http.post('/api/getDiagnosis',{"search":search}).then(function (data) {
                        diag = data.data;
                    });
                    return diag;
                }
        $scope.allergyChecker = function (item) {
            $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
            });
        }
        //Investigations
       $scope.getSubDepts = function (item) {
           $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
               $scope.subDepartments = data.data;
           });
       }
        $scope.getTests = function (item,category) {
            if(angular.isDefined(category)==false){swal("Please...select Patient first","","error");return;}
            var category_id =category.bill_id;
            if(category.main_category_id == 3){
                category_id = 1;
            }
            $http.post('/api/getPanels',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                $scope.panels = data.data;
            });

             $http.post('/api/getSingleTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                $scope.singleTests = data.data;
            });

            $http.post('/api/getTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                $scope.labTests = data.data;
                if(data.data.length>0){
                    swal("Items with red marks are currently not available..","But You can still order them if necessary","info");
                }
                else {
                    swal("If  no Tests displayed under this category..","Please, Contact Lab manager","info");
                }
            });
        }
        $scope.investigationOrders = [];
        $scope.unavailableOrders = [];
        $scope.orders = function (item,isChecked,patient) {
            var status_id = 1;
            var filter = '';
           if(patient.patient_id == null){
                swal("Ooops!! no Patient selected","Please search and select patient first..");
                return;
            }
            if(isChecked==true){
                for(var i=0;i<$scope.investigationOrders.length;i++)
                    if($scope.investigationOrders[i].item_id == item.item_id){
                       swal(item.item_name+' '+" already in your order list!");
                        return;
                }
           if(item.on_off== 1) {
               if(patient.main_category_id != 1){ filter = patient.bill_id;}
        $scope.investigationOrders.push({"requesting_department_id":1,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.item_price_id,"status_id":status_id,
            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name,
             "priority":'',"clinical_note":'',"payment_filter":filter});
            console.log($scope.investigationOrders);
            }
            else {
               for(var i=0;i<$scope.unavailableOrders.length;i++)
                   if($scope.unavailableOrders[i].item_id == item.item_id){
                       swal(item.item_name+' '+" already in your order list!");
                       return;
                   }
               $scope.unavailableOrders.push({"facility_id":facility_id,"visit_date_id":patient.account_id,
                   "patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name});
                return;
           }
            }
        }
        $scope.saveInvestigation = function (item) {
            if ($scope.investigationOrders == "" && $scope.unavailableOrders == null) {
                swal("You dont have Items to save!", "Please select Items first!");
                return;
            }
            for (var i = 0; i < $scope.investigationOrders.length; i++) {
                $scope.investigationOrders[i]["priority"] = item.priority;
                $scope.investigationOrders[i]["clinical_note"] = item.clinical_note;
            }
            if($scope.investigationOrders !=""){
            $http.post('/api/postInvestigations', $scope.investigationOrders).then(function (data) {
            });
                $scope.investigationOrders = [];

            }
            $http.post('/api/postUnavailableInvestigations',$scope.unavailableOrders).then(function (data) {

            });
            swal("Investigation order successfully saved!","","success");

            $scope.unavailableOrders = [];
            $("#clinical_summary").val('');
            $("#priority").val('');
            $("#x").val('');
            $("#prio_radi").val('');
        }

        //Investigation results
        $scope.getLabResults = function (item) {
            var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
            $http.post('/api/getInvestigationResults',results).then(function (data) {
                $scope.labResults = data.data[0];
                $scope.labPanels = data.data[1];
            });
        }
            $scope.getPanelContents = function(item){
                $http.post('/api/getPanelComponentResults',{"item_id":item.item_id,"order_id":item.order_id}).then(function(data){
                    $scope.componentResults = data.data;
                });
            }
        $scope.getRadResults = function (item) {
           var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
            $http.post('/api/getInvestigationResults',results).then(function (data) {
                $scope.radResults = data.data;
            });
        }
//posting from history and examinations
        $scope.complaintz = [];
        $scope.addComplaint = function (item,duration,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            for(var i=0;i<$scope.complaintz.length;i++)
                if($scope.complaintz[i].id == item.id){
                    swal(item.description+' '+"already in your wish list!");
                    return;
                }
        $scope.complaintz.push({"admission_id":'',"patient_id":patient.patient_id,"facility_id":facility_id,"visit_date_id":patient.account_id,"user_id":user_id,"description":item.name,
            "id":item.id,"duration":duration.durationqty,"duration_unit":duration.durationunit,"status":'Chief Complaints'});

            $("#complaint").val('');
            $("#duration_qty").val('');
            $("#duration_unit").val('');

        }
            $scope.saveComplaints = function (objectData,history) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please fill all necessary fields, click 'Add' Button then 'Save Complaints' Button to save data..","error");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['other_complaints']= history.other_complaints;
                    objectData[i]['hpi']= history.hpi;
                }
                $http.post('/api/postHistory',objectData).then(function (data) {

                });
                swal("Complaints successfully saved!","","success");
                $scope.complaintz=[];
                $("#other_complaints").val('');
                $("#hpi").val('');
            }
        $scope.rosTemp = [];
        $scope.reviewOfSystems = function (item,patient) {

            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#cardio").val('');
        }
        $scope.reviewOfSystems2 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#respiratory").val('');
        }
        $scope.reviewOfSystems3 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#gastrointestinal").val('');
        }
        $scope.reviewOfSystems4 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#musculoskeletal").val('');
        }
        $scope.reviewOfSystems5 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#genitourinary").val('');
        }
        $scope.reviewOfSystems6 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#cns").val('');
        }
        $scope.reviewOfSystems7 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#endocrine").val('');
        }
            $scope.saveRoS = function (objectData,rosSummary) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['review_summary'] = rosSummary;
                }
                $http.post('/api/postRoS',objectData).then(function (data) {

                });
                swal("Review of systems data successfully Saved!","","success");
                $scope.rosTemp = [];
                $("#review_summary").val('');
            }
        //Past medical history
        $scope.pastTemp = [];
        $scope.pastMedicals = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#allergy").val('');
        }
        $scope.pastMedicals3 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#illness").val('');
        }
        $scope.pastMedicals4 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#admission").val('');
        }
        $scope.pastMedicals5 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            $("#immunisation").val('');
        }

            $scope.savePastMedical = function (objectData,other_past_medicals) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0; i<objectData.length;i++){
                    objectData[i]['other_past_medicals'] = other_past_medicals;
                }
                $http.post('/api/postPastMed',objectData).then(function (data) {

                });
                swal("Past medical history data successfully Saved!","","success");
                $scope.pastTemp = [];
                $("#other_past_medicals").val('');

            }
        $scope.saveBirthHistory = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            var child = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,
            "antenatal":item.antenatal,"natal":item.natal,"post_natal":item.post_natal,"nutrition":item.nutrition,"growth":item.growth,"development":item.development};
            $http.post('/api/birthHistory',child).then(function (data) {
                swal("Birth history data Successfully Saved!","","success");
            });
            $("#antenatal").val('');
            $("#natal").val('');
            $("#post_natal").val('');
            $("#nutrition").val('');
            $("#growth").val('');
            $("#development").val('');
        }
        $scope.saveObsGyn = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            var obs = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"menarche":item.menarche,"menopause":item.menopause,"menstrual_cycles":item.menstrual_cycles,"pad_changes":item.pad_changes,
            "recurrent_menstruation":item.recurrent_menstruation,"contraceptives":item.contraceptives,"pregnancy":item.pregnancy,"lnmp":item.lnmp,"gravidity":item.gravidity,"parity":item.parity,"living_children":item.living_children};
            $http.post('/api/postObs',obs).then(function (data) {
                swal("Obstetrics and gynaecological data Successfully Saved!","","success");
            });
            $("#menarche").val('');
            $("#menopause").val('');
            $("#menstrual_cycles").val('');
            $("#pads").val('');
            $("#recurrent_menstruation").val('');
            $("#contraceptives").val('');
            $("#pregnancy").val('');
            $("#lnmp").val('');
            $("#gravidity").val('');
            $("#parity").val('');
            $("#living_children").val('');
        }
        //Physical Examinations
        $scope.removeFromSelection = function(item,objectdata){
            var indexremoveobject = objectdata.indexOf(item);
            objectdata.splice(indexremoveobject,1);
        }
        $scope.physicalMusculoskeletal = [];  $scope.physicalRespiratory = [];
        $scope.physicalCardiovascular = [];  $scope.physicalGastrointestinal = [];
        $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];

        $scope.physicalMusculo = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalMusculoskeletal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
           $("#musc_inspect").val('');
           $("#musc_palpate").val('');
           $("#musc_percu").val('');
           $("#musc_ausc").val('');
        }
        $scope.physicalResp = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalRespiratory.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            $("#resp_inspect").val('');
            $("#resp_palpate").val('');
            $("#resp_percus").val('');
            $("#resp_aus").val('');
        }
        $scope.physicalCardio = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalCardiovascular.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            $("#cardio_inspect").val('');
            $("#cardio_palpate").val('');
            $("#cardio_percus").val('');
            $("#cardio_aus").val('');
        }
          $scope.physicalGastro = function (item,patient,system) {
              if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalGastrointestinal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
              $("#gastro_inspect").val('');
              $("#gastro_palpate").val('');
              $("#gastro_percus").val('');
              $("#gastro_aus").val('');
          }
          $scope.physicalGenito = function (item,patient,system) {
              if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalGenitourinary.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
              $("#genito_inspect").val('');
              $("#genito_palpate").val('');
              $("#genito_percus").val('');
              $("#genito_aus").val('');
          }
          $scope.physicalCns = function (item,patient,system) {
              if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalCNS.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
              $("#cns_inspect").val('');
              $("#cns_palpate").val('');
              $("#cns_percus").val('');
              $("#cns_aus").val('');
          }
          $scope.physicalEndo = function (item,patient,system) {
              if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalEndocrine.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
              $("#endo_inspect").val('');
              $("#endo_palpate").val('');
              $("#endo_percus").val('');
              $("#endo_aus").val('');
          }
        $scope.savePhysicalExamination = function (objectData) {
            if(objectData == "") {
                swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                return;
            }
         $http.post('/api/postPhysical',objectData).then(function (data) {

            });
            swal(objectData[0].system+'  ' +"system data successfully Saved!","","success");
            $scope.physicalMusculoskeletal = []; $scope.physicalRespiratory = [];  $scope.physicalCardiovascular = [];
            $scope.physicalGastrointestinal = [];  $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];
        }
            $scope.saveLocalExams = function (patient,examData) {

                if(examData == null){
                    swal('Please write examination for this patient first','','error'); return;
                }
                var local_examz = {"admission_id":'',"patient_id":patient.patient_id,
                    "visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"local_examination":examData}
                $http.post('/api/postLocalPhysical',local_examz).then(function (data) {
                });

                swal('Local Examination','data for this patient saved','success');
                $('#local_exam').val('');
            }
        //family and social history
        $scope.saveSocialCommunity = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
        var child = {"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"chronic_illness":item.chronic_illness,"substance_abuse":item.substance_abuse,"adoption":item.adoption,"others":item.others};
        $http.post('/api/familyHistory',child).then(function (data) {
            swal("Family and social history data successfully Saved!","","success");
            });
            $("#chronic_illness").val('');
            $("#substance_abuse").val('');
            $("#adoption").val('');
            $("#others").val('');
        }
            //Provisional , differential and confirmed diagnosis
            $scope.diagnosisTemp =[];
            $scope.addProv = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addDiff = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addConf = function (item,patient,status) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.saveDiagnosis = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postDiagnosis',objectData).then(function (data) {
                    swal("Diagnosis data successfully Saved!","","success");
                });
                $scope.diagnosisTemp =[];
            }
        //Dispositions
            var facilities =[];
            $scope.showFacility = function(searchKey) {
                $http.get('/api/getFacilities',{"searchKey":searchKey}).then(function(data) {

                    facilities = data.data;
                });
                return facilities;
            }
            $scope.exReferral = function (patient,facility,ref) {
                if(facility==null ||ref==null){
                    swal("Please fill all fields and click save","","error");return;
                }
                var ext = {"summary":ref.summary,"patient_id":patient.patient_id,"from_facility_id":facility_id,"sender_id":user_id,"to_facility_id":facility.id,"referral_type":1,"status":1};
                $http.post('/api/postReferral',ext).then(function (data) {
                    $scope.ref == null;
                    swal("Patient Referred successfully","","success");
                });

            }
        $scope.patientAdmission = function (item,patient) {
            if(angular.isDefined(patient) == false){
                swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                return;
            }
            var object = angular.extend({},item, patient);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/admission.html',
                size: 'lg',
                animation: true,
                controller: 'admissionModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.internalTransfer = function (clinic,patient) {

            //var patientDetails = {"sender_clinic_id":1,"first_name":patient.first_name,"middle_name":patient.middle_name,"last_name":patient.last_name,
            //"medical_record_number":patient.medical_record_number,"gender":patient.gender,"dept_id":clinic.dept_id,"dob":patient.dob,"visit_id":patient.account_id};
            var object = angular.extend({},clinic, patient);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/internalTransfer.html',
                size: 'lg',
                animation: true,
                controller: 'admissionModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
            $uibModalInstance.dismiss();
        }
        //Treatments:medication and procedures
        var mediData =[];
        $scope.medicines =[];
        $scope.medicinesOs =[];
        $scope.searchItems = function(searchKey,patient) {
            var pay_id =patient.bill_id;
            if(pay_id==null){
                swal("Please search patient to be prescribed before searching Medicine!");
                return;
            }
            if(patient.main_category_id == 3){
                pay_id = 1;
            }
            $http.post('/api/getMedicine',{"search":searchKey,"facility_id":facility_id,"patient_category_id":pay_id}).then(function(data) {
                mediData = data.data;

            });
            return mediData;

        }
        var balance=[];
            $scope.checkDosage = function (item_id,patient_id) {
var item_name=item_id.item_name;
                $http.post('/api/dosageChecker',{"item_id":item_id.item_id,"patient_id":patient_id}).then(function (data) {
                   if(data.data.length>0){
                        var diff = data.data[0].duration - data.data[0].days;
                        $scope.dosageCheck=data.data;
                        swal('ATTENTION',item_name+' In Dosage Progress '+ diff +' day(s) remained to Complete a Dosage','info');
                    }
                    });


            }
        $scope.addMedicine = function (item,patient,dawa) {

            var status_id = 1;
            var filter = '';
            var main_category = patient.main_category_id;
            var quantity = item.dose*item.duration*24/item.frequency;
            if(patient ==null){ swal("Please search and select Patient to prescribe"); return; }
            if(dawa ==null){ swal("Please search and select medicine!"); return;}
            if(item.instructions ==null){ swal("Please Write Instructions and click 'Add to List' Button","","error"); return;}
            for(var i=0;i<$scope.medicines.length;i++)
                if($scope.medicines[i].item_id == dawa.item_id){ swal(dawa.item_name+" already in your order list!"); return;}
            if(main_category != 1 && dawa.exemption_status == 0){
                filter = patient.bill_id;
            }
            if(main_category == 3  && dawa.exemption_status == 1){
               filter = '';
            }
            if(main_category == 2  && dawa.exemption_status == 1){
               filter = patient.bill_id;
            }
                if(main_category == 3){
                    main_category=1;
                }
            $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":dawa.item_id,"facility_id":facility_id}).then(function (data) {
                 balance = data.data;
                if(balance.length<1){
                    swal(dawa.item_name +' is not available in store.','Contact store manager','info');
                    return;
                }
                else if(balance.length >0 && balance[0].balance>=quantity){
                    $scope.medicines.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                        "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"","payment_filter":filter,
                        "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name,"dose_formulation":dawa.dose_formulation
                    });

                }
                else if (balance.length<1 || balance[0].balance<quantity){
                    var conf= confirm("This Item is not available in Store..Do you want to prescribe anyway?");
                    if(conf== true){
                        for(var i=0;i<$scope.medicinesOs.length;i++)
                            if($scope.medicinesOs[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
                        $scope.medicinesOs.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                            "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"OS",
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                        });
                        swal("Item added under Out of Stock category","","success");

                    }else {
                        swal("canceled","Choose different Item for Prescription","info");
                        return;
                    }
                }
            });
            $("#item_search").val('');
            $("#dose").val('');
            $("#frequency").val('');
            $("#duration").val('');
            $("#instruction").val('');
        }
        $scope.saveMedicine = function () {
            if($scope.medicines == "" && $scope.medicinesOs == ""){
                swal("No Items to Save,Please choose items..","","error");
                return;
            }
            if($scope.medicines !=""){
                $http.post('/api/postMedicines',$scope.medicines).then(function (data) {

                });
                $scope.medicines = [];
            }
            $http.post('/api/outOfStockMedicine',$scope.medicinesOs).then(function (data) {

            });
            swal("Patient successfully prescribed!","","success");
            $scope.medicinesOs = [];
        }
        $scope.prevMedics = function (item) {
            $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                $scope.prevMedicines = data.data;
            });
        }
        $scope.prevProcedure = function (item) {

            $http.post('/api/getPrevProcedures',{"patient_id":item.patient_id}).then(function (data) {
                $scope.prevProcedures = data.data;
            });
        }
            //medical supplies starts
            var supplies = [];
            var balance02 = [];
            $scope.supplies=[];
            $scope.suppliesOS=[];
            $scope.searchMediSupplies = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching medical supplies!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getMedicalSupplies', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    supplies = data.data;
                });
                return supplies;
            }
            $scope.addSupplies = function (patient,qty,item) {
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity =qty;
                if(patient ==null){ swal("Please search and select Patient","","error"); return; }
                if(item ==null){
                    swal("Please search and select Medical supplies!","","error"); return;
                }
                for(var i=0;i<$scope.supplies.length;i++)
                    if($scope.supplies[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(main_category != 1 && item.exemption_status == 0){
                    filter = patient.bill_id;
                }
                if(main_category == 3  && item.exemption_status == 1){
                    filter = '';
                }
                if(main_category == 2  && item.exemption_status == 1){
                    filter = patient.bill_id;
                }
                if(main_category == 3){
                    main_category=1;
                }
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":item.item_id,"facility_id":facility_id}).then(function (data) {
                    balance02 = data.data;
                    if(balance02.length<1){
                        swal(item.item_name +' is not available in store.','Contact store manager','info');
                        return;
                    }
                    else if(balance02.length >0 && balance02[0].balance>=quantity){
                        $scope.supplies.push({"out_of_stock":'',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                        });
                    }
                    else if (balance02.length<1 || balance02[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to select it anyway?","","info");
                        if(conf== true){
                            for(var i=0;i<$scope.suppliesOS.length;i++)
                                if($scope.suppliesOS[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!"); return;}
                            $scope.suppliesOS.push({"out_of_stock":'OS',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item","info");
                            return;
                        }
                    }
                });
                $("#supplies").val('');
                $("#qty").val('');
            }
            $scope.saveSupplies = function (){
                if($scope.supplies == "" && $scope.suppliesOS == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.supplies !=""){
                    $http.post('/api/postMedicalSupplies',$scope.supplies).then(function (data) {

                    });
                    $scope.supplies = [];
                }
                $http.post('/api/outOfStockMedicalSupplies',$scope.suppliesOS).then(function (data) {

                });
                swal("Patient's medical supplies successfully saved!","","success");
                $scope.suppliesOS = [];
            }
            //medical supplies ends
      //procedures
        var procedureData =[];
        $scope.procedures =[];
        $scope.searchProcedures = function(searchKey,patient) {
            var pay_id = patient.bill_id;
            if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
            if (patient.main_category_id == 3) {pay_id = 1; }
            $http.post('/api/getPatientProcedures', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                procedureData = data.data;
            });
            return procedureData;
        }
           $scope.getDefaultProcedures = function (patient) {
               var pay_id = patient.bill_id;
               if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
               if (patient.main_category_id == 3) {pay_id = 1; }
               $http.post('/api/getProcedures',{"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                   $scope.defaultProcedures = data.data;
               });
           }
        $scope.addProcedure = function (item,patient) {
            var filter = '';
            var status_id = 1;
            var main_category = patient.main_category_id;
            if(patient.patient_id ==null){ swal("Please search and select Patient to prescribe"); return; }
            if(item.item_id ==null){ swal("Please search and select Procedure!"); return;}
            for(var i=0;i<$scope.procedures.length;i++)
                if($scope.procedures[i].item_id == item.item_id){
                    swal(item.item_name+" already in your order list!","","info");
                    return;
            }

            if(main_category != 1 && item.exemption_status == 0){
                filter = patient.bill_id;
            }
            if(main_category == 3  && item.exemption_status == 1){
                filter = '';
            }
            if(main_category == 2  && item.exemption_status == 1){
                filter = patient.bill_id;
            }

            $scope.procedures.push({"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":1,"status_id":status_id,
            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                        });
        }
        $scope.saveProcedures = function (objectData) {
            $http.post('/api/postPatientProcedures',objectData).then(function (data) {

            });
            swal("Patient procedures successfully saved!","","success");
            $scope.procedures = [];
        }

        $scope.deceased = function (item,corpse) {
            if(angular.isDefined(corpse)==false){
                swal("An error occurred","Data not saved...Please write causes of death and click send to last office button","error");return;
            }
            var deceased = {"first_name":item.first_name,"middle_name":item.middle_name,"last_name":item.last_name,
                "patient_id":item.patient_id,"user_id":user_id,"facility_id":facility_id,"immediate_cause":corpse.immediate_cause,
                "underlying_cause":corpse.underlying_cause,"dept_id":1};
            $http.post('/api/postDeceased',deceased).then(function (data) {
                if(data.data.status ==0){

                    swal(data.data.data, "", "error");
                }else{
                    swal(item.first_name+' '+item.last_name+" sent to Last office","","success");
                }
            });
            $("#immediate_cause").val('');
            $("#underlying_cause").val('');
        }
		}
    ]);
})();

/**
 * Created by Mazigo Jr on 2017-05-02.
 */
(function () {
    angular.module('authApp').controller('opdQueueController',opdQueueController);
    function opdQueueController($scope,$state,$http,$rootScope,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        angular.element(document).ready(function () {
            $scope.setTab(1);
            $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                $scope.patientData = data.data;
            });
            $http.post('/api/investigationList',{"facility_id":facility_id}).then(function(data) {
                $scope.patientInvData = data.data;
            });
        });
        var patientOpdPatients =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getAllOpdPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientOpdPatients = data.data;
            });
            return patientOpdPatients;
        }
        var patientInvPatients =[];
        $scope.showSearch2 = function(searchKey) {
            console.log(searchKey)
            $http.post('/api/getAllInvPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientInvPatients = data.data;
            });
            return patientInvPatients;
        }

        $scope.getConsultationModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/consultationModal.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.getTreatmentModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/consultationModal.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.billsCancellation = function () {
            $http.post('/api/getBillList',{"facility_id":facility_id}).then(function (data) {
                $scope.patientBill=data.data;
            });
        }
        $scope.getBillModal = function (item) {
           $http.post('/api/cancelPatientBill',{"patient_id":item.patient_id,"facility_id":facility_id}).then(function (data) {
              var object = data.data;
               var modalInstance = $uibModal.open({
                templateUrl:'/views/modules/ClinicalServices/billCancellationModal.html',
                   size: 'lg',
                   animation:true,
                   controller:'opdController',
                   windowClass: 'app-modal-window',
                   resolve :{
                       object: function () {
                           return object;
                       }
                   }
               });
           });
        }
    }
})();

/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('casualtyRoomController', casualtyRoomController);

    function casualtyRoomController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        var patientCategory =[];
        var patientService =[];
        var resdata =[];

        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


        //    TABS


        $scope.tabs = [

        ];


        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };



        var chartDirective = function () {
            return {
                restrict: 'E',
                replace: true,
                template: '<div></div>',
                scope: {
                    config: '='
                },
                link: function (scope, element, attrs) {
                    var chart;
                    var process = function () {
                        var defaultOptions = {
                            chart: { renderTo: element[0] },
                        };
                        var config = angular.extend(defaultOptions, scope.config);
                        chart = new Highcharts.Chart(config);
                    };
                    process();
                    scope.$watch("config.series", function (loading) {
                        process();
                    });
                    scope.$watch("config.loading", function (loading) {
                        if (!chart) {
                            return;
                        }
                        if (loading) {
                            chart.showLoading();
                        } else {
                            chart.hideLoading();
                        }
                    });
                }
            };
        };








        //    @END OF TABS

        //Accordion

        $scope.oneAtATime = true;




        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        //Accordion end

        $scope.viewItem = function (quick_registration) {
            $scope.quick_registration = quick_registration;

            console.log(quick_registration.first_name);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        console.log($scope.quick_registration);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }
        $scope.openDialogForServices = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }

        $scope.patient_urgent_registratione=function (patient) {
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;


            if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration=
                {
                    "first_name":first_name,
                    "middle_name":middle_name,
                    "last_name":last_name,
                    "dob":dob,
                    "gender":gender,
                    "mobile_number":mobile_number,
                    "residence_id":patient_residences,
                    "facility_id":facility_id,
                    "user_id":user_id
                }


            $http.post('/api/urgency_registration',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                //console.log(data.data);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    $scope.patient = null;
                    quick_registration=$scope.quick_registration;
                    $scope.viewItem(quick_registration);


                }
            });



        }
        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidencesEm/'+searchKey).then(function(data) {
                resdata = data.data;
            });
            //console.log(resdata);
            return resdata;
        }





        $scope.patientService = function() {
            var searchKey={'patient_category':$scope.encounter.payment_category.patient_category,'item_name':$scope.encounter};
            console.log($scope.encounter);
            $http.post('/api/searchPatientServicesEm',searchKey).then(function(data) {
                patientService = data.data;
            });
            console.log(resdata);
            return patientService;
        }


        $scope.searchPatientCategory = function(searchKey) {

            $http.get('/api/searchPatientCategoryEm/'+searchKey).then(function(data) {
                patientCategory = data.data;
            });
            //console.log(resdata);
            return patientCategory;
        }


        $scope.getPricedItems=function (patient_category_selected) {
            console.log(patient_category_selected);
            $http.get('/api/getPricedItemsEm/'+patient_category_selected).then(function(data) {
                $scope.services=data.data;
            });

        }







     //   $scope.chart=function (){
         //  chart('December');
    //    }

//$scope.chart();

    }

})();


/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

        function fn_link(scope, element, attrs) {
            var onChange = $parse(attrs.ngFiles);
            element.on('change', function (event) {
                onChange(scope, { $files: event.target.files });
            });
        };

        return {
            link: fn_link
        }
    } ])
        .controller('emergencyController', emergencyController);

    function emergencyController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {
        var formdata = new FormData();

        $scope.getTheFiles = function ($files) {

            angular.forEach($files, function (value, key) {
                formdata.append(key, value);

            });

        };
        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        var patientCategory =[];
        var patientService =[];
        var resdata =[];
        var patientsList=[];

        var _selected;
        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };
        $scope.Gender = [
            {
                "gender":"Male",
                "status": "1"
            },
            {
                "gender":"Female",
                "status": "2"
            }


        ];

        $scope.Insurances = [
            {
                "insurance":"NHIF",
                "status": "1"
            },
            {
                "insurance":"CHIF",
                "status": "2"
            }


        ];

        $scope.verification = function (item) {
            $http.get('https://verification.nhif.or.tz/NHIFService/breeze/Verification/GetCard?CardNo='+item).then(function (data) {
                console.log(data);
                if(data.data.StatusDescription=='Active'){

                    $scope.patient.first_name=data.data.FirstName;
                    $scope.patient.middle_name=data.data.MiddleName;
                    $scope.patient.last_name=data.data.LastName;
                    $scope.patient.gender=data.data.Gender;
                    $scope.patient.dob=data.data.DateOfBirth.substr(0,data.data.DateOfBirth.indexOf('T'));
                    $scope.nhif_patient = {"first_name":data.data.FirstName,
                        "middle_name":data.data.MiddleName,
                        "last_name":data.data.LastName,"gender":data.data.Gender,
                        "dob":data.data.DateOfBirth};

                    swal("CARD VALID") ;
                }
                else {

                    swal("kalipe pesa kijana");
                }
            });

        }
//END INSURANCE API
//INSURANCES API
        $http.get('/api/getInsurances').then(function(data) {
            $scope.insurances=data.data;


        });


        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


        //    TABS


        $scope.tabs = [

        ];


        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };


        //    @END OF TABS

        //Accordion

        //GET PATIENTS
        $scope.getPatients = function (searchKey) {
            console.log(searchKey);
            $http.get('/api/getSeachedPatientsEm/'+searchKey).then(function(data) {
                patientsList=data.data;
                console.log($scope.patients);

            });
            return patientsList;
        }

        //@END GET PATIENTS


        $scope.oneAtATime = true;




        $scope.patient_quick_registration=function (patient) {
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;


            if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


            $http.post('/api/quick_registration',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                console.log($scope.quick_registration);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    var patientData = data.data[0];
                    var accounts_number = data.data[1][0];
                    var residences = data.data[2][0];
                    var getLastVisit= data.data[3];
                    var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                    $scope.patient = null;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                        size: 'lg',
                        animation: true,
                        controller: 'emergencyModal',
                        resolve:{
                            object: function () {
                                console.log(object);
                                return object;
                            }
                        }


                    });

                }
            });



        }


        //SEARCH RESIDENCES
        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                resdata = data.data;
            });
            //console.log(resdata);
            return resdata;
        }
        //@END SEARCH RESIDENCES

        //SEARCH PATIENT SERVICES
        $scope.patientService = function() {
            var searchKey={'patient_category':$scope.encounter.payment_category.patient_category,'item_name':$scope.encounter};
            console.log($scope.encounter);
            $http.post('/api/searchPatientServices',searchKey).then(function(data) {
                patientService = data.data;
            });
            console.log(resdata);
            return patientService;
        }
        //@END SEARCH PATIENT SERVICES

        //PRICED ITEMS
        $scope.getPricedItems=function (patient_category_selected) {
            console.log(patient_category_selected);
            $http.get('/api/getPricedItems/'+patient_category_selected).then(function(data) {
                $scope.services=data.data;
            });

        }
        //@END PRICED ITEMS

        //SEARCH PATIENT CATEGORIES
        $scope.searchPatientCategory = function(searchKey) {

            $http.get('/api/searchPatientCategory/'+searchKey).then(function(data) {
                patientCategory = data.data;
            });
            //console.log(resdata);
            return patientCategory;
        }

        //@END SEARCH PATIENT CATEGORIES



        //MODAL FOR EMMERGENCE REGISTRATION

        $scope.viewItem = function (quick_registration) {
            $scope.quick_registration = quick_registration;

            console.log(quick_registration.first_name);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        console.log($scope.quick_registration);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }
//@END MODAL FOR EMMERGENCE REGISTRATION

        //OPEN DIALOG FOR SERVICES

        $scope.openDialogForServices = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }



        //@END OPEN DIALOG FOR SERVICES
        // Parse the resolve object
        function parseResolve(quick_registration) {
            if (typeof quick_registration === 'string') {
                return {
                    quick_registration: function() {
                        return quick_registration;
                    }
                }
            }
            else if (typeof quick_registration === 'object') {
                //var resolve = {};
                var resolve = $scope.quick_registration;
                angular.forEach(quick_registration, function(value, key) {
                    resolve[key] = function() {
                        //console.log(value);
                        return value;
                    }
                })
                console.log(resolve);
                return resolve;
            }
        }


        //REGISTER PATIENT
        $scope.patient_emergency_registration=function (patient) {
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;


            if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


            $http.post('/api/patient_emergence_registration',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                //console.log(data.data);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    $scope.patient = null;
                    quick_registration=$scope.quick_registration;
                    $scope.viewItem(quick_registration);


                }
            });



        }



        $scope.patient_quick_registration=function (patient) {
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;


            if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


            $http.post('/api/quick_registrationEm',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                console.log($scope.quick_registration);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    var patientData = data.data[0];
                    var accounts_number = data.data[1][0];
                    var residences = data.data[2][0];
                    var getLastVisit= data.data[3];
                    var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                    $scope.patient = null;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                        size: 'lg',
                        animation: true,
                        controller: 'emergencyModal',
                        resolve:{
                            object: function () {
                                console.log(object);
                                return object;
                            }
                        }


                    });

                }
            });



        }


        //@END REGISTER PATIENT


        // exemptions======================================================


        $scope.exemption_type_list=function () {
            $http.get('/api/exemption_type_list').then(function(data) {
                $scope.exemption_types=data.data;


            });
        }

        $scope.exemption_type_list();

        $http.get('/api/getexemption_services/'+facility_id).then(function(data) {
            $scope.exemption_services=data.data;
        });


        $scope.exemption_registration=function (exempt,patientData) {

            console.log(patientData,exempt)
            var status_id = 2;
            var reason_for_revoke = "..";



            if(exempt==undefined){
                swal(
                    'Feedback..',
                    'FILL ALL FIELDS',
                    'error'
                )

            }

            else if (exempt.exemption_type_id==undefined ){
                swal(
                    'Feedback..',
                    'Please Select Exemption Category ',
                    'error'
                )
            }

            else if (exempt.exemption_reason==undefined){
                swal(
                    'Feedback..',
                    'Please Fill  Reason(s) for This exemption ',
                    'error'
                )
            }
            else if (exempt.service==undefined){
                swal(
                    'Feedback..',
                    'Please Choose Service ',
                    'error'
                )
            }



            else{
                var patient=patientData.id;
                var patient_category=exempt.service.patient_category;
                var service_category=exempt.service;
                var service_id=exempt.service.service_id;
                var price_id=exempt.service.price_id;
                var item_type_id=exempt.service.item_type_id;
                var patient_id=patient;
                var facility_id=exempt.service.facility_id;
                var user_id=$rootScope.currentUser.id;
                var payment_filter=exempt.exemption_type_id;

                var bill_category_id=exempt.exemption_type_id;
                var main_category_id=3;

                var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                    'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};


                var status_id=2;

                var exemption_type_id= exempt.exemption_type_id;
                var exemption_reason= exempt.exemption_reason;
                var user_id= $rootScope.currentUser.id;
                var facility_id= $rootScope.currentUser.facility_id;
                var patient_id= patient;
                var status_id= status_id;
                var exemption_type_id=exempt.exemption_type_id;
                var exemption_reason= exempt.exemption_reason;
                var reason_for_revoke= reason_for_revoke;
                var description=exempt.description;

                formdata.append('exemption_type_id',exemption_type_id);
                formdata.append('exemption_reason',exemption_reason);
                formdata.append('user_id',user_id);
                formdata.append('facility_id',facility_id);
                formdata.append('patient_id',patient_id);
                formdata.append('reason_for_revoke',reason_for_revoke);
                formdata.append('status_id',status_id);
                var request = {
                    method: 'POST',
                    url: '/api/'+'patient_exemption',
                    data: formdata,
                    headers: {
                        'Content-Type': undefined
                    }

                };

                // SEND THE FILES.
                $http(request).then(function (data) {

                    var msg = data.data.msg;
                    $scope.ok = data.data.status;
                    //console.log(data.data.status);
                    var statuss = data.data.status;

                    $http.post('/api/enteremergencyEncounter',enterEncounter).then(function(data) {
                        $scope.registrationReport=data.data;

                        if(data.data.status ==0){

                            sweetAlert(data.data.data, "", "error");
                        }else{

                            $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
                                $scope.patientsInfo=data.data;
                            });

                            var modalInstance = $uibModal.open({
                                templateUrl: '/views/modules/registration/printCard.html',
                                size: 'lg',
                                animation: true,
                                controller: 'printCard',
                                resolve:{
                                    patientData: function () {
                                        //console.log($scope.quick_registration);
                                        return $scope.patientData;
                                    }
                                }


                            });

                            //sweetAlert(data.data.data, "", "success");
                            //enterEncounter='';
                        }


                    });

                })
                    .then(function () {
                    });



            }
        }






        // exemptions======================================================
    }

})();




(function () {
    'use strict';
    var app =  angular.module('authApp');
    app.controller('emergencyModal',['$scope','$http','$state','$rootScope','$uibModal','$uibModalInstance','object',
        function ($scope,$http,$state,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.selectedPatient = object;
            $scope.patientBills = object;
            var user_id = $rootScope.currentUser.id;
            var facility_id = $rootScope.currentUser.facility_id;
            var patient_id = object.patient_id;
            $scope.setTab = function(newTab){
                $scope.tab = newTab;
            };
            $scope.isSet = function(tabNum){
                return $scope.tab === tabNum;
            }


            $scope.duration = [
                {"duration": "1"},{"duration": "2"},{"duration": "3"},{"duration": "4"},{"duration": "5"},
                {"duration": "6"}, {"duration": "7"}, {"duration": "8"}, {"duration": "9"}, {"duration": "10"}, {"duration": "11"}, {"duration": "12"}
            ];
            $scope.unit = [
                {"unit": "hours"},{"unit": "days"},{"unit": "weeks"},{"unit": "months"},{"unit": "years"}
            ];
            var _selected;
            $scope.ngModelOptionsSelected = function(value) {
                if (arguments.length) {
                    _selected = value;
                } else {
                    return _selected;
                }
            };

            $scope.modelOptions = {
                debounce: {
                    default: 500,
                    blur: 250
                },
                getterSetter: true
            };


            $scope.toto = function () {
                var  total = 0;
                for(var i = 0; i < $scope.patientBills.length ; i++) {
                    total += ($scope.patientBills[i].quantity * $scope.patientBills[i].price - $scope.patientBills[i].discount);
                }
                return total;
            }
            $scope.cancelBill = function (item) {
                $http.post('/api/cancelBillItem',{"id":item.id,"patient_id":item.patient_id,"facility_id":facility_id,"user_id":user_id}).then(function (data) {
                    swal(item.item_name+" Has been cancelled for this patient","","success");

                });
            }
            $scope.oneAtATime = true;
            $scope.closeModal = function () {
                $uibModalInstance.dismiss();
            }
            $scope.templates = [
                {   name: 'Admission',
                    url: 'admission.html'},
                {
                    name: 'Internal Referral',
                    url: 'internal.html'},
                {
                    name: 'External Referral',
                    url: 'referral.html'},
                {
                    name: 'Deceased',
                    url: 'deceased.html'}
            ];

            //get patients who have paid consultation fee/exempted/insurance
            var patientData =[];
            $scope.showSearch = function(searchKey) {
                $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                    patientData = data.data;

                });
                return patientData;
            }

            var patientInvData = [];
            $scope.showSearch = function (searchKey) {
                $http.post('/api/getOpdInvPatients', {"facility_id": facility_id}).then(function (data) {
                    patientInvData = data.data;
                });
                return patientInvData;
            }
            //Previous History
            angular.element(document).ready(function () {
                $scope.setTab(1);

                $http.post('/api/vitalsDate',{"patient_id":patient_id}).then(function (data) {
                    $scope.vitalsDate = data.data;
                });
                $http.post('/api/prevDiagnosis',{"patient_id":patient_id}).then(function (data) {
                    $scope.diagnosis = data.data;
                });
                $http.post('/api/prevFamilyHistory',{"patient_id":patient_id}).then(function (data) {
                    $scope.familyHistory = data.data;
                });
                $http.post('/api/prevBirthHistory',{"patient_id":patient_id}).then(function (data) {
                    $scope.birthHistory = data.data;
                });
                $http.post('/api/prevHistoryExaminations',{"patient_id":patient_id}).then(function (data) {
                    $scope.historyExaminations = data.data;
                });
                $http.post('/api/prevObsGyn',{"patient_id":patient_id}).then(function (data) {
                    $scope.obsHistory = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":3}).then(function (data) {
                    $scope.radiology = data.data;
                });
                $http.post('/api/prevRoS',{"patient_id":patient_id}).then(function (data) {
                    $scope.ros = data.data;
                });
                $http.post('/api/prevPhysicalExaminations',{"patient_id":patient_id}).then(function (data) {
                    $scope.physicalExaminations = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":2}).then(function (data) {
                    $scope.labInvestigations = data.data;
                });
            });

            $scope.getVitalTime=function (item,patient) {
                $http.post('/api/vitalsTime',{"patient_id":patient.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.vitalsTime = data.data;
                });
            }
            var patientVitals = [];
            $scope.getVitalData=function (item,patient) {
                $http.post('/api/patientVitals',{"patient_id":patient.patient_id,"time_attended":item.time_attended}).then(function (data) {
                    patientVitals = data.data;
                    var object = angular.extend({},patientVitals,patient);
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/ClinicalServices/vitalSigns.html',
                        size: 'lg',
                        animation: true,
                        controller: 'admissionModal',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });
                });
            }
            $scope.getDiagnosis = function (item) {
                $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevDiagnosis = data.data;
                });
            }
            $scope.getHistory = function (item) {
                $http.post('/api/prevHistory',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevHistory = data.data;
                });
            }
            $scope.getRos = function (item) {
                $http.post('/api/getPrevRos',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevRos = data.data;
                });
            }
            $scope.getBirth = function (item) {
                $http.post('/api/getPrevBirth',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevBirth = data.data;
                });
            }
            $scope.getObs = function (item) {
                $http.post('/api/getPrevObs',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevObs = data.data;
                });
            }
            $scope.getFamily = function (item) {
                $http.post('/api/getPrevFamily',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevFamily = data.data;
                });
            }
            $scope.getPhysical = function (item) {
                $http.post('/api/getPrevPhysical',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevPhysical = data.data;
                });
            }
            //chief complaints
            var chiefComplaints = [];
            $scope.complaints = function (search) {
                $http.post('/api/chiefComplaints',{"search":search}).then(function (data) {
                    chiefComplaints = data.data;
                });
                return chiefComplaints;
            }
            //review of systems
            var cardiovascular = [];
            $scope.showCardio = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Cardiovascular"}).then(function (data) {
                    cardiovascular = data.data;
                });
                return cardiovascular;
            }
            var Respiratory = [];
            $scope.showRespiratory = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Respiratory"}).then(function (data) {
                    Respiratory = data.data;
                });
                return Respiratory;
            }
            var gatro = [];
            $scope.showGastro = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Gastrointerstinal"}).then(function (data) {
                    gatro = data.data;
                });
                return gatro;
            }
            var musculo = [];
            $scope.showMusculo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Musculoskeletal"}).then(function (data) {
                    musculo = data.data;
                });
                return musculo;
            }
            var genito = [];
            $scope.showGenito = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Genitourinary"}).then(function (data) {
                    genito = data.data;
                });
                return genito;
            }
            var cns = [];
            $scope.showCNS = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Central Nervous System"}).then(function (data) {
                    cns = data.data;
                });
                return cns;
            }
            var endo = [];
            $scope.showEndo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Endocrine"}).then(function (data) {
                    endo = data.data;
                });
                return endo;
            }
            var allergy = [];
            $scope.showAllergy = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Allergy"}).then(function (data) {
                    allergy = data.data;
                });
                return allergy;
            }
            var pastMed = [];
            $scope.showMedication = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Medication"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }

            var pastMed = [];
            $scope.showIllness = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Past Medical History"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }
            var pastAdm = [];
            $scope.showAdmission = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Admission History"}).then(function (data) {
                    pastAdm = data.data;
                });
                return pastAdm;
            }
            var pastImmune = [];
            $scope.showImmune = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Immunisation"}).then(function (data) {
                    pastImmune = data.data;
                });
                return pastImmune;
            }
            var pastInsp = [];
            $scope.showInspection = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Inspection"}).then(function (data) {
                    pastInsp = data.data;
                });
                return pastInsp;
            }
            var pastPalp = [];
            $scope.showPalpation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Palpation"}).then(function (data) {
                    pastPalp = data.data;
                });
                return pastPalp;
            }
            var pastPerc = [];
            $scope.showPercussion = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Percussion"}).then(function (data) {
                    pastPerc = data.data;
                });
                return pastPerc;
            }
            var pastAus = [];
            $scope.showAuscultation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Auscultation"}).then(function (data) {
                    pastAus = data.data;
                });
                return pastAus;
            }
            var diag = [];
            $scope.showDiagnosis = function (search) {
                $http.post('/api/getDiagnosis',{"search":search}).then(function (data) {
                    diag = data.data;
                });
                return diag;
            }
            $scope.allergyChecker = function (item) {
                $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                    swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
                });
            }
            //Investigations
            $scope.getSubDepts = function (item) {
                $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                    $scope.subDepartments = data.data;
                });
            }
            $scope.getTests = function (item,category) {
                if(angular.isDefined(category)==false){swal("Please...select Patient first","","error");return;}
                var category_id =category.bill_id;
                if(category.main_category_id == 3){
                    category_id = 1;
                }
                $http.post('/api/getPanels',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.panels = data.data;
                });

                $http.post('/api/getSingleTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.singleTests = data.data;
                });

                $http.post('/api/getTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.labTests = data.data;
                    if(data.data.length>0){
                        swal("Items with red marks are currently not available..","But You can still order them if necessary","info");
                    }
                    else {
                        swal("If  no Tests displayed under this category..","Please, Contact Lab manager","info");
                    }
                });
            }
            $scope.investigationOrders = [];
            $scope.unavailableOrders = [];
            $scope.orders = function (item,isChecked,patient) {
                var status_id = 1;
                var filter = '';
                if(patient.patient_id == null){
                    swal("Ooops!! no Patient selected","Please search and select patient first..");
                    return;
                }
                if(isChecked==true){
                    for(var i=0;i<$scope.investigationOrders.length;i++)
                        if($scope.investigationOrders[i].item_id == item.item_id){
                            swal(item.item_name+' '+" already in your order list!");
                            return;
                        }
                    if(item.on_off== 1) {
                        if(patient.main_category_id != 1){ filter = patient.bill_id;}
                        $scope.investigationOrders.push({"requesting_department_id":1,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.item_price_id,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name,
                            "priority":'',"clinical_note":'',"payment_filter":filter});
                        console.log($scope.investigationOrders);
                    }
                    else {
                        for(var i=0;i<$scope.unavailableOrders.length;i++)
                            if($scope.unavailableOrders[i].item_id == item.item_id){
                                swal(item.item_name+' '+" already in your order list!");
                                return;
                            }
                        $scope.unavailableOrders.push({"facility_id":facility_id,"visit_date_id":patient.account_id,
                            "patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name});
                        return;
                    }
                }
            }
            $scope.saveInvestigation = function (item) {
                if ($scope.investigationOrders == "" && $scope.unavailableOrders == null) {
                    swal("You dont have Items to save!", "Please select Items first!");
                    return;
                }
                for (var i = 0; i < $scope.investigationOrders.length; i++) {
                    $scope.investigationOrders[i]["priority"] = item.priority;
                    $scope.investigationOrders[i]["clinical_note"] = item.clinical_note;
                }
                if($scope.investigationOrders !=""){
                    $http.post('/api/postInvestigations', $scope.investigationOrders).then(function (data) {
                    });
                    $scope.investigationOrders = [];

                }
                $http.post('/api/postUnavailableInvestigations',$scope.unavailableOrders).then(function (data) {

                });
                swal("Investigation order successfully saved!");

                $scope.unavailableOrders = [];

            }

            //Investigation results
            $scope.getLabResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.labResults = data.data;
                });
            }
            $scope.getRadResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.radResults = data.data;
                });
            }
//posting from history and examinations
            $scope.complaintz = [];
            $scope.addComplaint = function (item,duration,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                for(var i=0;i<$scope.complaintz.length;i++)
                    if($scope.complaintz[i].id == item.id){
                        swal(item.description+' '+"already in your wish list!");
                        return;
                    }
                $scope.complaintz.push({"admission_id":'',"patient_id":patient.patient_id,"facility_id":facility_id,"visit_date_id":patient.account_id,"user_id":user_id,"description":item.name,
                    "id":item.id,"duration":duration.durationqty.duration,"duration_unit":duration.durationunit.unit,"status":'Chief Complaints'});

            }
            $scope.saveComplaints = function (objectData,history) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please fill all necessary fields, click 'Add' Button then 'Save Complaints' Button to save data..","error");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['other_complaints']= history.other_complaints;
                    objectData[i]['hpi']= history.hpi;
                }
                $http.post('/api/postHistory',objectData).then(function (data) {

                });
                swal("Complaints successfully saved!","","success");
                $scope.complaintz=[];
            }
            $scope.rosTemp = [];
            $scope.reviewOfSystems = function (item,patient) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems2 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems6 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.reviewOfSystems7 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.saveRoS = function (objectData,rosSummary) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['review_summary'] = rosSummary;
                }
                $http.post('/api/postRoS',objectData).then(function (data) {

                });
                swal("Review of systems data successfully Saved!","","success");
                $scope.rosTemp = [];
            }
            //Past medical history
            $scope.pastTemp = [];
            $scope.pastMedicals = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.pastMedicals3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.pastMedicals4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }
            $scope.pastMedicals5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
            }

            $scope.savePastMedical = function (objectData,other_past_medicals) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0; i<objectData.length;i++){
                    objectData[i]['other_past_medicals'] = other_past_medicals;
                }
                $http.post('/api/postPastMed',objectData).then(function (data) {

                });
                swal("Past medical history data successfully Saved!","","success");
                $scope.pastTemp = [];

            }
            $scope.saveBirthHistory = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,
                    "antenatal":item.antenatal,"natal":item.natal,"post_natal":item.post_natal,"nutrition":item.nutrition,"growth":item.growth,"development":item.development};
                $http.post('/api/birthHistory',child).then(function (data) {
                    swal("Birth history data Successfully Saved!","","success");
                });
            }
            $scope.saveObsGyn = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var obs = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"menarche":item.menarche,"menopause":item.menopause,"menstrual_cycles":item.menstrual_cycles,"pad_changes":item.pad_changes,
                    "recurrent_menstruation":item.recurrent_menstruation,"contraceptives":item.contraceptives,"pregnancy":item.pregnancy,"lnmp":item.lnmp,"gravidity":item.gravidity,"parity":item.parity,"living_children":item.living_children};
                $http.post('/api/postObs',obs).then(function (data) {
                    swal("Obstetrics and gynaecological data Successfully Saved!","","success");
                });
            }
            //Physical Examinations
            $scope.removeFromSelection = function(item,objectdata){
                var indexremoveobject = objectdata.indexOf(item);
                objectdata.splice(indexremoveobject,1);
            }
            $scope.physicalMusculoskeletal = [];  $scope.physicalRespiratory = [];
            $scope.physicalCardiovascular = [];  $scope.physicalGastrointestinal = [];
            $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];

            $scope.physicalMusculo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalMusculoskeletal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalResp = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalRespiratory.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalCardio = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCardiovascular.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalGastro = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGastrointestinal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalGenito = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGenitourinary.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalCns = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCNS.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.physicalEndo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalEndocrine.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
            }
            $scope.savePhysicalExamination = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postPhysical',objectData).then(function (data) {

                });
                swal(objectData[0].system+'  ' +"system data successfully Saved!","","success");
                $scope.physicalMusculoskeletal = []; $scope.physicalRespiratory = [];  $scope.physicalCardiovascular = [];
                $scope.physicalGastrointestinal = [];  $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];
            }
            $scope.saveLocalExams = function (patient,examData) {
                if(examData == null){
                    swal('Please write examination for this patient first','','error'); return;
                }
                var local_examz = {"admission_id":'',"patient_id":patient.patient_id,
                    "visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"local_examination":examData}
                $http.post('/api/postLocalPhysical',local_examz).then(function (data) {
                });
                swal('Local Examination','data for this patient saved','success');
            }
            //family and social history
            $scope.saveSocialCommunity = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"chronic_illness":item.chronic_illness,"substance_abuse":item.substance_abuse,"adoption":item.adoption,"others":item.others};
                $http.post('/api/familyHistory',child).then(function (data) {
                    swal("Family and social history data successfully Saved!","","success");
                });
            }
            //Provisional , differential and confirmed diagnosis
            $scope.provisionalDiagnosis =[]; $scope.differentialDiagnosis =[]; $scope.confirmedDiagnosis =[];
            $scope.addProv = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.provisionalDiagnosis.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addDiff = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.differentialDiagnosis.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addConf = function (item,patient,status) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.confirmedDiagnosis.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.saveDiagnosis = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postDiagnosis',objectData).then(function (data) {
                    swal(objectData[0].status+'  ' +"diagnosis data successfully Saved!","","success");
                });
                $scope.provisionalDiagnosis =[]; $scope.differentialDiagnosis =[]; $scope.confirmedDiagnosis =[];
            }
            //Dispositions
            $http.get('/api/getWards/'+facility_id).then(function (data) {
                $scope.wards = data.data;
            });
            $http.get('/api/getSpecialClinics/'+facility_id).then(function (data) {
                $scope.clinics = data.data;
            });
            $scope.patientAdmission = function (item,patient) {
                if(angular.isDefined(patient) == false){
                    swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                    return;
                }
                var object = angular.extend({},item, patient);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/admission.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }
            $scope.internalTransfer = function (clinic,patient) {
                var patientDetails = {"sender_clinic_id":1,"first_name":patient.first_name,"middle_name":patient.middle_name,"last_name":patient.last_name,
                    "medical_record_number":patient.medical_record_number,"gender":patient.gender,"dob":patient.dob,"visit_id":patient.account_id};
                var object = angular.extend({},clinic, patientDetails);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/internalTransfer.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
                $uibModalInstance.dismiss();
            }
            //Treatments:medication and procedures
            var mediData =[];
            $scope.medicines =[];
            $scope.medicinesOs =[];
            $scope.searchItems = function(searchKey,patient) {
                var pay_id =patient.bill_id;
                if(pay_id==null){
                    swal("Please search patient to be prescribed before searching Medicine!");
                    return;
                }
                if(patient.main_category_id == 3){
                    pay_id = 1;
                }
                $http.post('/api/getMedicine',{"search":searchKey,"facility_id":facility_id,"patient_category_id":pay_id}).then(function(data) {
                    mediData = data.data;

                });
                return mediData;

            }
            var balance=[];
            $scope.checkDosage = function (item_id,patient_id) {
                var item_name=item_id.item_name;
                $http.post('/api/dosageChecker',{"item_id":item_id.item_id,"patient_id":patient_id}).then(function (data) {
                    console.log(data.data);
                    if(data.data.length>0){
                        var diff = data.data[0].duration - data.data[0].days;
                        $scope.dosageCheck=data.data;
                        swal('ATTENTION',item_name+' In Dosage Progress '+ diff +' day(s) remained to Complete a Dosage','info');
                    }
                });


            }
            $scope.addMedicine = function (item,patient,dawa) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity = item.dose*item.duration*24/item.frequency;
                if(patient ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(dawa ==null){ swal("Please search and select medicine!"); return;}
                if(item.instructions ==null){ swal("Please Write Instructions and click 'Add to List' Button","","error"); return;}
                for(var i=0;i<$scope.medicines.length;i++)
                    if($scope.medicines[i].item_id == dawa.item_id){ swal(dawa.item_name+" already in your order list!"); return;}
                if(main_category != 1){ filter = patient.bill_id;}
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":dawa.item_id,"facility_id":facility_id}).then(function (data) {
                    balance = data.data;
                    console.log(balance)
                    if(balance.length >0 && balance[0].balance>=quantity){
                        $scope.medicines.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                            "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"","payment_filter":filter,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name,"dose_formulation":dawa.dose_formulation
                        });
                    }
                    else if (balance.length<1 || balance[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to prescribe anyway?");
                        if(conf== true){
                            for(var i=0;i<$scope.medicinesOs.length;i++)
                                if($scope.medicinesOs[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
                            $scope.medicinesOs.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                                "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"OS",
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item for Prescription");
                            return;
                        }
                    }
                });
            }
            $scope.saveMedicine = function () {
                if($scope.medicines == "" && $scope.medicinesOs == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.medicines !=""){
                    $http.post('/api/postMedicines',$scope.medicines).then(function (data) {

                    });
                    $scope.medicines = [];
                }
                $http.post('/api/outOfStockMedicine',$scope.medicinesOs).then(function (data) {

                });
                swal("Patient successfully prescribed!","","success");
                $scope.medicinesOs = [];
            }
            $scope.prevMedics = function (item) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
            }
            $scope.prevProcedure = function (item) {

                $http.post('/api/getPrevProcedures',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevProcedures = data.data;
                });
            }
            //procedures
            var procedureData =[];
            $scope.procedures =[];
            $scope.searchProcedures = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getPatientProcedures', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    procedureData = data.data;
                });
                return procedureData;
            }
            $scope.getDefaultProcedures = function (patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getProcedures',{"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    $scope.defaultProcedures = data.data;
                });
            }
            $scope.addProcedure = function (item,patient) {
                var filter = '';
                var status_id = 1;
                if(patient.patient_id ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(item.item_id ==null){ swal("Please search and select Procedure!"); return;}
                for(var i=0;i<$scope.procedures.length;i++)
                    if($scope.procedures[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(patient.main_category_id != 1){ filter = patient.bill_id;}

                $scope.procedures.push({"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":1,"status_id":status_id,
                    "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                });
            }
            $scope.saveProcedures = function (objectData) {
                $http.post('/api/postPatientProcedures',objectData).then(function (data) {

                });
                swal("Patient procedures successfully saved!","","success");
                $scope.procedures = [];
            }

            $scope.deceased = function (item,corpse) {
                if(angular.isDefined(corpse)==false){
                    swal("An error occurred","Data not saved...Please write causes of death and click send to last office button","error");return;
                }
                var deceased = {"patient_id":item.patient_id,"user_id":user_id,"facility_id":facility_id,"immediate_cause":corpse.immediate_cause,"underlying_cause":corpse.underlying_cause};
                $http.post('/api/postDeceased',deceased).then(function (data) {

                });
                $scope.corpse = null;
                swal(item.first_name+' '+item.last_name+" sent to Last office","","success");
            }
        }
    ]);
})();


/**
 * Created by jeph on 05/06/2017.
 */

(function () {
    angular.module('authApp').controller('emergencyQueueController',emergencyQueueController);
    function emergencyQueueController($scope,$state,$http,$rootScope,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }


            $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                $scope.patientData = data.data;
            });
            $http.post('/api/investigationList',{"facility_id":facility_id}).then(function(data) {
                $scope.patientInvData = data.data;
            });

        var patientOpdPatients =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getAllOpdPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientOpdPatients = data.data;
            });
            return patientOpdPatients;
        }
        var patientInvPatients =[];
        $scope.showSearch2 = function(searchKey) {
            console.log(searchKey)
            $http.post('/api/getAllInvPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientInvPatients = data.data;
            });
            return patientInvPatients;
        }

        $scope.getConsultationModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/consultationModal.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.getTreatmentModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/treatmentModal.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.billsCancellation = function () {
            $http.post('/api/getBillList',{"facility_id":facility_id}).then(function (data) {
                $scope.patientBill=data.data;
            });
        }
        $scope.getBillModal = function (item) {
            $http.post('/api/cancelPatientBill',{"patient_id":item.patient_id,"facility_id":facility_id}).then(function (data) {
                var object = data.data;
                var modalInstance = $uibModal.open({
                    templateUrl:'/views/modules/ClinicalServices/billCancellationModal.html',
                    size: 'lg',
                    animation:true,
                    controller:'opdController',
                    windowClass: 'app-modal-window',
                    resolve :{
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }
    }
})();

/**
 * Created by japhari on 30/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('emergencydepartmentController', emergencydepartmentController);

    function emergencydepartmentController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        $scope.isCollapsedHorizontal = false;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var username=$rootScope.currentUser.name;
        var facility_id=$rootScope.currentUser.facility_id;

        var _selected;
        $scope.oneAtATime = true;
        $scope.templates = [
            {   name: 'ICU',
                url: 'icu.html'
            },
            {   name: 'Wards',
                url: 'ward.html'
            },
            {   name: 'Discharge',
                url: 'deceased.html'
            },

            {
                name: 'Deceased',
                url: 'mortuary.html'
            }
        ];



        //TIME PICKER
        $scope.mytime = new Date();

        $scope.hstep = 1;
        $scope.mstep = 2;

        $scope.options = {
            hstep: [1, 2, 3],
            mstep: [1, 5, 10, 15, 25, 30]
        };

        $scope.ismeridian = true;
        $scope.toggleMode = function() {
            $scope.ismeridian = ! $scope.ismeridian;
        };

        $scope.update = function() {
            var d = new Date();
            d.setHours( 14 );
            d.setMinutes( 0 );
            $scope.mytime = d;
        };
        //@END

        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };

        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });
        //Dispositions




        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


//get patients who have paid consultation fee/exempted/insurance
        var patientData =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getEmPatients',{
                "search":searchKey,
                "facility_id":facility_id
            }).then(function(data)
            {
                patientData = data.data;
            });
            return patientData;
        }

        $scope.openDialogForVitals = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyvitalsModal.html',
                // size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                windowClass: 'app-modal-window',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }

        $scope.states = [
            {
                "name": "Body Weight",
                "unit":"Kg",
                "value":"weight",
                "status": "1"
            },
            {
                "name": "Height/Length",
                "unit":"cm",
                "value":"height",
                "status": "2"
            },{
                "name": "Body Temperature",
                "unit":"℃",
                "value":"temperature",
                "status": "3"
            },{
                "name": "Systolic Pressure",
                "unit":"mmHg",
                "value":"systolic",
                "status": "4"
            },{
                "name": "Diastolic Pressure",
                "unit":"mmHg",
                "value":"diastolic",
                "status": "5"
            },{
                "name": "Respiratory Rate",
                "unit":"Breaths/Min",
                "value":"respiratory",
                "status": "6"
            },{
                "name": "Pulse Rate",
                "unit":"Breaths/Min",
                "value":"pulse",
                "status": "7"
            },{
                "name": "Oxygen Saturation",
                "unit":"Beats/Min",
                "value":"oxygen",
                "status": "8"
            }


        ];






        $scope.VitalSignRegister = function(vitals,id){
            var Body_weight = vitals.Body_weight;
            var height_length = vitals.height_length;
            var Body_temperature = vitals.Body_temperature;
            var Systolic_pressure = vitals.Systolic_pressure;
            var Diastolic_pressure = vitals.Diastolic_pressure;
            var Respiratory_rate = vitals.Respiratory_rate;
            var pulse_rate = vitals.pulse_rate;
            var Oxygen_saturation = vitals.Oxygen_saturation;
            var time_attended = vitals.time_attended;


            var registerVitals={
                'id':id,
                'Body_weight':Body_weight,
                'height_length':height_length,
                'Body_temperature':Body_temperature,
                'Systolic_pressure':Systolic_pressure,
                'Diastolic_pressure':Diastolic_pressure,
                'Respiratory_rate':Respiratory_rate,
                'time_attended':time_attended,
                'Pulse_rate':pulse_rate,
                'facility_id':facility_id,
                'Oxygen_saturation':Oxygen_saturation,
                'registered_by':user_name
            };
            console.log(registerVitals);
            $http.post('/api/VitalSignRegister',registerVitals).then(function(data) {

                console.log(data.data);
                swal(
                    'Vital Sign Sent Successfully',
                    'Successfully Registered',
                    'success'
                )
                vitals.Body_weight=null;
                vitals.height_length=null;
                vitals.Body_temperature=null;
                vitals.Systolic_pressure=null;
                vitals.Diastolic_pressure=null;
                vitals.Respiratory_rate=null;
                vitals.pulse_rate=null;
                vitals.Oxygen_saturation=null;
            });
        };









        $scope.VitalRegister = function(vitals,id){

            console.log(vitals);
            var vitalData = vitals.number;
            var vitalTime = vitals.time;
            var vitalName = vitals.name.value;
            var unit = vitals.name.unit;
            var status = vitals.name.status;
            console.log(vitalName);
            console.log(vitalData);
            console.log(status);


            var VitalData={
                'vital_sign':vitalName,
                'vital_data':vitalData,
                'facility_id':facility_id,
                'status':status,
                'time_attended':vitalTime,
                'unit':unit,
                'registered_by':user_name,
                'patient_id':id
            };

            swal({
                title: username,
                text: "Confirm Vital Signs",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Confirmed!'
            }).then(function () {

                $http.post('/api/VitalRegister',VitalData).then(function(data) {

                    console.log(data.data);
                    vitals.number=null;
                    var msg=data.data.msg;
                    var status=data.data.status;
                    if(status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        )
                    }
                    else{
                        swal(
                            'Vital Sign Sent',
                            msg,
                            'success'
                        )
                    }

                   // $scope.searchOpt='';
                   // $scope.patients();

                });

            })
        };




        //    VIEW PATIENT VITAL SIGN IN EMERGENCE


        $scope.x_axis=[];
        $scope.y_axis=[];

        $scope.viewVitals = function(id){

            console.log(id);

            $http.get('/api/viewVitals/'+id).then(function(data) {
                $scope.vitalData=data.data;
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.x_axis.push(data.data[i].time_attended);
                    $scope.y_axis.push(data.data[i].Body_temperature);

                }
                console.log($scope.y_axis);

                $scope.labels=$scope.x_axis;
                $scope.data=$scope.y_axis;





            });
        };







        $scope.viewVitals = function(id){

            console.log(id);

            $http.get('/api/viewVitals/'+id).then(function(data) {
                $scope.vitalData=data.data;
                $scope.x_axis=[];
                $scope.y_axis=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.x_axis.push(data.data[i].time_attended);
                    $scope.y_axis.push(data.data[i].Body_temperature);

                }
                console.log($scope.y_axis);

                $scope.labels=$scope.x_axis;
                $scope.data=$scope.y_axis;





            });
        };

        $scope.viewDiastolicPressure = function(id){

            console.log(id);

            $http.get('/api/viewDiastolicPressure/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Diastolic_pressure);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };
        $scope.viewTemperature = function(id){

            console.log(id);

            $http.get('/api/viewTemperature/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Body_temperature);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };
        $scope.viewPulseRate = function(id){

            console.log(id);

            $http.get('/api/viewPulseRate/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Pulse_rate);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };








        $scope.viewSystolicPressure = function(id){

            console.log(id);

            $http.get('/api/viewSystolicPressure/'+id).then(function(data) {
                $scope.vitalData=data.data;
                $scope.valueX=[];
                $scope.ValueY=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valueX.push(data.data[i].time_attended);
                    $scope.ValueY.push(data.data[i].Systolic_pressure);

                }
                console.log($scope.ValueY);

                $scope.labels=$scope.valueX;
                $scope.data=$scope.ValueY;





            });
        };



        //    SEND PATIENT TO RESC

        $scope.Resus = function(id){

            var resusUser={
                'id':id,
                'facility':facility_id
            };
            console.log(resusUser);
            $http.post('/api/Resus',resusUser).then(function(data) {

                console.log(data.data);

                swal(
                    username,
                    'Patient  Sent Resuscitation Room',
                    'success'
                )


            });
        };


        //Emergency Users

        $scope.patients=function () {


            $http.get('/api/emergenceUsers/' + facility_id).then(function (data) {
                $scope.observationusers = data.data;
                $scope.selectedPatient='';




            });


        }


        $scope.savePastSurgicalProcedure=function () {



            $http.post('/api/savePastSurgicalProcedure',$scope.records).then(function (data) {
                $scope.surgical = data.data;





            });


        }






        $scope.SaveSummary=function (summy,id) {

         var mode_arrival=summy.mode_arrival;
         var referred=summy.referred;
         var complain=summy.complain;
         var disposition=summy.disposition;
         var condition=summy.condition;
         var acuity=summy.acuity;
         var arrival=summy.arrival;
         var decision=summy.decision;
         var departure=summy.departure;
         var dispoType=summy.dispoType;
         var rm=summy.rm;
         var timeleft=summy.timeleft;
         var triage=summy.triage;
         var visit=summy.visit;


            if (angular.isDefined(mode_arrival)==false) {
                return sweetAlert("Please Fill Mode of Arrival", "", "error");
            }
            else if (angular.isDefined(referred)==false) {
                return sweetAlert("Please Fill Referred Field", "", "error");
            }
            else if (angular.isDefined(complain)==false) {
                return sweetAlert("Please Fill Complain Field", "", "error");
            }
            else if (angular.isDefined(disposition)==false) {
                return sweetAlert("Please Fill Disposition Field", "", "error");
            }
            else if (angular.isDefined(condition)==false) {
                return sweetAlert("Please Fill Condition  Field", "", "error");
            }
            else if (angular.isDefined(acuity)==false) {
                return sweetAlert("Please Fill Acuity  Field", "", "error");
            }
            else if (angular.isDefined(arrival)==false) {
                return sweetAlert("Please Fill Arrival  Field", "", "error");
            }
            else if (angular.isDefined(decision)==false) {
                return sweetAlert("Please Fill Decision  Field", "", "error");
            }
            else if (angular.isDefined(departure)==false) {
                return sweetAlert("Please Fill Departure  Field", "", "error");
            }
            else if (angular.isDefined(dispoType)==false) {
                return sweetAlert("Please Fill Disposition Type  Field", "", "error");
            }
            else if (angular.isDefined(rm)==false) {
                return sweetAlert("Please Fill Rm  Field", "", "error");
            }
            else if (angular.isDefined(timeleft)==false) {
                return sweetAlert("Please Fill Time Left  Field", "", "error");
            }
            else if (angular.isDefined(triage)==false) {
                return sweetAlert("Please Fill Triage  Field", "", "error");
            }
            else if (angular.isDefined(visit)==false) {
                return sweetAlert("Please Fill Visit  Field", "", "error");
            }


            console.log(mode_arrival);
            console.log(id);
            var savSummary={
                'patient_id':id,
                'mode_departure':departure,
                'referred_by':referred,
                'chief_complaint':complain,
                'disposition':disposition,
                'condition_dispo':condition,
                'acuity':acuity,
                'arrival':arrival,
                'dispo_decision':decision,
                'emergency_arrival':mode_arrival,
                'emmergency_dispo':dispoType,
                'rm':rm,
                'time_left':timeleft,
                'triage_impression':triage,
                'visit_type':visit,
                'registered_by':user_name,
                'facility_id':facility_id
            };
console.log(savSummary);


            $http.post('/api/SaveSummary',savSummary).then(function(data) {

                console.log(data.data);

                swal(
                    username,
                    'Visit Summary Sent ',
                    'success'
                )


            });

        }



        $scope.SaveAppearance=function (Appearance,patient) {

            console.log(Appearance);
            console.log(patient);
            var savSummary={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Appearance',
                "system":'Emergency',
                "facility_id":facility_id
            };
            console.log(savSummary);

            $http.post('/api/SaveAppearance',savSummary).then(function (data) {
                $scope.surgical = data.data;
                swal("Data Succesfully Saved!");




            });

        }
        $scope.SaveAirway=function (Appearance,patient) {

            console.log(Appearance);
            console.log(patient);
            var SaveAirway={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Airway',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveAirway',SaveAirway).then(function (data) {
                $scope.surgical = data.data;
                swal("Data Succesfully Saved!");




            });

        }
        $scope.SaveBreathing=function (Appearance,patient) {

            console.log(Appearance);
            console.log(patient);
            var SaveBreathing={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Breathing',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveBreathing',SaveBreathing).then(function (data) {
                $scope.surgical = data.data;
                swal("Data Succesfully Saved!");




            });

        }

        $scope.SaveCirculation=function (Appearance,patient) {

            var SaveCirculation={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Circulation',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveCirculation',SaveCirculation).then(function (data) {
                $scope.surgical = data.data;
                swal("Data Succesfully Saved!");




            });

        }
        $scope.SaveResponsiveness=function (Appearance,patient) {

            var SaveResponsiveness={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Disability',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveResponsiveness',SaveResponsiveness).then(function (data) {
                $scope.surgical = data.data;
                swal("Data Succesfully Saved!");




            });

        }
        $scope.SaveIntervention=function (Appearance,patient) {

            var SaveIntervention={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Intervention',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveIntervention',SaveIntervention).then(function (data) {
                $scope.surgical = data.data;
                swal("Data Succesfully Saved!");




            });

        }



        $scope.SaveExposure=function (Appearance,patient) {

            var SaveExposure={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Exposure',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveExposure',SaveExposure).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }






        $scope.cancel=function () {


            $scope.patients();

        }

        $scope.patients();



        $scope.patientAdmission = function (item,patient) {
            if(patient == null){
                swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                return;
            }
            var object = angular.extend({},item, patient);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/admission.html',
                size: 'lg',
                animation: true,
                controller: 'admissionModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }



    //    DOCTOR PORTION
        $http.post('/api/getOpdPatientsEm',{"facility_id":facility_id}).then(function(data) {
            $scope.patientData = data.data;
        });
        $scope.retrieve = function () {
            $http.post('/api/investigationListEm',{"facility_id":facility_id}).then(function(data) {
                $scope.patientInvData = data.data;
            });

        }


        var patientOpdPatients =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getAllOpdPatientsEm',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientOpdPatients = data.data;
            });
            return patientOpdPatients;
        }
        var patientInvPatients =[];
        $scope.showSearch2 = function(searchKey) {
            console.log(searchKey)
            $http.post('/api/getAllInvPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientInvPatients = data.data;
            });
            return patientInvPatients;
        }
        $scope.getConsultationModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyTabsModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }

        $scope.vitalsDates= function (id) {

            console.log(id);
            $http.get('/api/getVitalsDate/'+id).then(function(data) {
                $scope.vitalDatas=data.data;

            });
        }

        $scope.getTreatmentModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyTabsModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.billsCancellation = function () {
            $http.post('/api/getBillList',{"facility_id":facility_id}).then(function (data) {
                $scope.patientBill=data.data;
            });
        }
        $scope.getBillModal = function (item) {
            $http.post('/api/cancelPatientBill',{"patient_id":item.patient_id,"facility_id":facility_id}).then(function (data) {
                var object = data.data;
                var modalInstance = $uibModal.open({
                    templateUrl:'/views/modules/ClinicalServices/billCancellationModal.html',
                    size: 'lg',
                    animation:true,
                    controller:'opdController',
                    windowClass: 'app-modal-window',
                    resolve :{
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }

    //    @END DOCTOR PORTION




    }



})();


(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('emergencyprintCard',

        ['$scope','$http','$rootScope', '$uibModalInstance', 'object',
            function ($scope,$http,$rootScope, $uibModalInstance, object) {

                $scope.patientData=object.patientsInfo;
                $scope.patientResidences=object.residences;
                console.log($scope.patientData);
                $scope.cancel=function (){
                    $uibModalInstance.dismiss();
                }

                $scope.enterEncounter=function (encounter,patient,facility_id) {


                    if (angular.isDefined(encounter)==false) {
                        return sweetAlert("Please Type the Payment Category", "", "error");
                    }
                    else if (angular.isDefined(encounter.payment_category)==false) {
                        return sweetAlert("Please Type the Payment Category", "", "error");
                    }
                    else if (angular.isDefined(encounter.payment_services)==false) {
                        return sweetAlert("Please Select Service", "", "error");
                    }
                    else{

                        console.log(encounter);
                        var patient_category=encounter.payment_category.patient_category;
                        var service_category=encounter.payment_services;
                        var service_id=encounter.payment_services.service_id;
                        var price_id=encounter.payment_services.price_id;
                        var item_type_id=encounter.payment_services.item_type_id;
                        var patient_id=patient;
                        var facility_id=facility_id;
                        var user_id=$rootScope.currentUser.id;
                        var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
                            'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};

                        $http.post('/api/enterEncounterEm',enterEncounter).then(function(data) {
                            $scope.registrationReport=data.data;

                            if(data.data.status ==0){
                                sweetAlert(data.data.data, "", "error");
                            }else{
                                sweetAlert(data.data.data, "", "success");
                                enterEncounter='';
                            }


                        });



                    }
                }

            }]);





}());

/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp').directive('ngFiles', ['$parse', function ($parse) {

        function fn_link(scope, element, attrs) {
            var onChange = $parse(attrs.ngFiles);
            element.on('change', function (event) {
                onChange(scope, { $files: event.target.files });
            });
        };

        return {
            link: fn_link
        }
    } ])
        .controller('normalRegistrationController', normalRegistrationController);

    function normalRegistrationController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {
        var formdata = new FormData();

        $scope.getTheFiles = function ($files) {

            angular.forEach($files, function (value, key) {
                formdata.append(key, value);

            });

        };
        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        var patientCategory =[];
        var patientService =[];
        var resdata =[];
        var patientsList=[];
        //INSURANCES API
        $http.get('/api/getInsurances').then(function(data) {
            $scope.insurances=data.data;


        });

        $scope.verification = function (item) {
            $http.get('https://verification.nhif.or.tz/NHIFService/breeze/Verification/GetCard?CardNo='+item).then(function (data) {
                console.log(data);
                if(data.data.StatusDescription=='Active'){

                    $scope.patient.first_name=data.data.FirstName;
                    $scope.patient.middle_name=data.data.MiddleName;
                    $scope.patient.last_name=data.data.LastName;
                    $scope.patient.gender=data.data.Gender;
                    $scope.patient.dob=data.data.DateOfBirth.substr(0,data.data.DateOfBirth.indexOf('T'));
                    $scope.nhif_patient = {"first_name":data.data.FirstName,
                        "middle_name":data.data.MiddleName,
                        "last_name":data.data.LastName,"gender":data.data.Gender,
                        "dob":data.data.DateOfBirth};

                    swal("CARD VALID") ;
                }
                else {

                    swal("kalipe pesa kijana");
                }
            });

        }
//END INSURANCE API
        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


        //    TABS


        $scope.tabs = [

        ];






        $scope.getPatients = function (searchKey) {

            if (searchKey.length>3){
                $http.get('/api/getSearchedCasualty/'+searchKey).then(function(data) {
                    patientsList=data.data;
                    console.log($scope.patients);

                });
            }
            console.log(searchKey);
            return patientsList;
        }
        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };


        //    @END OF TABS

        //Accordion

        $scope.oneAtATime = true;




        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        //Accordion end
        //SEARCH RESIDENCES
        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                resdata = data.data;
            });
            //console.log(resdata);
            return resdata;
        }
        //@END SEARCH RESIDENCES

        //SEARCH PATIENT SERVICES
        $scope.patientService = function() {
            var searchKey={'patient_category':$scope.encounter.payment_category.patient_category,'item_name':$scope.encounter};
            console.log($scope.encounter);
            $http.post('/api/searchPatientServices',searchKey).then(function(data) {
                patientService = data.data;
            });
            console.log(resdata);
            return patientService;
        }
        //@END SEARCH PATIENT SERVICES

        //PRICED ITEMS
        $scope.getPricedItems=function (patient_category_selected) {
            console.log(patient_category_selected);
            $http.get('/api/getPricedItems/'+patient_category_selected).then(function(data) {
                $scope.services=data.data;
            });

        }
        //@END PRICED ITEMS

        //SEARCH PATIENT CATEGORIES
        $scope.searchPatientCategory = function(searchKey) {

            $http.get('/api/searchPatientCategory/'+searchKey).then(function(data) {
                patientCategory = data.data;
            });
            //console.log(resdata);
            return patientCategory;
        }

        //@END SEARCH PATIENT CATEGORIES



        //MODAL FOR EMMERGENCE REGISTRATION

        $scope.viewItem = function (quick_registration) {
            $scope.quick_registration = quick_registration;

            console.log(quick_registration.first_name);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        console.log($scope.quick_registration);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }
//@END MODAL FOR EMMERGENCE REGISTRATION

        //OPEN DIALOG FOR SERVICES

        $scope.openDialogForServices = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }



        //OPEN DIALOG FOR URGENCY MODAL

        $scope.openDialogForUrgency = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'urgencyModal',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }



        //@END OPEN DIALOG FOR SERVICES
        // Parse the resolve object
        function parseResolve(quick_registration) {
            if (typeof quick_registration === 'string') {
                return {
                    quick_registration: function() {
                        return quick_registration;
                    }
                }
            }
            else if (typeof quick_registration === 'object') {
                //var resolve = {};
                var resolve = $scope.quick_registration;
                angular.forEach(quick_registration, function(value, key) {
                    resolve[key] = function() {
                        //console.log(value);
                        return value;
                    }
                })
                console.log(resolve);
                return resolve;
            }
        }




        //REGISTER PATIENT
        $scope.patient_urgency_registration=function (patient) {
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;


            if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


            $http.post('/api/urgency_registration',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                //console.log(data.data);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    $scope.patient = null;
                    quick_registration=$scope.quick_registration;
                    $scope.viewItem(quick_registration);


                }
            });



        }

        //@END REGISTER PATIENT



        // exemptions======================================================


        $scope.exemption_type_list=function () {
            $http.get('/api/exemption_type_list').then(function(data) {
                $scope.exemption_types=data.data;


            });
        }

        $scope.exemption_type_list();

        $http.get('/api/getexemption_services/'+facility_id).then(function(data) {
            $scope.exemption_services=data.data;
        });


        $scope.exemption_registration=function (exempt,patientData) {

            console.log(patientData,exempt)
            var status_id = 2;
            var reason_for_revoke = "..";



            if(exempt==undefined){
                swal(
                    'Feedback..',
                    'FILL ALL FIELDS',
                    'error'
                )

            }

            else if (exempt.exemption_type_id==undefined ){
                swal(
                    'Feedback..',
                    'Please Select Exemption Category ',
                    'error'
                )
            }

            else if (exempt.exemption_reason==undefined){
                swal(
                    'Feedback..',
                    'Please Fill  Reason(s) for This exemption ',
                    'error'
                )
            }
            else if (exempt.service==undefined){
                swal(
                    'Feedback..',
                    'Please Choose Service ',
                    'error'
                )
            }



            else{
                var patient=patientData.id;
                var patient_category=exempt.service.patient_category;
                var service_category=exempt.service;
                var service_id=exempt.service.service_id;
                var price_id=exempt.service.price_id;
                var item_type_id=exempt.service.item_type_id;
                var patient_id=patient;
                var facility_id=exempt.service.facility_id;
                var user_id=$rootScope.currentUser.id;
                var payment_filter=exempt.exemption_type_id;

                var bill_category_id=exempt.exemption_type_id;
                var main_category_id=3;

                var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                    'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};


                var status_id=2;

                var exemption_type_id= exempt.exemption_type_id;
                var exemption_reason= exempt.exemption_reason;
                var user_id= $rootScope.currentUser.id;
                var facility_id= $rootScope.currentUser.facility_id;
                var patient_id= patient;
                var status_id= status_id;
                var exemption_type_id=exempt.exemption_type_id;
                var exemption_reason= exempt.exemption_reason;
                var reason_for_revoke= reason_for_revoke;
                var description=exempt.description;

                formdata.append('exemption_type_id',exemption_type_id);
                formdata.append('exemption_reason',exemption_reason);
                formdata.append('user_id',user_id);
                formdata.append('facility_id',facility_id);
                formdata.append('patient_id',patient_id);
                formdata.append('reason_for_revoke',reason_for_revoke);
                formdata.append('status_id',status_id);
                var request = {
                    method: 'POST',
                    url: '/api/'+'patient_exemption',
                    data: formdata,
                    headers: {
                        'Content-Type': undefined
                    }

                };

                // SEND THE FILES.
                $http(request).then(function (data) {

                    var msg = data.data.msg;
                    $scope.ok = data.data.status;
                    //console.log(data.data.status);
                    var statuss = data.data.status;

                    $http.post('/api/urgencyEncounter',enterEncounter).then(function(data) {
                        $scope.registrationReport=data.data;

                        if(data.data.status ==0){

                            sweetAlert(data.data.data, "", "error");
                        }else{

                            $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
                                $scope.patientsInfo=data.data;
                            });

                            var modalInstance = $uibModal.open({
                                templateUrl: '/views/modules/registration/printCard.html',
                                size: 'lg',
                                animation: true,
                                controller: 'printCard',
                                resolve:{
                                    patientData: function () {
                                        //console.log($scope.quick_registration);
                                        return $scope.patientData;
                                    }
                                }


                            });

                            //sweetAlert(data.data.data, "", "success");
                            //enterEncounter='';
                        }


                    });

                })
                    .then(function () {
                    });



            }
        }






        // exemptions======================================================


    }

})();


/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('observationRoomController', observationRoomController);

    function observationRoomController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var facility_id=$rootScope.currentUser.facility_id;
        var patientCategory =[];
        var patientService =[];
        var resdata =[];

        //user menu
        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });

        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


        //    TABS


        $scope.tabs = [

        ];


        $scope.alertMe = function() {
            setTimeout(function() {
                $window.swal(
                    'Use proper ways to avoid Mistakes',
                    username,
                    'error'
                );
            });
        };

        $scope.model = {
            name: 'Tabs'
        };


        //    @END OF TABS

        //Accordion

        $scope.oneAtATime = true;




        $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
        };
        //Accordion end

        $scope.viewItem = function (quick_registration) {
            $scope.quick_registration = quick_registration;

            console.log(quick_registration.first_name);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        console.log($scope.quick_registration);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }
        $scope.openDialogForServices = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyencounterModal.html',
                size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }

        $scope.patient_urgent_registratione=function (patient) {
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;


            if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration=
                {
                    "first_name":first_name,
                    "middle_name":middle_name,
                    "last_name":last_name,
                    "dob":dob,
                    "gender":gender,
                    "mobile_number":mobile_number,
                    "residence_id":patient_residences,
                    "facility_id":facility_id,
                    "user_id":user_id
                }


            $http.post('/api/urgency_registration',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                //console.log(data.data);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    $scope.patient = null;
                    quick_registration=$scope.quick_registration;
                    $scope.viewItem(quick_registration);


                }
            });



        }
        $scope.showSearchResidences = function(searchKey) {

            $http.get('/api/searchResidencesEm/'+searchKey).then(function(data) {
                resdata = data.data;
            });
            //console.log(resdata);
            return resdata;
        }





        $scope.patientService = function() {
            var searchKey={'patient_category':$scope.encounter.payment_category.patient_category,'item_name':$scope.encounter};
            console.log($scope.encounter);
            $http.post('/api/searchPatientServices',searchKey).then(function(data) {
                patientService = data.data;
            });
            console.log(resdata);
            return patientService;
        }


        $scope.searchPatientCategory = function(searchKey) {

            $http.get('/api/searchPatientCategoryEm/'+searchKey).then(function(data) {
                patientCategory = data.data;
            });
            //console.log(resdata);
            return patientCategory;
        }


        $scope.getPricedItems=function (patient_category_selected) {
            console.log(patient_category_selected);
            $http.get('/api/getPricedItems/'+patient_category_selected).then(function(data) {
                $scope.services=data.data;
            });

        }




    }

})();


/**
 * Created by japhari on 30/03/2017.
 */
/**
 * Created by japhari on 07/03/2017.
 */

(function() {

    'use strict';

    angular
        .module('authApp')

        .controller('treatmentDepartmentController', treatmentDepartmentController);

    function treatmentDepartmentController($http, $auth, $rootScope,$state,$timeout,$interval,$location,$scope,$uibModal) {

        $scope.isNavCollapsed = false;
        $scope.isCollapsed = true;
        $scope.isCollapsedHorizontal = true;
        $scope.isCollapsedHorizontal = false;
        var user=$rootScope.currentUser;
        var user_name=$rootScope.currentUser.id;
        var username=$rootScope.currentUser.name;
        var facility_id=$rootScope.currentUser.facility_id;

        var _selected;
        $scope.oneAtATime = true;
        $scope.templates = [
            {   name: 'Resuscitation',
                url: 'resuscitation.html'
            },
            {   name: 'Wards',
                url: 'ward.html'
            },
            {   name: 'Discharge',
                url: 'deceased.html'
            },

            {
                name: 'Deceased',
                url: 'mortuary.html'
            }
        ];



        //TIME PICKER
        $scope.mytime = new Date();

        $scope.hstep = 1;
        $scope.mstep = 2;

        $scope.options = {
            hstep: [1, 2, 3],
            mstep: [1, 5, 10, 15, 25, 30]
        };

        $scope.ismeridian = true;
        $scope.toggleMode = function() {
            $scope.ismeridian = ! $scope.ismeridian;
        };

        $scope.update = function() {
            var d = new Date();
            d.setHours( 14 );
            d.setMinutes( 0 );
            $scope.mytime = d;
        };
        //@END

        $scope.ngModelOptionsSelected = function(value) {
            if (arguments.length) {
                _selected = value;
            } else {
                return _selected;
            }
        };

        $scope.modelOptions = {
            debounce: {
                default: 500,
                blur: 250
            },
            getterSetter: true
        };

        $scope.printUserMenu=function (user_id) {

            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                console.log($scope.menu);

            });

        };

        $http.get('/api/getUserImage/'+user_name).then(function(data) {
            $scope.photo='/uploads/'+data.data[0].photo_path;
            console.log($scope.photo);

        });
        //Dispositions
        $http.get('/api/getWards').then(function (data) {
            $scope.wards = data.data;
        });




        var user_id=$rootScope.currentUser.id;
        var facility=$rootScope.currentUser.facility_id;
        $scope.printUserMenu(user_id);


//get patients who have paid consultation fee/exempted/insurance
        var patientData =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getTretPatients',{
                "search":searchKey,
                "facility_id":facility_id
            }).then(function(data)
            {
                patientData = data.data;
            });
            return patientData;
        }

        $scope.openDialogForVitals = function (selectedPatient) {
            console.log(selectedPatient);
            $scope.quick_registration =selectedPatient;


            console.log($scope.quick_registration);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/emergency/emergencyvitalsModal.html',
                // size: 'lg',
                animation: true,
                controller: 'emergencyModal',
                windowClass: 'app-modal-window',
                resolve:{
                    quick_registration: function () {
                        $scope.cardDetails=$scope.quick_registration;
                        console.log($scope.cardDetails);
                        return $scope.quick_registration ;
                    }
                }


            });

            modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
                console.log($scope.quick_reg);
            });
        }

        $scope.states = [
            {
                "name": "Body Weight",
                "unit":"Kg",
                "value":"weight",
                "status": "1"
            },
            {
                "name": "Height/Length",
                "unit":"cm",
                "value":"height",
                "status": "2"
            },{
                "name": "Body Temperature",
                "unit":"℃",
                "value":"temperature",
                "status": "3"
            },{
                "name": "Systolic Pressure",
                "unit":"mmHg",
                "value":"systolic",
                "status": "4"
            },{
                "name": "Diastolic Pressure",
                "unit":"mmHg",
                "value":"diastolic",
                "status": "5"
            },{
                "name": "Respiratory Rate",
                "unit":"Breaths/Min",
                "value":"respiratory",
                "status": "6"
            },{
                "name": "Pulse Rate",
                "unit":"Breaths/Min",
                "value":"pulse",
                "status": "7"
            },{
                "name": "Oxygen Saturation",
                "unit":"Beats/Min",
                "value":"oxygen",
                "status": "8"
            }


        ];






        $scope.VitalSignRegister = function(vitals,id){
            var Body_weight = vitals.Body_weight;
            var height_length = vitals.height_length;
            var Body_temperature = vitals.Body_temperature;
            var Systolic_pressure = vitals.Systolic_pressure;
            var Diastolic_pressure = vitals.Diastolic_pressure;
            var Respiratory_rate = vitals.Respiratory_rate;
            var pulse_rate = vitals.pulse_rate;
            var Oxygen_saturation = vitals.Oxygen_saturation;
            var time_attended = vitals.time_attended;


            var registerVitals={
                'id':id,
                'Body_weight':Body_weight,
                'height_length':height_length,
                'Body_temperature':Body_temperature,
                'Systolic_pressure':Systolic_pressure,
                'Diastolic_pressure':Diastolic_pressure,
                'Respiratory_rate':Respiratory_rate,
                'time_attended':time_attended,
                'Pulse_rate':pulse_rate,
                'facility_id':facility_id,
                'Oxygen_saturation':Oxygen_saturation,
                'registered_by':user_name
            };
            console.log(registerVitals);
            $http.post('/api/VitalSignRegister',registerVitals).then(function(data) {

                console.log(data.data);
                swal(
                    'Vital Sign Sent Successfully',
                    'Successfully Registered',
                    'success'
                )
                vitals.Body_weight=null;
                vitals.height_length=null;
                vitals.Body_temperature=null;
                vitals.Systolic_pressure=null;
                vitals.Diastolic_pressure=null;
                vitals.Respiratory_rate=null;
                vitals.pulse_rate=null;
                vitals.Oxygen_saturation=null;
            });
        };









        $scope.VitalRegister = function(vitals,id){

            console.log(vitals);
            var vitalData = vitals.number;
            var vitalTime = vitals.time;
            var vitalName = vitals.name.value;
            var unit = vitals.name.unit;
            var status = vitals.name.status;
            console.log(vitalName);
            console.log(vitalData);
            console.log(status);


            var VitalData={
                'vital_sign':vitalName,
                'vital_data':vitalData,
                'facility_id':facility_id,
                'status':status,
                'time_attended':vitalTime,
                'unit':unit,
                'registered_by':user_name,
                'patient_id':id
            };

            swal({
                title: username,
                text: "Confirm Vital Signs",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Confirmed!'
            }).then(function () {

                $http.post('/api/VitalRegister',VitalData).then(function(data) {

                    console.log(data.data);
                    vitals.number=null;
                    var msg=data.data.msg;
                    var status=data.data.status;
                    if(status==0){
                        swal(
                            'Error',
                            msg,
                            'error'
                        )
                    }
                    else{
                        swal(
                            'Vital Sign Sent',
                            msg,
                            'success'
                        )
                    }

                    // $scope.searchOpt='';
                    // $scope.patients();

                });

            })
        };





        //    VIEW PATIENT VITAL SIGN IN EMERGENCE


        $scope.x_axis=[];
        $scope.y_axis=[];

        $scope.viewVitals = function(id){

            console.log(id);

            $http.get('/api/viewVitals/'+id).then(function(data) {
                $scope.vitalData=data.data;
        for(var i=0; i<$scope.vitalData.length; i++) {
            $scope.x_axis.push(data.data[i].time_attended);
            $scope.y_axis.push(data.data[i].Body_temperature);

        }
console.log($scope.y_axis);

                $scope.labels=$scope.x_axis;
                $scope.data=$scope.y_axis;





            });
        };







        $scope.viewVitals = function(id){

            console.log(id);

            $http.get('/api/viewVitals/'+id).then(function(data) {
                $scope.vitalData=data.data;
                $scope.x_axis=[];
                $scope.y_axis=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.x_axis.push(data.data[i].time_attended);
                    $scope.y_axis.push(data.data[i].Body_temperature);

                }
                console.log($scope.y_axis);

                $scope.labels=$scope.x_axis;
                $scope.data=$scope.y_axis;





            });
        };

        $scope.viewDiastolicPressure = function(id){

            console.log(id);

            $http.get('/api/viewDiastolicPressure/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Diastolic_pressure);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };
        $scope.viewTemperature = function(id){

            console.log(id);

            $http.get('/api/viewTemperature/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Body_temperature);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };
        $scope.viewPulseRate = function(id){

            console.log(id);

            $http.get('/api/viewPulseRate/'+id).then(function(data) {
                $scope.vitalData=data.data;


                $scope.vitalData=data.data;
                $scope.valuex=[];
                $scope.valuey=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valuex.push(data.data[i].time_attended);
                    $scope.valuey.push(data.data[i].Pulse_rate);

                }
                console.log($scope.valuey);

                $scope.labels=$scope.valuex;
                $scope.data=$scope.valuey;




            });
        };








        $scope.viewSystolicPressure = function(id){

            console.log(id);

            $http.get('/api/viewSystolicPressure/'+id).then(function(data) {
                $scope.vitalData=data.data;
                $scope.valueX=[];
                $scope.ValueY=[];
                for(var i=0; i<$scope.vitalData.length; i++) {
                    $scope.valueX.push(data.data[i].time_attended);
                    $scope.ValueY.push(data.data[i].Systolic_pressure);

                }
                console.log($scope.ValueY);

                $scope.labels=$scope.valueX;
                $scope.data=$scope.ValueY;





            });
        };



        //    SEND PATIENT TO RESC

        $scope.Resus = function(id){

            var resusUser={
                'patient_id':id,
                'facility':facility_id
            };
            console.log(resusUser);
            $http.post('/api/Resus',resusUser).then(function(data) {

                var value=(data.data);
                console.log(value);

                swal(
                    username,
                    'Patient  Sent Resuscitation Room',
                    'success'
                )


            });
        };


        //Emergency Users

        $scope.patients=function () {


            $http.get('/api/observationUsers/' + facility_id).then(function (data) {
                $scope.observationusers = data.data;
                $scope.selectedPatient='';




            });


        }




        $scope.SaveSummary=function (summy,id) {

            var mode_arrival=summy.mode_arrival;
            var referred=summy.referred;
            var complain=summy.complain;
            var disposition=summy.disposition;
            var condition=summy.condition;
            var acuity=summy.acuity;
            var arrival=summy.arrival;
            var decision=summy.decision;
            var departure=summy.departure;
            var dispoType=summy.dispoType;
            var rm=summy.rm;
            var timeleft=summy.timeleft;
            var triage=summy.triage;
            var visit=summy.visit;


            if (angular.isDefined(mode_arrival)==false) {
                return sweetAlert("Please Fill Mode of Arrival", "", "error");
            }
            else if (angular.isDefined(referred)==false) {
                return sweetAlert("Please Fill Referred Field", "", "error");
            }
            else if (angular.isDefined(complain)==false) {
                return sweetAlert("Please Fill Complain Field", "", "error");
            }
            else if (angular.isDefined(disposition)==false) {
                return sweetAlert("Please Fill Disposition Field", "", "error");
            }
            else if (angular.isDefined(condition)==false) {
                return sweetAlert("Please Fill Condition  Field", "", "error");
            }
            else if (angular.isDefined(acuity)==false) {
                return sweetAlert("Please Fill Acuity  Field", "", "error");
            }
            else if (angular.isDefined(arrival)==false) {
                return sweetAlert("Please Fill Arrival  Field", "", "error");
            }
            else if (angular.isDefined(decision)==false) {
                return sweetAlert("Please Fill Decision  Field", "", "error");
            }
            else if (angular.isDefined(departure)==false) {
                return sweetAlert("Please Fill Departure  Field", "", "error");
            }
            else if (angular.isDefined(dispoType)==false) {
                return sweetAlert("Please Fill Disposition Type  Field", "", "error");
            }
            else if (angular.isDefined(rm)==false) {
                return sweetAlert("Please Fill Rm  Field", "", "error");
            }
            else if (angular.isDefined(timeleft)==false) {
                return sweetAlert("Please Fill Time Left  Field", "", "error");
            }
            else if (angular.isDefined(triage)==false) {
                return sweetAlert("Please Fill Triage  Field", "", "error");
            }
            else if (angular.isDefined(visit)==false) {
                return sweetAlert("Please Fill Visit  Field", "", "error");
            }


            console.log(mode_arrival);
            console.log(id);
            var savSummary={
                'patient_id':id,
                'mode_departure':departure,
                'referred_by':referred,
                'chief_complaint':complain,
                'disposition':disposition,
                'condition_dispo':condition,
                'acuity':acuity,
                'arrival':arrival,
                'dispo_decision':decision,
                'emergency_arrival':mode_arrival,
                'emmergency_dispo':dispoType,
                'rm':rm,
                'time_left':timeleft,
                'triage_impression':triage,
                'visit_type':visit,
                'registered_by':user_name,
                'facility_id':facility_id
            };
            console.log(savSummary);


            $http.post('/api/SaveSummary',savSummary).then(function(data) {

                console.log(data.data);

                swal(
                    username,
                    'Visit Summary Sent ',
                    'success'
                )


            });

        }


        $scope.SaveAppearance=function (Appearance,patient) {

            console.log(Appearance);
            console.log(patient);
            var savSummary={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Appearance',
                "system":'Emergency',
                "facility_id":facility_id
            };
            console.log(savSummary);

            $http.post('/api/SaveAppearance',savSummary).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }
        $scope.SaveAirway=function (Appearance,patient) {

            console.log(Appearance);
            console.log(patient);
            var SaveAirway={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Airway',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveAirway',SaveAirway).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }
        $scope.SaveBreathing=function (Appearance,patient) {

            console.log(Appearance);
            console.log(patient);
            var SaveBreathing={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Breathing',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveBreathing',SaveBreathing).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }

        $scope.SaveCirculation=function (Appearance,patient) {

            var SaveCirculation={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Circulation',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveCirculation',SaveCirculation).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }
        $scope.SaveResponsiveness=function (Appearance,patient) {

            var SaveResponsiveness={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Disability',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveResponsiveness',SaveResponsiveness).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }
        $scope.SaveExposure=function (Appearance,patient) {

            var SaveExposure={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Exposure',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveExposure',SaveExposure).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }
        $scope.SaveIntervention=function (Appearance,patient) {

            var SaveIntervention={
                "observation":Appearance,
                "admission_id":'',
                "patient_id":patient.patient_id,
                "visit_date_id":patient.account_id,
                "user_id":user_id,
                "category":'Intervention',
                "system":'Emergency',
                "facility_id":facility_id
            };


            $http.post('/api/SaveIntervention',SaveIntervention).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });

        }















        $scope.cancel=function () {


            $scope.patients();

        }

        $scope.patients();



        $scope.patientAdmission = function (item,patient) {
            if(patient == null){
                swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                return;
            }
            var object = angular.extend({},item, patient);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/admission.html',
                size: 'lg',
                animation: true,
                controller: 'admissionModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }


        $scope.getPatientData1=function (data)
        {
            console.log(data);
            $scope.selectedPatient=data.data;
            $scope.observationusers='';

        };
        $scope.records=[];
        $scope.addSurgical = function(selectedSurgical,patient,item){
            console.log(selectedSurgical);
            console.log(patient);
            console.log(item);

            $scope.records.push(
                {
                    "descriptions":selectedSurgical,
                    "admission_id":'',
                    "patient_id":patient.patient_id,
                    "visit_date_id":patient.account_id,
                    "user_id":user_id,
                    "status":'Surgical',
                    "facility_id":facility_id
                });

console.log($scope.records);

        };
        $scope.remove=function (index)
        {
            $scope.records.splice(index,1);



        }


        $scope.savePastSurgicalProcedure=function () {

console.log($scope.records);

            $http.post('/api/savePastSurgicalProcedure',$scope.records).then(function (data) {
                $scope.surgical = data.data;
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )




            });


        }
        //DOCTOR PORTION




        //PREVIOUS PROFILE
        $scope.getPatientData = function (item)
        {

            $http.post('/api/vitalsDate',{"patient_id":item.patient_id}).then(function (data) {
                $scope.vitalsDate = data.data;
            });
            $http.post('/api/prevDiagnosis',{"patient_id":item.patient_id}).then(function (data) {
                $scope.diagnosis = data.data;
            });
            $http.post('/api/prevFamilyHistory',{"patient_id":item.patient_id}).then(function (data) {
                $scope.familyHistory = data.data;
            });
            $http.post('/api/prevBirthHistory',{"patient_id":item.patient_id}).then(function (data) {
                $scope.birthHistory = data.data;
            });
            $http.post('/api/prevHistoryExaminations',{"patient_id":item.patient_id}).then(function (data) {
                $scope.historyExaminations = data.data;
            });
            $http.post('/api/prevObsGyn',{"patient_id":item.patient_id}).then(function (data) {
                $scope.obsHistory = data.data;
            });
            $http.post('/api/getResults',{"patient_id":item.patient_id,"dept_id":3}).then(function (data) {
                $scope.radiology = data.data;
            });
            $http.post('/api/prevRoS',{"patient_id":item.patient_id}).then(function (data) {
                $scope.ros = data.data;
            });
            $http.post('/api/prevPhysicalExaminations',{"patient_id":item.patient_id}).then(function (data) {
                $scope.physicalExaminations = data.data;
            });
            $http.post('/api/getResults',{"patient_id":item.patient_id,"dept_id":2}).then(function (data) {
                $scope.labInvestigations = data.data;
            });
            $scope.selectedPatient=item;

            $scope.observationusers='';
        }

        //chief complaints
        var chiefComplaints = [];
        $scope.complaints = function (search) {
            $http.post('/api/chiefComplaints',{"search":search}).then(function (data) {
                chiefComplaints = data.data;
            });
            return chiefComplaints;
        }
        //review of systems
        var cardiovascular = [];
        $scope.showCardio = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Cardiovascular"}).then(function (data) {
                cardiovascular = data.data;
            });
            return cardiovascular;
        }
        var Respiratory = [];
        $scope.showRespiratory = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Respiratory"}).then(function (data) {
                Respiratory = data.data;
            });
            return Respiratory;
        }
        var gatro = [];
        $scope.showGastro = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Gastrointerstinal"}).then(function (data) {
                gatro = data.data;
            });
            return gatro;
        }
        var musculo = [];
        $scope.showMusculo = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Musculoskeletal"}).then(function (data) {
                musculo = data.data;
            });
            return musculo;
        }
        var genito = [];
        $scope.showGenito = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Genitourinary"}).then(function (data) {
                genito = data.data;
            });
            return genito;
        }
        var cns = [];
        $scope.showCNS = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Central Nervous System"}).then(function (data) {
                cns = data.data;
            });
            return cns;
        }
        var endo = [];
        $scope.showEndo = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Endocrine"}).then(function (data) {
                endo = data.data;
            });
            return endo;
        }
        var allergy = [];
        $scope.showAllergy = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Allergy"}).then(function (data) {
                allergy = data.data;
            });
            return allergy;
        }
        var pastMed = [];
        $scope.showMedication = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Medication"}).then(function (data) {
                pastMed = data.data;
            });
            return pastMed;
        }

        var pastMed = [];
        $scope.showIllness = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Past Medical History"}).then(function (data) {
                pastMed = data.data;
            });
            return pastMed;
        }
        var pastAdm = [];
        $scope.showAdmission = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Admission History"}).then(function (data) {
                pastAdm = data.data;
            });
            return pastAdm;
        }
        var pastImmune = [];
        $scope.showImmune = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Immunisation"}).then(function (data) {
                pastImmune = data.data;
            });
            return pastImmune;
        }
        var pastInsp = [];
        $scope.showInspection = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Inspection"}).then(function (data) {
                pastInsp = data.data;
            });
            return pastInsp;
        }
        var pastPalp = [];
        $scope.showPalpation = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Palpation"}).then(function (data) {
                pastPalp = data.data;
            });
            return pastPalp;
        }
        var pastPerc = [];
        $scope.showPercussion = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Percussion"}).then(function (data) {
                pastPerc = data.data;
            });
            return pastPerc;
        }
        var pastAus = [];
        $scope.showAuscultation = function (search) {
            $http.post('/api/reviewOfSystems',{"search":search,"category":"Auscultation"}).then(function (data) {
                pastAus = data.data;
            });
            return pastAus;
        }
        var diag = [];
        $scope.showDiagnosis = function (search) {
            $http.post('/api/getDiagnosis',{"search":search}).then(function (data) {
                diag = data.data;
            });
            return diag;
        }
        $scope.allergyChecker = function (item) {
            $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
            });
        }
        //Investigations
        $scope.getSubDepts = function (item) {
            $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                $scope.subDepartments = data.data;
            });
        }
        $scope.getTests = function (item,category) {
            if(angular.isDefined(category)==false){swal("select Patient first","","error");return;}
            var category_id =category.bill_id;
            if(category.main_category_id == 3){
                category_id = 1;
            }
            $http.post('/api/getPanels',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                $scope.panels = data.data;
            });
            $http.post('/api/getTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                $scope.labTests = data.data;

            });
        }
        $scope.investigationOrders = [];
        $scope.unavailableOrders = [];
        $scope.orders = function (item,isChecked,patient) {
            var status_id = 1;
            var filter = '';
            if(patient.patient_id == null){
                swal("Ooops!! no Patient selected","Please search and select patient first..");
                return;
            }
            if(isChecked==true){
                for(var i=0;i<$scope.investigationOrders.length;i++)
                    if($scope.investigationOrders[i].item_id == item.item_id){
                        swal("Item already in your order list!");
                        return;
                    }
                if(item.on_off== 1) {
                    if(patient.main_category_id != 1){ filter = patient.bill_id;}
                    $scope.investigationOrders.push({"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.item_price_id,"status_id":status_id,
                        "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name,
                        "priority":'',"clinical_note":'',"payment_filter":filter});
                    console.log($scope.investigationOrders);
                }
                else {
                    for(var i=0;i<$scope.unavailableOrders.length;i++)
                        if($scope.unavailableOrders[i].item_id == item.item_id){
                            swal("Item already in your order list!");
                            return;
                        }
                    $scope.unavailableOrders.push({"facility_id":facility_id,"visit_date_id":patient.account_id,
                        "patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name});
                    return;
                }
            }
        }
        $scope.saveInvestigation = function (item) {
            if ($scope.investigationOrders == "" && $scope.unavailableOrders == null) {
                swal("You dont have Items to save!", "Please select Items first!");
                return;
            }
            for (var i = 0; i < $scope.investigationOrders.length; i++) {
                $scope.investigationOrders[i]["priority"] = item.priority;
                $scope.investigationOrders[i]["clinical_note"] = item.clinical_note;
            }
            if($scope.investigationOrders !=""){
                $http.post('/api/postInvestigations', $scope.investigationOrders).then(function (data) {
                });
                $scope.investigationOrders = [];
                $scope.inv == null;
            }
            $http.post('/api/postUnavailableInvestigations',$scope.unavailableOrders).then(function (data) {

            });
            swal({
                title: 'Successfully Registration',
                text: 'Data Saved',
                timer: 2000
            }).then(
                function () {},
                // handling the promise rejection
                function (dismiss) {
                    if (dismiss === 'timer') {

                    }
                }
            )
            $scope.unavailableOrders = [];

        }
        //Investigation results
        $scope.getLabResults = function (item) {
            var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
            $http.post('/api/getInvestigationResults',results).then(function (data) {
                $scope.labResults = data.data;
            });
        }
        $scope.getRadResults = function (item) {
            var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
            $http.post('/api/getInvestigationResults',results).then(function (data) {
                $scope.radResults = data.data;
            });
        }
//posting from history and examinations
        $scope.complaintz = [];
        $scope.addComplaint = function (item,duration,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            for(var i=0;i<$scope.complaintz.length;i++)
                if($scope.complaintz[i].id == item.id){
                    swal("Item already in your wish list!");
                    return;
                }
            $scope.complaintz.push({"admission_id":'',"patient_id":patient.patient_id,"facility_id":facility_id,"visit_date_id":patient.account_id,"user_id":user_id,"description":item.name,
                "id":item.id,"duration":duration.durationqty,"duration_unit":duration.durationunit,"status":'Chief Complaints'});
        }
        $scope.saveComplaints = function (objectData,history) {
            if(objectData == "") {
                swal("Oops Data not saved!", "Please fill all necessary fields, click 'Add' Button then 'Save Complaints' Button to save data..");
                return;
            }
            $http.post('/api/postHistory',objectData).then(function (data) {
                var   id=data.data;
                var hpi={"other_complaints":history.other_complaints,"description": history.hpi,"history_exam_id":id,"status":'HPI'};

                $http.post('/api/historyRecords',hpi).then(function (data) {
                    swal({
                        title: 'Successfully Registration',
                        text: 'Data Saved',
                        timer: 2000
                    }).then(
                        function () {},
                        // handling the promise rejection
                        function (dismiss) {
                            if (dismiss === 'timer') {

                            }
                        }
                    )
                    $scope.complaintz=[];
                });
            });


        }
        $scope.cardiocasucular = []; $scope.respiratory = []; $scope.gastrointestinal = [];
        $scope.musculoskeletal = []; $scope.genitourinary = [];  $scope.cns = []; $scope.endocrine = [];
        $scope.reviewOfSystems = function (item,patient) {

            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.cardiocasucular.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.reviewOfSystems2 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.respiratory.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.reviewOfSystems3 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.gastrointestinal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.reviewOfSystems4 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.musculoskeletal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.reviewOfSystems5 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.genitourinary.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.reviewOfSystems6 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.cns.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.reviewOfSystems7 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.endocrine.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.saveRoS = function (objectData) {
            if(objectData == "") {
                swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                return;
            }
            $http.post('/api/postRoS',objectData).then(function (data) {

            });
            swal({
                title: 'Successfully Registration',
                text: 'Data Saved',
                timer: 2000
            }).then(
                function () {},
                // handling the promise rejection
                function (dismiss) {
                    if (dismiss === 'timer') {

                    }
                }
            )
            $scope.cardiocasucular = []; $scope.respiratory = []; $scope.gastrointestinal = [];
            $scope.musculoskeletal = []; $scope.genitourinary = [];  $scope.cns = []; $scope.endocrine = [];
        }
        //Past medical history
        $scope.allergy = [];    $scope.medications = [];
        $scope.illness = [];    $scope.admissions = [];
        $scope.immunisation = [];
        $scope.pastMedicals = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.allergy.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.pastMedicals2 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.medications.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.pastMedicals3 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.illness.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.pastMedicals4 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.admissions.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }
        $scope.pastMedicals5 = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.immunisation.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
        }

        $scope.savePastMedical = function (objectData) {
            if(objectData == "") {
                swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                return;
            }
            $http.post('/api/postPastMed',objectData).then(function (data) {

            });
            swal({
                title: 'Successfully Registration',
                text: 'Data Saved',
                timer: 2000
            }).then(
                function () {},
                // handling the promise rejection
                function (dismiss) {
                    if (dismiss === 'timer') {

                    }
                }
            )
            $scope.allergy = [];    $scope.medications = [];
            $scope.illness = [];    $scope.admissions = []; $scope.immunisation = [];
        }
        $scope.saveBirthHistory = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            var child = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,
                "antenatal":item.antenatal,"natal":item.natal,"post_natal":item.post_natal,"nutrition":item.nutrition,"growth":item.growth,"development":item.development};
            $http.post('/api/birthHistory',child).then(function (data) {
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )
            });
        }
        $scope.saveObsGyn = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            var obs = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"menarche":item.menarche,"menopause":item.menopause,"menstrual_cycles":item.menstrual_cycles,"pad_changes":item.pad_changes,
                "recurrent_menstruation":item.recurrent_menstruation,"contraceptives":item.contraceptives,"pregnancy":item.pregnancy,"lnmp":item.lnmp,"gravidity":item.gravidity,"parity":item.parity,"living_children":item.living_children};
            $http.post('/api/postObs',obs).then(function (data) {
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )
            });
        }
        //Physical Examinations
        $scope.removeFromSelection = function(item,objectdata){
            var indexremoveobject = objectdata.indexOf(item);
            objectdata.splice(indexremoveobject,1);
        }
        $scope.physicalMusculoskeletal = [];  $scope.physicalRespiratory = [];
        $scope.physicalCardiovascular = [];  $scope.physicalGastrointestinal = [];
        $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];

        $scope.physicalMusculo = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalMusculoskeletal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.physicalResp = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalRespiratory.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.physicalCardio = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalCardiovascular.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.physicalGastro = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalGastrointestinal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.physicalGenito = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalGenitourinary.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.physicalCns = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalCNS.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.physicalEndo = function (item,patient,system) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.physicalEndocrine.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
        }
        $scope.savePhysicalExamination = function (objectData) {
            if(objectData == "") {
                swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                return;
            }
            $http.post('/api/postPhysical',objectData).then(function (data) {

            });
            swal("Data Succesfully Saved!");
            $scope.physicalMusculoskeletal = []; $scope.physicalRespiratory = [];  $scope.physicalCardiovascular = [];
            $scope.physicalGastrointestinal = [];  $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];
        }
        //family and social history
        $scope.saveSocialCommunity = function (item,patient) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            var child = {"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"chronic_illness":item.chronic_illness,"substance_abuse":item.substance_abuse,"adoption":item.adoption,"others":item.others};
            $http.post('/api/familyHistory',child).then(function (data) {
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )
            });
        }
        //Provisional , differential and confirmed diagnosis
        $scope.provisionalDiagnosis =[]; $scope.differentialDiagnosis =[]; $scope.confirmedDiagnosis =[];
        $scope.addProv = function (item,patient,status) {

            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.provisionalDiagnosis.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
        }
        $scope.addDiff = function (item,patient,status) {

            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.differentialDiagnosis.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
        }
        $scope.addConf = function (item,patient,status) {
            if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
            $scope.confirmedDiagnosis.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
        }
        $scope.saveDiagnosis = function (objectData) {
            if(objectData == "") {
                swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                return;
            }
            $http.post('/api/postDiagnosis',objectData).then(function (data) {
                swal({
                    title: 'Successfully Registration',
                    text: 'Data Saved',
                    timer: 2000
                }).then(
                    function () {},
                    // handling the promise rejection
                    function (dismiss) {
                        if (dismiss === 'timer') {

                        }
                    }
                )
            });
            $scope.provisionalDiagnosis =[]; $scope.differentialDiagnosis =[]; $scope.confirmedDiagnosis =[];
        }
        //Dispositions
        $http.get('/api/getWards').then(function (data) {
            $scope.wards = data.data;
        });
        $scope.patientAdmission = function (item,patient) {
            if(angular.isDefined(patient) == false){
                swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                return;
            }
            var object = angular.extend({},item, patient);
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/admission.html',
                size: 'lg',
                animation: true,
                controller: 'admissionModal',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        //Treatments:medication and procedures
        var mediData =[];
        $scope.medicines =[];
        $scope.medicinesOs =[];
        $scope.searchItems = function(searchKey,patient) {
            var pay_id =patient.bill_id;
            if(pay_id==null){
                swal("Please search patient to be prescribed before searching Medicine!");
                return;
            }
            if(patient.main_category_id == 3){
                pay_id = 1;
            }
            $http.post('/api/getMedicine',{"search":searchKey,"facility_id":facility_id,"patient_category_id":pay_id}).then(function(data) {
                mediData = data.data;

            });
            return mediData;

        }
        var balance=[];
        $scope.addMedicine = function (item,patient,dawa) {
            var status_id = 1;
            var filter = '';
            var main_category = patient.main_category_id;

            var quantity = item.dose*item.duration*24/item.frequency;
            if(patient ==null){ swal("Please search and select Patient to prescribe"); return; }
            if(dawa ==null){ swal("Please search and select medicine!"); return;}
            if(item.instructions ==null){ swal("Please Write Instructions and click 'Add to List' Button","","error"); return;}
            for(var i=0;i<$scope.medicines.length;i++)
                if($scope.medicines[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
            if(main_category != 1){ filter = patient.bill_id;}
            if(main_category == 3){  main_category=1;}
            $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":dawa.item_id,"facility_id":facility_id}).then(function (data) {
                balance = data.data;
                if(balance[0].balance>=quantity){
                    $scope.medicines.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                        "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"","payment_filter":filter,
                        "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                    });
                }
                else if (balance[0].balance<quantity){
                    var conf= confirm("This Item is not available in Store..Do you want to prescribe anyway?");
                    if(conf== true){
                        for(var i=0;i<$scope.medicinesOs.length;i++)
                            if($scope.medicinesOs[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
                        $scope.medicinesOs.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                            "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"OS",
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                        });
                        console.log($scope.medicinesOs);
                        swal("Item added under OS category");
                    }else {
                        swal("canceled","Choose different Item for Prescription");
                        return;
                    }
                }


            });



        }
        $scope.saveMedicine = function () {
            if($scope.medicines == "" && $scope.medicinesOs == ""){
                swal("No Items to Save","","error");
                return;
            }
            if($scope.medicines !=""){
                $http.post('/api/postMedicines',$scope.medicines).then(function (data) {

                });
                $scope.medicines = [];
            }
            $http.post('/api/outOfStockMedicine',$scope.medicinesOs).then(function (data) {

            });
            swal("Patient successfully prescribed!");
            $scope.medicinesOs = [];
        }
        //procedures
        var procedureData =[];
        $scope.procedures =[];
        $scope.searchProcedures = function(searchKey,patient) {
            var pay_id = patient.bill_id;
            if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
            if (patient.main_category_id == 3) {pay_id = 1; }
            $http.post('/api/getPatientProcedures', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                procedureData = data.data;
            });
            return procedureData;

        }
        $scope.addProcedure = function (item,patient) {
            var filter = '';
            var status_id = 1;
            if(patient.patient_id ==null){ swal("Please search and select Patient to prescribe"); return; }
            if(item.item_id ==null){ swal("Please search and select Procedure!"); return;}
            for(var i=0;i<$scope.procedures.length;i++)
                if($scope.procedures[i].item_id == item.item_id){ swal("Item already in your order list!"); return;}
            if(patient.main_category_id != 1){ filter = patient.bill_id;}

            $scope.procedures.push({"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":1,"status_id":status_id,
                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
            });
        }
        $scope.saveProcedures = function (objectData) {
            $http.post('/api/postPatientProcedures',objectData).then(function (data) {

            });
            swal({
                title: 'Successfully Registration',
                text: 'Data Saved',
                timer: 2000
            }).then(
                function () {},
                // handling the promise rejection
                function (dismiss) {
                    if (dismiss === 'timer') {

                    }
                }
            )
            $scope.procedures = [];
        }


        //    DOCTOR PORTION-FINISH

    }



})();


/**
 * Created by Japhari on 22/04/2017.
 */
(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('urgencyModal',

        ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'quick_registration',
            function ($scope,$http,$rootScope,$uibModal,$uibModalInstance, quick_registration) {
                $scope.quick_registration=quick_registration;
                console.log($scope.quick_registration);
                $scope.patientData=$scope.quick_registration;
                //console.log($rootScope.currentUser);
                var last_visit={'patient_id':$scope.quick_registration.id,'facility_id':$scope.quick_registration.facility_id};

                $http.post('/api/printLastVisit',last_visit).then(function(data) {
                    $scope.patient_last_visit=data.data;

                    //registration_title
                    console.log($scope.patient_last_visit);
                });



                $scope.enterEncounter=function (encounter,patient,facility_id) {


                    if (angular.isDefined(encounter)==false) {
                        return sweetAlert("Please Type the Payment Category", "", "error");
                    }
                    else if (angular.isDefined(encounter.payment_category)==false) {
                        return sweetAlert("Please Type the Payment Category", "", "error");
                    }
                    else if (angular.isDefined(encounter.payment_services)==false) {
                        return sweetAlert("Please Select Service", "", "error");
                    }
                    else{

                        console.log(encounter);
                        var patient_category=encounter.payment_category.patient_category;
                        var service_category=encounter.payment_services;
                        var service_id=encounter.payment_services.service_id;
                        var price_id=encounter.payment_services.price_id;
                        var item_type_id=encounter.payment_services.item_type_id;
                        var patient_id=patient;
                        var facility_id=facility_id;
                        var user_id=$rootScope.currentUser.id;

                        var bill_category_id=encounter.payment_category.patient_category_id;
                        var main_category_id=encounter.payment_category.patient_main_category_id;

                        var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                            'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};

                        $http.post('/api/urgencyEncounter',enterEncounter).then(function(data) {
                            $scope.registrationReport=data.data;

                            if(data.data.status ==0){

                                sweetAlert(data.data.data, "", "error");
                            }else{

                                $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
                                    $scope.patientsInfo=data.data;
                                });

                                var modalInstance = $uibModal.open({
                                    templateUrl: '/views/modules/emergency/emergencyprintCard.html',
                                    size: 'lg',
                                    animation: true,
                                    controller: 'emergencyprintCard',
                                    resolve:{
                                        patientData: function () {
                                            //console.log($scope.quick_registration);
                                            return $scope.patientData;
                                        }
                                    }


                                });

                                //sweetAlert(data.data.data, "", "success");
                                //enterEncounter='';
                            }


                        });



                    }
                }

                $scope.cancel=function (){
                    console.log('done and cleared');
                    $uibModalInstance.dismiss();

                }


                $scope.closeAllModals=function (){
                    console.log('done and cleared');
                    $uibModalInstance.dismissAll();

                }

            }]);





}());

/**
 * Created by Mazigo Jr on 2017-03-27.
 */
(function () {
    'use strict';
    angular.module('authApp').controller('icuController',icuController);
    function icuController($scope,$http,$rootScope,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        //get user menu
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });
        $http.post('/api/icuPatients',{"facility_id":facility_id}).then(function (data) {
           $scope.icuPatients = data.data;
        });
        $scope.set_diastolic = function (item) {
            if(item.diastolic_pressure>59 && item.diastolic_pressure<81){
                return{
                    color:"green"
                }
            }
            else if(item.diastolic_pressure>79 && item.diastolic_pressure<91){
                return{
                    color:"yellow"
                }
            }
            else if(item.diastolic_pressure>90 && item.diastolic_pressure<101){
                return{
                    color:"red"
                }
            }
            else if(item.diastolic_pressure>39 && item.diastolic_pressure<60){
                return{
                    color:"blue"
                }
            }
        }
        $scope.set_systolic = function (item) {
            if(item.systolic_pressure>89 && item.systolic_pressure<121){
                return{
                    color:"green"
                }
            }
            else if(item.systolic_pressure>120 && item.systolic_pressure<141){
                return{
                    color:"yellow"
                }
            }
            else if(item.systolic_pressure>140 && item.systolic_pressure<191){
                return{
                    color:"red"
                }
            }
            else if(item.systolic_pressure>69 && item.systolic_pressure<91){
                return{
                    color:"blue"
                }
            }
        }
        $scope.set_temp = function (item) {
            if(item.temperature>=36.5 && item.temperature<37.6){
                return{
                    color:"green"
                }
            }
            else if(item.temperature>37.5 && item.temperature<38.3){
                return{
                    color:"yellow"
                }
            }
            else if(item.temperature>40.0 && item.temperature<41.5){
                return{
                    color:"red"
                }
            }
            else if(item.temperature<35.0){
                return{
                    color:"red"
                }
            }
        }

        $scope.diagnosis = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/icu/diagnosisModal.html',
                size: 'lg',
                animation: true,
                controller: 'icuModals',
                resolve: {
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.vitals = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/icu/vitalsModal.html',
                size: 'lg',
                animation: true,
                controller: 'icuModals',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.invResults = function (item) {

            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/icu/investigationModal.html',
                size: 'lg',
                animation: true,
                controller: 'icuModals',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.medication = function (item) {

            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/icu/medicationModal.html',
                size: 'lg',
                animation: true,
                controller: 'icuModals',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.summary = function (item) {

            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/icu/continuationModal.html',
                size: 'lg',
                animation: true,
                controller: 'icuModals',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        $scope.disposition = function (item) {

            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/icu/dispositionModal.html',
                size: 'lg',
                animation: true,
                controller: 'icuModals',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
    }
})();

/**
 * Created by Mazigo Jr on 2017-03-27.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('icuModals',['$scope','$http','$rootScope','$uibModal' ,'$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal, $uibModalInstance, object) {
            var facility_id = $rootScope.currentUser.facility_id;
            $scope.patientDetails = object;
            $http.post('/api/prevDiagnosis',{"patient_id":object.patient_id}).then(function (data) {
                $scope.diagnosisData = data.data;
            });
            $http.post('/api/getResults',{"patient_id":object.patient_id,"dept_id":2}).then(function (data) {
                $scope.labInvestigations = data.data;
            });
            $http.post('/api/getResults',{"patient_id":object.patient_id,"dept_id":3}).then(function (data) {
                $scope.radiology = data.data;
            });
            $scope.oneAtATime = true;
            $http.post('/api/icuVitals',{"patient_id":object.patient_id,"facility_id":facility_id}).then(function (data) {
                $scope.icuVitals = data.data;
                console.log(data.data);
            });

            $scope.getDiagnosis = function (item) {
            $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevDiagnosis = data.data;
                });
            }


        }]);
 }());

/**
 * Created by Mazigo Jr on 2017-04-18.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('claimsModal',['$scope','$http','$rootScope','$uibModal' ,'$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal, $uibModalInstance, object) {
            var facility_id = $rootScope.currentUser.facility_id;
            var user_id = $rootScope.currentUser.id;
            $scope.claims = object;
            var bills = [];
            var fee = 0;
            bills =  $scope.claims;
          var dt = object.date_attended;
          var pt = object.patient_id;
            console.log(dt);
            console.log(pt);
            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
                ////console.log($scope.menu);

            });

            angular.element(document).ready(function () {
                $scope.claimsData=[];
                $http.post('/api/investigationDone',{"facility_id":facility_id,"patient_id":pt,"date_attended":dt}).then(function (data) {

for(var i=0;i<data.data.length;i++){
    $scope.claimsData.push({
        item_name:data.data[0][i].item_name,inv_code:data.data[0][i].inv_code,price:data.data[0][i].price,doctor_name:data.data[0][i].user_name,
        mobile_number:data.data[0][i].mobile_number,profession:data.data[0][i].prof_name,
        medicine:data.data[1][i].medicine,medi_code:data.data[1][i].medi_code,
        quantity:data.data[1][i].quantity, sub_med_total:data.data[1][i].sub_med_total,
        procedure_name:data.data[2][i].procedure_name, proc_code:data.data[2][i].proc_code,
        proc_price:data.data[2][i].proc_price, procedure_category:data.data[2][i].procedure_category,

    })
}

               $scope.MedTotal1=     $scope.medTotal($scope.claimsData);
               $scope.invTotal1=     $scope.medTotal($scope.claimsData);
               $scope.procTotal1=     $scope.procTotal($scope.claimsData);

                });
               });

            $http.post('/api/getConfirmed',{"patient_id":pt,"date_attended":dt}).then(function (data) {
                $scope.diagnosis = data.data;
                console.log(data.data)
            });

            $http.get('/api/getConsultationFee/'+facility_id).then(function (data) {
                $scope.fee = data.data;
                fee = data.data[0].price;

            });

                $scope.invTotal = function () {
                    var  total = 0;
                    for(var i = 0; i <  $scope.claimsData.length ; i++) {
                        total += ( $scope.claimsData[i].price);
                    }
                    return total;
                }
                $scope.medTotal = function () {
                    var  total = 0;
                    for(var i = 0; i <  $scope.claimsData.length ; i++) {
                        total += ( $scope.claimsData[i].sub_med_total);
                    }
                    return total;
                }
                $scope.procTotal = function () {
                    var  total = 0;
                    for(var i = 0; i <  $scope.claimsData.length ; i++) {
                        total += ( $scope.claimsData[i].proc_price);
                    }
                    return total;
                }
                $scope.grandTotal = function () {
                    return $scope.medTotal() + $scope.invTotal() +  $scope.procTotal();
                }
            $scope.printInvoice = function printInvoice()
            {
                var DocumentContainer = document.getElementById('contentToPrint');
                var WindowObject = window.open("", "PrintWindow",
                    "width=750,height=650,top=50,left=50,toolbars=no,scrollbars=yes,status=no,resizable=yes");
                WindowObject.document.title = "Print Receipt: GoT-HOMIS";
                WindowObject.document.writeln(DocumentContainer.innerHTML);
                WindowObject.document.close();

                setTimeout(function(){
                    WindowObject.focus();
                    WindowObject.print();
                    WindowObject.close();
                },2000);

                $state.reload();

            }


    }]);
}());

/**
 * Created by Mazigo Jr on 2017-04-18.
 */
(function () {
    'use strict';
    angular.module('authApp').controller('insuranceController',insuranceController);

    function insuranceController($scope,$rootScope,$http,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            ////console.log($scope.menu);

        });

        $scope.getDates = function (item) {
            $http.post('/api/getNhifDates',{"start":item.start,"end":item.end,"facility_id":facility_id}).then(function (data) {
                $scope.insurance_attendence = data.data;
            });
        }
        $scope.getPatients = function (item) {
           $http.post('/api/getInsurancePatients',{"date_attended":item.date_attended,"facility_id":facility_id}).then(function (data) {
              $scope.patients = data.data;
           });
        }
        $scope.getClaimForm = function (item) {
            var object = item;
            console.log(item)
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/insurance/claimForm.html',
                size: 'lg',
                animation: true,
                controller: 'claimsModal',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

        }
    }
})();

/**
 * Created by Mazigo Jr on 2017-04-20.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('addItemsModal',['$scope','$http','$rootScope','$uibModal' ,'$uibModalInstance',
        function ($scope,$http,$rootScope,$uibModal, $uibModalInstance) {
            var facility_id = $rootScope.currentUser.facility_id;

            $http.get('/api/inventoryItemTypes/'+facility_id).then(function (data) {
               $scope.itemTypes =data.data;
            });
            $scope.saveItem = function (item) {
                if(angular.isDefined(item.item_name)==""){
                swal("Please Type Item name","","error");
                    return;
                }
                else if(angular.isDefined(item.item_type_id)==""){
                swal("Please choose Iem type then click save","","error");
                    return;
                }

                var newItem = {"item_name":item.item_name,"item_type_id":item.item_type_id,"facility_id":facility_id};
                $http.post('/api/postNewItem',newItem).then(function (data) {

                });
                $scope.items = null;
                swal("Item saved","","success");
            }

        }]);
}());

/**
 * Created by Mazigo Jr on 2017-04-05.
 */
(function () {
    'use strict';
    angular.module('authApp').controller('inventoryController',inventoryController);
    function inventoryController($scope,$rootScope,$http,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        var itemsData =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/inventoryItems',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                itemsData = data.data;

            });
            return itemsData;
        }
        var itemsReceived =[];
        $scope.showItemsReceived = function(searchKey) {
            $http.post('/api/inventoryReceivedItems',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                itemsReceived = data.data;
                console.log(itemsReceived);
            });
            return itemsReceived;
        }
        var receiver= [];
        $scope.showUsers = function (searchKey) {
            $http.post('/api/itemReceivers',{"search":searchKey,"facility_id":facility_id}).then(function (data) {
              receiver = data.data;
            });
            return receiver;
        }
        var location= [];
        $scope.showLocations = function (searchKey) {
            $http.post('/api/inventoryLocations',{"search":searchKey,"facility_id":facility_id}).then(function (data) {
                location = data.data;
            });
            return location;
        }
        $scope.saveItemtypes = function (item) {
            $http.post('/api/itemTypes',{"item_type_name":item.item_type_name,"item_type_code":item.item_type_code,"facility_id":facility_id}).then(function (data) {

            });
            swal("Data Saved");
            $scope.item = null;
        }
        $scope.saveLocation = function (item) {
            $http.post('/api/locations',{"location_name":item.location_name,"location_code":item.location_code,"facility_id":facility_id}).then(function (data) {

            });
            swal("Data Saved");
            $scope.location = null;
        }
        $scope.newItems = function () {
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/inventory/quotationModal.html',
                size: 'lg',
                animation: true,
                controller: 'addItemsModal'
            });
        }
        $scope.receiveItem = function (item) {
            var receive = {"item_id":item.selectedItem.id,"user_id":user_id,"facility_id":facility_id,"batch":item.batch,"quantity":item.quantity,
            "cost_price":item.cost_price,"description":item.description,"asset_number":item.asset_number,"serial_number":item.serial_number,"supplier":item.supplier};
           $http.post('/api/receiveItem',receive).then(function (data) {

           });
            swal("Item successfully received","","success");
            $scope.receive = null;
        }
        $scope.issueItem = function (item) {
           var issue = {"user_id":user_id,"facility_id":facility_id,"quantity":item.quantity,"item_received_id":item.selectedItem.received_id,"issuing_officer_id":facility_id,"receiver_id":item.receiver_id.id,"location_id":item.location_id.id}
          $http.post('/api/issueItem',issue).then(function (data) {

            });
           // $scope.issue = null;
           // swal("Item Issued successfully","","success");
        }
    }
})();

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('LabPanelComponetsController',
                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance','toastr', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,toastr,object) {
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;
            $scope.results = {
                'sections': []
            };
            $scope.results.sections = object.getPanelComponets;
            $scope.getPanelComponets=object.getPanelComponets;
            $scope.regex=/\s/g;

            $scope.closeModal=function() {
                $uibModalInstance.dismiss();
            }


            $scope.approveComponent = function(getPanelComponet) { //this is called with the submit
              var componentsResults=[];
              var field_id;
              $scope.getPanelComponets.forEach(function (getPanelComponet) {
                       componentsResults.push({
                          'panel_name':getPanelComponet.panel,
                          'component_name':getPanelComponet.panel_compoent_name,
                          'component_id':getPanelComponet.id,
                          'order_id':getPanelComponet.order_id,
                          'item_id':getPanelComponet.item_id,
                          'minimum_limit':getPanelComponet.minimum_limit,
                          'maximum_limit':getPanelComponet.maximum_limit,
                          'si_units':getPanelComponet.si_units,
                          'sample_no':getPanelComponet.sample_no,
                          'user_id':user_id,
                          'component_name_value':getPanelComponet.component_name_value
                      });




              });

                if(componentsResults.length != $scope.getPanelComponets.length){
               return toastr.error('','All fields are required.');
                }

                 $http.post('/api/approveComponentsResults',componentsResults).then(function(data) {
                  if(data.status==0){
                     toastr.error('',data.data.data);
                  }else{
                      toastr.success('','Results Approveds');
                  }
                     $scope.closeModal();
                });
                }

            $scope.saveComponent = function(getPanelComponet) { //this is called with the submit
              var componentsResults=[];
              var field_id;
              $scope.getPanelComponets.forEach(function (getPanelComponet) {
                  field_id = getPanelComponet.panel_compoent_name.replace($scope.regex, '_');
                  if ($('#' + field_id).val() != '') {
                      componentsResults.push({
                          'panel_name': getPanelComponet.panel,
                          'component_name': getPanelComponet.panel_compoent_name,
                          'component_id': getPanelComponet.id,
                          'order_id': getPanelComponet.order_id,
                          'item_id': getPanelComponet.item_id,
                          'minimum_limit': getPanelComponet.minimum_limit,
                          'maximum_limit': getPanelComponet.maximum_limit,
                          'si_units': getPanelComponet.si_units,
                          'sample_no': getPanelComponet.sample_no,
                          'user_id': user_id,
                          'component_name_value':$('#'+field_id).val()
                      });

                  }


              });

                if(componentsResults.length != $scope.getPanelComponets.length){
               return toastr.error('','All fields are required.');
                }

                 $http.post('/api/saveComponentsResults',componentsResults).then(function(data) {
                  if(data.status==0){
                     toastr.error('',data.data.data);
                  }else{
                      toastr.success('','Results Saved ');
                  }
                     $scope.closeModal();
                });
                }


            $scope.cancel=function (){
                console.log('done and cleared');
                $uibModalInstance.dismiss();

            }

 $scope.confirmRejectResults=function(getTestRequest) {

                var object=getTestRequest;

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/confirmRejectResults.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printSampleNumberBarcode',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });


            }







		              }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('LabTestRequestPatient',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;
                $scope.singleTests=object.singleTests;
                $scope.PanelsTests=object.PanelsTests;
                $scope.patientPaticulars=object.getTestRequest;
                $scope.getTestRequests=object.getTestRequest;
                $scope.getTestRequest=object.getTestRequest;

                console.log($scope.getTestRequests);

            $scope.cancel=function (){
                $uibModalInstance.dismiss();

            }

            $scope.getTestComponents=function(panel,order_id) {
                var postData={"order_id":order_id,"panel_name":panel};
                $http.post('/api/getPanelComponets',postData).then(function(data) {
                    $scope.getPanelComponets = data.data;
                    var object ={"getPanelComponets":$scope.getPanelComponets};
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/laboratory/enterComponentsResults.html',
                        size: 'lg',
                        animation: true,
                        controller: 'LabPanelComponetsController',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });

                });
            }

            $scope.getTestComponentsResults=function(sample_no,item_id,panel,order_id) {
                var postData={"sample_no":sample_no,"item_id":item_id,"order_id":order_id,"panel_name":panel};
                console.log(postData);
                $http.post('/api/getPanelComponetsResults',postData).then(function(data) {
                    $scope.getPanelComponets = data.data;
                    var object ={"getPanelComponets":$scope.getPanelComponets};
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/laboratory/verifyComponentsResults.html',
                        size: 'lg',
                        animation: true,
                        controller: 'LabPanelComponetsController',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });

                });
            }






                var admission_id='';
            //patientWardBed/{admission_id}
            var admission_id=$scope.patientPaticulars.admission_id;
            $http.get('/api/patientWardBed/'+admission_id).then(function(data) {
                $scope.getAdmisionInfos = data.data[0];

                console.log($scope.getAdmisionInfos);
            });

            $scope.saveSampleNumber=function(sub_department_name,request_id) {

                if (angular.isDefined(request_id)==false) {
                    return sweetAlert("Select TEST to be done", "", "error");
                }
                else{
                    return sweetAlert("TEST request "+request_id, "", "success");
                    var dataPost={"equipment_status_id":device.equip_status,"id":equipment.id};
                    $http.post('/api/saveNewDeviceStatus',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{
                            $http.get('/api/getEquipementList').then(function(data) {
                                $scope.equipementLists=data.data;

                            });
                        	var msg="Working status for "+equipment.equipment_name+" was successfully Changed";
                            $uibModalInstance.dismiss();
                            sweetAlert(msg, "", "success");
                        }});
                }
            }

            $scope.generateSampleNumber=function(sample_type,last_name,sub_department_name,request_id) {

                    var dataPost={"sample_type":sample_type,"order_control":null,"order_validator_id":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};

                    $http.post('/api/generateSampleNumber',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{

                            $scope.sampleResposes=data.data;

                            var object_resp =  $scope.sampleResposes;

                            var htmlcontent ='<div id="printable"><div class="row"><div class="form-group col-md-9">'+sub_department_name+''+object_resp.barcode +''+object_resp.last_name +'-'+object_resp.sample_number+' </div></div></div>';


                     //  var barcode='<img src="data:image/png;base64,{{DNS1D::getBarcodePNG('11', 'C39')}}" alt="barcode" />';

                            var object ={"last_name":object_resp.last_name,"sub_department_name":sub_department_name,"sample_number":object_resp.sample_number,"image_code":object_resp.barcode};
                            var modalInstance = $uibModal.open({
                                templateUrl: '/views/modules/laboratory/barcode_print_out.html',
                                size: 'lg',
                                animation: true,
                                controller: 'barcodeModal',
                                windowClass: 'app-modal-window',
                                resolve:{
                                    object: function () {
                                        return object;
                                    }
                                }
                            });

                            /**  swal({
                                title:'',
                                text:'',
                                customClass: 'swal-wide',
                                html: htmlcontent
                            }); **/



                        }});
                }
//function to notify user if sample cancelled
            $scope.playAudio = function() {
                var audio = new Audio('/notification/thrown.mp3');
                audio.play();
            };








            $scope.reGenerateSampleNumber=function(last_name,sub_department_name,request_id) {

                if (angular.isDefined(request_id)==false) {
                    return sweetAlert("Select TEST to be done", "", "error");
                }
                else{
                    $scope.playAudio();
                    var dataPost={"order_control":1,"order_validator_id":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};


                    $http.post('/api/generateSampleNumber',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{
                        	//var msg=sub_department_name+"<br>"+data.data.barcode+""+data.data.last_name+"-"+data.data.sample_number;
                           // $uibModalInstance.dismiss();
                            //sweetAlert(msg, "", "success");
                            $scope.samples=data.data;

                           var object =  $scope.samples;

                            var htmlcontent ='<div class="row"><div class="form-group col-md-9">'+sub_department_name+''+object.barcode +''+object.last_name +'-'+object.sample_number+' </div></div>';


                            swal({
                                title:'',
                                text:'',
                                customClass: 'swal-wide',
                                html: htmlcontent
                            });

                            /**
                            var modalInstance = $uibModal.open({
                                templateUrl: '/views/modules/laboratory/printBarcodeSampleNumber.html',
                                size: 'lg',
                                animation: true,
                                controller: 'printSampleNumberBarcode',
                                resolve:{
                                    object: function () {
                                        return object;
                                    }
                                }
                            });
**/


                        }});
                }
            }



            $scope.closeModal=function() {
                $uibModalInstance.dismiss();
            }





            $scope.confirmReject=function(getTestRequest) {

                var object=getTestRequest;

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/printBarcodeSampleNumber.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printSampleNumberBarcode',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });


            }


 $scope.confirmRejectResults=function(getTestRequest) {

                var object=getTestRequest;

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/confirmRejectResults.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printSampleNumberBarcode',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });


            }







		              }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('SampleTestingModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;
                $scope.singleTests=object.singleTests;
                $scope.PanelsTests=object.PanelsTests;
                $scope.patientPaticulars=object.patientPaticulars;


            $scope.getTestComponents=function(panel,order_id) {
                var postData={"order_id":order_id,"panel_name":panel};
                $http.post('/api/getPanelComponets',postData).then(function(data) {
                    $scope.getPanelComponets = data.data;
                    var object ={"getPanelComponets":$scope.getPanelComponets};
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/laboratory/enterComponentsResults.html',
                        size: 'lg',
                        animation: true,
                        controller: 'LabPanelComponetsController',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });

                });
            }

            $scope.getTestComponentsResults=function(sample_no,item_id,panel,order_id) {
                var postData={"sample_no":sample_no,"item_id":item_id,"order_id":order_id,"panel_name":panel};
                console.log(postData);
                $http.post('/api/getPanelComponetsResults',postData).then(function(data) {
                    $scope.getPanelComponets = data.data;
                    var object ={"getPanelComponets":$scope.getPanelComponets};
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/laboratory/verifyComponentsResults.html',
                        size: 'lg',
                        animation: true,
                        controller: 'LabPanelComponetsController',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });

                });
            }






                var admission_id='';
            //patientWardBed/{admission_id}
            var admission_id=$scope.patientPaticulars.admission_id;
            $http.get('/api/patientWardBed/'+admission_id).then(function(data) {
                $scope.getAdmisionInfos = data.data[0];

                console.log($scope.getAdmisionInfos);
            });

            $scope.saveSampleNumber=function(sub_department_name,request_id) {

                if (angular.isDefined(request_id)==false) {
                    return sweetAlert("Select TEST to be done", "", "error");
                }
                else{
                    return sweetAlert("TEST request "+request_id, "", "success");
                    var dataPost={"equipment_status_id":device.equip_status,"id":equipment.id};
                    $http.post('/api/saveNewDeviceStatus',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{
                            $http.get('/api/getEquipementList').then(function(data) {
                                $scope.equipementLists=data.data;

                            });
                        	var msg="Working status for "+equipment.equipment_name+" was successfully Changed";
                            $uibModalInstance.dismiss();
                            sweetAlert(msg, "", "success");
                        }});
                }
            }

            $scope.generateSampleNumber=function(sample_type,last_name,sub_department_name,request_id) {

                    var dataPost={"sample_type":sample_type,"order_control":null,"order_validator_id":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};

                    $http.post('/api/generateSampleNumber',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{

                            $scope.sampleResposes=data.data;

                            var object =  $scope.sampleResposes;

                            var htmlcontent ='<div id="printable"><div class="row"><div class="form-group col-md-9">'+sub_department_name+''+object.barcode +''+object.last_name +'-'+object.sample_number+' </div></div></div>';


                            swal({
                                title:'',
                                text:'',
                                customClass: 'swal-wide',
                                html: htmlcontent
                            });



                        }});
                }
//function to notify user if sample cancelled
            $scope.playAudio = function() {
                var audio = new Audio('/notification/thrown.mp3');
                audio.play();
            };








            $scope.reGenerateSampleNumber=function(last_name,sub_department_name,request_id) {

                if (angular.isDefined(request_id)==false) {
                    return sweetAlert("Select TEST to be done", "", "error");
                }
                else{
                    $scope.playAudio();
                    var dataPost={"order_control":1,"order_validator_id":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};


                    $http.post('/api/generateSampleNumber',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{
                        	//var msg=sub_department_name+"<br>"+data.data.barcode+""+data.data.last_name+"-"+data.data.sample_number;
                           // $uibModalInstance.dismiss();
                            //sweetAlert(msg, "", "success");
                            $scope.samples=data.data;

                           var object =  $scope.samples;

                            var htmlcontent ='<div class="row"><div class="form-group col-md-9">'+sub_department_name+''+object.barcode +''+object.last_name +'-'+object.sample_number+' </div></div>';


                            swal({
                                title:'',
                                text:'',
                                customClass: 'swal-wide',
                                html: htmlcontent
                            });

                            /**
                            var modalInstance = $uibModal.open({
                                templateUrl: '/views/modules/laboratory/printBarcodeSampleNumber.html',
                                size: 'lg',
                                animation: true,
                                controller: 'printSampleNumberBarcode',
                                resolve:{
                                    object: function () {
                                        return object;
                                    }
                                }
                            });
**/


                        }});
                }
            }



            $scope.closeModal=function() {
                $uibModalInstance.dismiss();
            }





            $scope.confirmReject=function(getTestRequest) {

                var object=getTestRequest;

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/printBarcodeSampleNumber.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printSampleNumberBarcode',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });


            }


 $scope.confirmRejectResults=function(getTestRequest) {

                var object=getTestRequest;

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/confirmRejectResults.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printSampleNumberBarcode',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });


            }







		              }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('barcodeModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;
                $scope.sample_number=object.sample_number;
                $scope.image_code=object.image_code;
                $scope.last_name=object.last_name;
                $scope.sub_department_name=object.sub_department_name;

            $scope.closeModal=function() {
                $uibModalInstance.dismiss();
            }
        }]);

}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('equipmentsInfo',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

                   $scope.equipment=object;

            $http.get('/api/getEquipementStatus').then(function(data) {
                $scope.getEquipementStatuses = data.data;


            });




            $scope.saveNewDeviceStatus= function (device,equipment) {
                if (angular.isDefined(device)==false) {
                    return sweetAlert("Select DEVICE Status", "", "error");
                }
                else{

                    var dataPost={"equipment_status_id":device.equip_status,"id":equipment.id};


                    $http.post('/api/saveNewDeviceStatus',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{
                            $http.get('/api/getEquipementList').then(function(data) {
                                $scope.equipementLists=data.data;

                            });
                        	var msg="Working status for "+equipment.equipment_name+" was successfully Changed";
                            $uibModalInstance.dismiss();
                            sweetAlert(msg, "", "success");
                        }});
                }
            }


		              }]);
		
		
		
		
		
}());

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('labController',labController);

    function labController($http, $auth, $rootScope,$state,$location,$scope,$uibModal,toastr) {
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
        $scope.mytime1 = new Date();
        $scope.mytime2 = new Date();

				  $scope.AdmissionNotes="";
				  var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];	
				   
				     angular.element(document).ready(function () {
                         $scope.setTabSamples(1);
                         $scope.getTestsAvailable();
                         $scope.getEquipementList();
                         $scope.setTabSamplesProcessor(1);
                          });



  $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });

        $scope.getSms=function (mobile,smsText) {
            $http.get('http://kiuta.co.tz/oneapi-php-master/examples.php?mobile='+mobile+'&sms='+smsText).then(
                function (response) {
                    toastr.success('','SMS SENT TO NASSORO');
                },
                function (data,response) {
                    toastr.success('','SMS SENT TO '+mobile);
                })
        }

// GET EQUIPMENTS INFO..
        $scope.getEquipmentInfo= function (equipementList) {

                console.log(equipementList);
                var object =angular.extend(equipementList);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/equipmentsInfo.html',
                    size: 'lg',
                    animation: true,
                    controller: 'equipmentsInfo',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });





        }
		
		$scope.setTabEquipments = function(newTab){
            $scope.tab = newTab;
            $scope.getEquipementList();
			$http.get('/api/getEquipementStatus').then(function(data) {
            $scope.getEquipementStatuses=data.data;
                $http.get('/api/getLabDepartments').then(function(data) {
                    $scope.LabDepartments=data.data;
                });

            });			
        };


        $scope.setTabPendingResults = function(newTab){
            $scope.tab = newTab;
        };

	$scope.setTabBloodBank = function(newTab){
            $scope.tab = newTab;
            $scope.getEquipementList();
			$http.get('/api/getEquipementStatus').then(function(data) {
            $scope.getEquipementStatuses=data.data;
                $http.get('/api/getLabDepartments').then(function(data) {
                    $scope.LabDepartments=data.data;
                });

            });
        };

        $scope.setTabSamples = function(newTab){
            $scope.tab = newTab;
            $scope.getCollectedSample();
            $scope.getLabTestRequests();
            $scope.getCancelledSample();
            $scope.getLabDepartments();

			$http.get('/api/getEquipementStatus').then(function(data) {
            $scope.getEquipementStatuses=data.data;
                $http.get('/api/getLabDepartments').then(function(data) {
                    $scope.LabDepartments=data.data;
                });

            });
        };

        $scope.setTabRejectSample = function(newTab) {
            $scope.getCancelledSample();
            $scope.tab = newTab;
        }

        $scope.setTabSamplesProcessor = function(newTab){
            $scope.tab = newTab;
            $scope.getCollectedSample();
            $scope.getCancelledSample();
            $scope.getCollectedSampleDepartments();
            $scope.getLabResults();
            $scope.getApprovedResults();
			$http.get('/api/getEquipementStatus').then(function(data) {
            $scope.getEquipementStatuses=data.data;
                $http.get('/api/getLabDepartments').then(function(data) {
                    $scope.LabDepartments=data.data;
                });

            });
        };

  $scope.setTabCollected = function(newTab){
            $scope.tab = newTab;
            $scope.getCollectedSample();
                 };

  $scope.setTabTestPrice = function(newTab){
            $scope.tab = newTab;
                  };

        $scope.setTabResultsAprrove = function(newTab){
            $scope.tab = newTab;
            $scope.getCollectedSample();
            $scope.getCancelledSample();
            $scope.getCollectedSampleDepartments();
            $scope.getLabResultsVerify();
            $scope.getLabResults();
			$http.get('/api/getEquipementStatus').then(function(data) {
            $scope.getEquipementStatuses=data.data;
                $http.get('/api/getLabDepartments').then(function(data) {
                    $scope.LabDepartments=data.data;
                });

            });
        };

        $scope.setTabLabTests = function(newTab){
            $scope.tab = newTab;

			$http.get('/api/getEquipementStatus').then(function(data) {
            $scope.getEquipementStatuses=data.data;
                $http.get('/api/getLabDepartments').then(function(data) {
                    $scope.LabDepartments=data.data;
                });

            });
        };
		


		$scope.getLabDepartments = function(){
			$http.get('/api/getLabDepartments').then(function(data) {
            $scope.labDepartments=data.data;
            console.log($scope.labDepartments);
            });
        };


		$scope.getCollectedSampleDepartments = function(){
			$http.get('/api/getCollectedSampleDepartments').then(function(data) {

                    $scope.labDepartmentCollectedSamples = data.data;
                    console.log($scope.labDepartmentCollectedSamples);
            });
        };

		$scope.getLabResults = function(){
			$http.get('/api/getLabResults').then(function(data) {
                    $scope.LabResults = data.data;
                              });
        }
        //Get All test per specific order..
        $scope.validateLabResultsPerOrder = function(sub_department_id){
			$http.get('/api/validateLabResultsPerOrder/'+sub_department_id).then(function(data) {
                    $scope.validateLabResults = data.data;
                              });
        }


        $scope.validateLabResultsPerRequest= function(order_id){


            $scope.dataLoading = true;
            $http.get('/api/validateLabResultsPerRequest/'+order_id).then(function(data) {
                var singleTests = data.data[0];
                var PanelsTests = data.data[1];
                var patientPaticulars = data.data[2];

                var object ={"patientPaticulars":patientPaticulars,"singleTests":singleTests,"PanelsTests":PanelsTests};
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/getResultsToVerify.html',
                    size: 'lg',
                    animation: true,
                    controller: 'SampleTestingModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });



            }).finally(function () {
                $scope.dataLoading = false;
            });



        };







        $scope.getLabResultsVerify = function(){
			$http.get('/api/validateLabResults').then(function(data) {
                    $scope.verifyLabResults = data.data;
                              });
        }

		$scope.getLabCollectedSample = function(sub_department_id){
            $scope.dataLoading = true;
            console.log(sub_department_id);
			$http.get('/api/getLabCollectedSample/'+sub_department_id).then(function(data) {
            $scope.getLabCollectedSamples=data.data;
            }).finally(function () {
                $scope.dataLoading = false;
            });
        }
		$scope.getLabTestRequests= function(){
			$http.get('/api/LabTestRequest/'+facility_id).then(function(data) {
            $scope.LabTestRequests=data.data;
            console.log($scope.LabTestRequests);
            });
        };
		$scope.getCollectedSample= function(){
			$http.get('/api/getCollectedSample').then(function(data) {
            $scope.collectedSamples=data.data;

            });
        };
		$scope.getCancelledSample= function(){
			$http.get('/api/getCancelledSample').then(function(data) {
            $scope.cancelledSamples=data.data;

            });
        };
		$scope.getTestRequestAll= function(LabTestRequest){
		    $scope.getLabTestRequests();
		     var order_id=LabTestRequest.order_id;
			$http.get('/api/LabTestRequestPatient/'+order_id).then(function(data) {
			        var object ={'patientPaticulars':data.data[0],'getTestRequest':data.data[0],'singleTests':data.data[0],};

			        var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/LabTestRequestPatient.html',
                    size: 'lg',
                    animation: true,
                    controller: 'LabTestRequestPatient',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });

            });
        };
        $scope.saveTestResults=function(getTestRequest,results) {
            console.log(getTestRequest);
            var sample_no=getTestRequest.sample_no;
            var last_name=getTestRequest.last_name;
            var sub_department_name=getTestRequest.sub_department_name;
            var request_id=getTestRequest.request_id;
            var results=results;
            if (angular.isDefined(results)==false) {
                return sweetAlert("Enter Results for Sample# "+sample_no, "", "error");
            }
            else{
                $scope.playAudio();
                var dataPost={"results":results,"sample_no":sample_no,"order_control":3,"verified_by":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};
                $http.post('/api/sendLabResult',dataPost).then(function(data) {
                    if(data.data.status ==0){
                        sweetAlert(data.data.data, "", "error");
                    }
                    else{
                        $scope.playAudio();
                        var msg="Results for  Sample No."+sample_no+"  Was successfully Saved";
                              sweetAlert(msg, "", "success");
                    }});
            }
        }
        $scope.approveTestResults=function(getTestRequest) {
            console.log(getTestRequest);

            var sample_no = getTestRequest.sample_no;
            var last_name = getTestRequest.last_name;
            var sub_department_name = getTestRequest.sub_department_name;
            var mobile_number = getTestRequest.mobile_number;
            var msg = "Salamu " + last_name + ", majibu kutoka  " + sub_department_name + " maabara yametumwa kwa daktari.";
            var request_id = getTestRequest.request_id;
            var results = 'Patient Result Approved';
            if (angular.isDefined(results) == false) {
                return sweetAlert("Enter Results for Sample# " + sample_no + " before Approving", "", "error");
            }
            else {
                $scope.playAudio();
                var dataPost = {
                    "results": results,
                    "sample_no": sample_no,
                    "order_control": 3,
                    "verified_by": user_id,
                    "last_name": last_name,
                    "facility_id": facility_id,
                    "request_id": request_id
                };
                $http.post('/api/approveLabResult', dataPost).then(function (data) {
                    if (data.data.status == 0) {
                        sweetAlert(data.data.data, "", "error");
                    }
                    else {
                        $scope.playAudio();
                        var msg = "Results for  Sample No." + sample_no + "  Was successfully Approved";
                        sweetAlert(msg, "", "success");
                    }
                });

                $http.get('/api/processMobileNumber/'+mobile_number).then(function(data) {
                    var mobile=data.data;
                    $scope.getSms(mobile,msg);

                });
            }

        }




		$scope.getSamplesToTest= function(order_id){
            $scope.dataLoading = true;
			$http.get('/api/getLabCollectedSamplePerOrderNumber/'+order_id).then(function(data) {

                var singleTests = data.data[0];
                var PanelsTests = data.data[1];
                var patientPaticulars = data.data[2];

                var object ={"patientPaticulars":patientPaticulars,"singleTests":singleTests,"PanelsTests":PanelsTests};
			        var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/getSamplesToTest.html',
                    size: 'lg',
                    animation: true,
                    controller: 'SampleTestingModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }).finally(function () {
                $scope.dataLoading = false;
            });



        };

		$scope.getSamplesToTestUsingSampleNo= function(sample_number){
            $scope.dataLoading = true;
			$http.get('/api/getLabCollectedSamplePerSampleNumber/'+sample_number).then(function(data) {

                var singleTests = data.data[0];
                var PanelsTests = data.data[1];
                var patientPaticulars = data.data[2];

                var object ={"patientPaticulars":patientPaticulars,"singleTests":singleTests,"PanelsTests":PanelsTests};
			        var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/getSamplesToTest.html',
                    size: 'lg',
                    animation: true,
                    controller: 'SampleTestingModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }).finally(function () {
                $scope.dataLoading = false;
            });



        };

        $scope.getApprovedResults= function(){
            $scope.dataLoading = true;
			$http.get('/api/getApprovedResults').then(function(data) {
                $scope.approvedResults=data.data;

            }).finally(function () {
                $scope.dataLoading = false;
            });
        }



		$scope.reCollectTestRequests= function(cancelledSamples){
		      var order_id=cancelledSamples.order_id;
		      console.log(order_id);
			$http.get('/api/getCanceledTest/'+order_id).then(function(data) {
			    var object ={"getTestRequest":data.data};
			    console.log(object);
                    var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/laboratory/LabTestRequestPatient.html',
                    size: 'lg',
                    animation: true,
                    controller: 'LabTestRequestPatient',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });



            });
        };





		$scope.getEquipementList = function(){
			$http.get('/api/getEquipementList').then(function(data) {
            $scope.equipementLists=data.data;

            });
        };

		$scope.getTestPanels = function(){
			$http.get('/api/getTestPanel').then(function(data) {
            $scope.testPanels=data.data;

            });
        };

		$scope.getTestsAvailable= function(){
			$http.get('/api/LabTests').then(function(data) {
            $scope.LabTests=data.data;

            });
        };
		
		$scope.setTabObservation = function(newTab){				
            $scope.tab = newTab;
			//$scope.setTabAdmission(1);
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });		
        };
		
		$scope.setTabNursingCare = function(newTab){				
            $scope.tab = newTab;
			//$scope.setTabAdmission(1);
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });		
        };
		
		
		
		$scope.setTabWardtypes = function(newTab){				
            $scope.tab = newTab;
			
			$http.post('/api/getWardTypes').then(function(data) {
            $scope.getWardTypes=data.data;
					
            });			
        };	
		
		
		$scope.setTabTreatment = function(newTab){				
            $scope.tab = newTab;
			
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });	
        };
		
		
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime = true;
				   		   
						   
						

  $scope.addWardTypes= function (wards) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(wards)==false) {
                   return sweetAlert("Please Enter WARD TYPE", "", "error");
                  }else{
	$http.post('/api/saveWardTypes',{"ward_type_name":wards.ward_type}).then(function(data) {
           
			 if(data.data.status ==0){
					 $scope.wards = null;
					 sweetAlert(data.data.data, "", "error");
				  }else{
					   $scope.wards = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }





        $scope.addDevices= function (device) {
	             if (angular.isDefined(device)==false) {
                   return sweetAlert("Please Enter DEVICE ", "", "error");
                 }
                            else{

	             var dataPost={"eraser":0,"reagents":device.reagents,"equipment_name":device.equip_name,
                         "equipment_status_id":device.equip_status,"sub_department_id":device.subdepartment,"facility_id":facility_id,"user_id":user_id};

                 $http.post('/api/addDevices',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     device.reagents= null;
                     device.equip_name= null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


       $scope.addLabTest= function (test) {
	             if (angular.isDefined(test)==false) {
                   return sweetAlert("Please Enter TEST Name", "", "error");
                 }
                            else{

	             var dataPost={"erasor":0,"equipment_id":test.equipment_id,"minimum_limit":test.minimum_limit,"panel_compoent_name":test.name,
                         "si_units":test.si_units,"maximum_limit":test.maximum_limit,"user_id":user_id};

                 $http.post('/api/addLabTest',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     test.name= null;
                     test.si_units= null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.addLabTestPanel= function (testPanel) {
	             if (angular.isDefined(testPanel)==false) {
                   return sweetAlert("Please Enter TEST PANEL ", "", "error");
                 }
                 else{
	             var dataPost={"erasor":0,"item_id":testPanel.item_id,"equipment_id":testPanel.equipment_id,"minimum_limit":testPanel.minimum_limit,"panel_compoent_name":testPanel.name,
                         "si_units":testPanel.si_units,"maximum_limit":testPanel.maximum_limit,"user_id":user_id};
	             console.log(dataPost);
                 $http.post('/api/addLabTestPanel',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     testPanel.name= null;
                     sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.addLabPanel= function (test) {
	             if (angular.isDefined(test)==false) {
                   return sweetAlert("Please Enter LAB TEST PANEL", "", "error");
                 }
                            else{

	             var dataPost={"erasor":0,"equipment_id":test.equipment_id,"panel_name":test.name,
                        "user_id":user_id};

                 $http.post('/api/addLabPanel',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     test.name= null;
                     test.si_units= null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }





        $scope.PreOPCondition= function (PreOPCondition,selectedPatient) {
	             if (angular.isDefined(PreOPCondition)==false) {
                   return sweetAlert("Please Enter Pre Operation Condition", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="PRE-OPERTION CONDITION";
	             var dataPost={"erasor":0,"noted_value":PreOPCondition.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":PreOPCondition.case,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }



        $scope.anaesthBloodLoss= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF BLOOD COLLECTED", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="BLOOD LOSS";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.noted_amount,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthFluidGiven= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF FLUID GIVEN", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="FLUID GIVEN";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount_fluid,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.noted_amount_fluid,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


 $scope.anaesthUrineOutput= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF URINE OUTPUT", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="URINE OUTPUT";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.urine_output,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.urine_output,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     pulse_rate.urine_output = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


 $scope.anaesthComplications= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Write any Compilcations found during Operations", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else{
	             var information_category="COMPLICATIONS";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.complications,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.complications,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     pulse_rate.complications = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthPulseRate= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="PULSE RATE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthSystolic= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="SYSTOLIC PRESSURE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	pulse_rate.read = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthDiastolic= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read_diastolic==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="DIASTOLIC PRESSURE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read_diastolic,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	pulse_rate.read_diastolic = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthIntubation= function (Intubation,selectedPatient) {
	             if (angular.isDefined(Intubation)==false) {
                   return sweetAlert("Please Enter INTUBATION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="INTUBATION";
	             var dataPost={"erasor":0,"noted_value":Intubation.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Intubation.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthRespiration= function (Respiration,selectedPatient) {
	             if (angular.isDefined(Respiration)==false) {
                   return sweetAlert("Please Enter RESPIRATION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="RESPIRATION";
	             var dataPost={"erasor":0,"noted_value":Respiration.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Respiration.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthLocal= function (Local,selectedPatient) {
	             if (angular.isDefined(Local)==false) {
                   return sweetAlert("Please Enter LOCAL INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="LOCAL";
	             var dataPost={"erasor":0,"noted_value":Local.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Local.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthPosition= function (Position,selectedPatient) {
	             if (angular.isDefined(Position)==false) {
                   return sweetAlert("Please Enter POSITION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="POSITION";
	             var dataPost={"erasor":0,"noted_value":Position.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Position.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthNeedle= function (Needle,selectedPatient) {
	             if (angular.isDefined(Needle)==false) {
                   return sweetAlert("Please Enter NEEDLE INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="NEEDLE";
	             var dataPost={"erasor":0,"noted_value":Needle.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Needle.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Needle = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthEffect= function (Effect,selectedPatient) {
	             if (angular.isDefined(Effect)==false) {
                   return sweetAlert("Please Enter NEEDLE INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="EFFECT";
	             var dataPost={"erasor":0,"noted_value":Effect.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Effect.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Effect = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

		$scope.saveHb= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter Laboratory Status", "", "error");
                  } 
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='LABORATORY STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.laboratory,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {
           
			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.laboratory = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }


        $scope.savePreAnaestheticOrder= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter PRE ANAESTHETIC ORDER", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='PRE ANAESTHETIC ORDER';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.pre_anaesthetic_order,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
				    hb.pre_anaesthetic_order = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }


        $scope.saveAnaestheticTechniques= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter ANAESTHETIC TECHNIQUES", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='ANAESTHETIC TECHNIQUES';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.anaesthetic_technique,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
				    hb.anaesthetic_technique = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.savePhysicalStatus= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter Physical Status", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='PHYSICAL STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.physical_status,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.laboratory = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.saveOral= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter LAST ORAL INTAKE", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='LAST ORAL INTAKE';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.oral,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.oral = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.saveNutritional= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter NUTRITIONAL STATUS", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='NUTRITIONAL STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.nutrional,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                    hb.nutrional = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }
			
             var ward_types=[];
		$scope.showSearchWardTypes= function (searchKey) {
				
            $http.get('/api/searchWardTypes/'+searchKey).then(function(data) {
            ward_types=data.data;
			
            });
			return ward_types;
        }	
		
		var ward_classes=[];
		$scope.showSearchWardClass= function (searchKey) {
				
            $http.get('/api/getWardClasses/'+searchKey).then(function(data) {
            ward_classes=data.data;
			
            });
			return ward_classes;
        }	
			  

			  var beds=[];
		$scope.showSearchBedTypes= function (searchKey) {				
            $http.get('/api/searchBedTypes/'+searchKey).then(function(data) {
            beds=data.data;			
            });
			return beds;
        }	
		
		
		$scope.getOutPutTypes= function () {
			$http.get('/api/getOutPutTypes').then(function(data) {
            $scope.getOutPutTypes=data.data;
          			
            });
			
        }
		
		$scope.getVital= function () {
			$http.post('/api/getVital').then(function(data) {
            $scope.getVitals=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		
		
		$scope.saveAssociateHistory= function (associate_history,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(associate_history)==false){
					  
					  return sweetAlert("Please Enter History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='ASSOCIATE HISTORY';
			var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
				"medical":associate_history.medical,"surgical":associate_history.surgical,
				"anaesthetic":associate_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
			$http.post('/api/saveAssociateHistory',associateHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		$scope.savePastHistory= function (past_history,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(past_history)==false){
					  
					  return sweetAlert("Please Enter History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='PAST HISTORY';
			var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"medical":past_history.medical,"surgical":past_history.surgical,"anaesthetic":past_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
			$http.post('/api/savePastHistory',associateHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		
		$scope.saveSocialSurgery= function (social,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(social)==false){
					  
					  return sweetAlert("Please Enter Social History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='SOCIAL AND FAMILY HISTORY';
			var socialHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"chronic_illness":social.chronic_illness,"substance_abuse":social.substance_abuse,"adoption":social.adoption,"others":social.others,"other_information":information_category,"nurse_id":user_id};
			$http.post('/api/saveSocialHistory',socialHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		

		
		$scope.saveDentalStatus= function (tooth_id,tooth_number,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before ENTERING DENTAL STATUS", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			  $scope.dentals={"tooth_id":tooth_id,"tooth_number":tooth_number};
			 var object =angular.extend($scope.selectedPatient,$scope.dentals); 
             console.log(object);				 
             console.log($scope.dentals);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/dental_status.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveCardivascularExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Cardivascular System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/cardivascular_examinations.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }	


		$scope.saveGastroIntestineExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Gastro Intestine System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/gastrointestine.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveCentralNervousSystem= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding CENTRAL NERVOUS SYSTEM", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/centralNervousSystem.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.getDiagnosis= function () {
			$http.get('/api/getDiagnosis').then(function(data) {
            $scope.getDiagnosises=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		$scope.getTeeth= function (selectedPatient) {
						
			$http.get('/api/getTeethAbove').then(function(data) {
            $scope.teethAboves=data.data;
			$http.get('/api/getTeethBelow').then(function(data) {
            $scope.teethBelows=data.data;
			console.log($scope.teethBelows);
		});
			
			         });
					 
			if(angular.isDefined(selectedPatient)==false){					  
       return sweetAlert("Select the Patient Before SETTING DENTAL STATUS", "", "error");
			}else{
				var request_id=selectedPatient.id;
			$http.get('/api/getTeethStatusFromPatientAbove/'+request_id).then(function(data) {
            $scope.teeth_patientsAboves=data.data;
					
            });
			
			$http.get('/api/getTeethStatusFromPatientBelow/'+request_id).then(function(data) {
            $scope.teeth_patientsBelows=data.data;
			 			
            });
				
			}
			
			
			
			
        }
		
		
		

		


		
		$scope.addImplementation= function (implementations,selectedPatient) {
			if (angular.isDefined(implementations)==false) {
                   return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="IMPLEMENTATIONS";
		
  var implementations={"targeted_plans":implementations.implementation,
			            "nurse_diagnosis_id":implementations.getDiagnos,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addImplementations',implementations).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addEvaluations= function (evaluations,selectedPatient) {
			if (angular.isDefined(evaluations)==false) {
                   return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="EVALUATIONS";
		
  var evaluations={"targeted_plans":evaluations.evaluation,
			            "nurse_diagnosis_id":evaluations.getDiagnos,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addEvaluations',evaluations).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		$scope.addTimes= function (times,selectedPatient) {
			if (angular.isDefined(times)==false) {
                   return sweetAlert("Please Select Diagnosis for TIMING", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  
				console.log(times); 
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="TIME";
			 var daytime=times.time_day;
			 var resultsTime=times.time+' '+daytime;
		
  var times={"targeted_plans":resultsTime,
			       "nurse_diagnosis_id":times.getDiagnos,
			       "admission_id":admission_id,
			       "nursing_care_types":nursing_care_type,"nurse_id":user_id,"daytime":daytime};
				   console.log(times);
				   
			$http.post('/api/addTimes',times).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
											
				  }			
            });
			
        }	
		
		$scope.patientDischarge= function (selectedPatient) {		
			 $scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/patientDischarge.html',
				  size: 'lg',
				  animation: true,
				  controller: 'patientDischargedModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
		 
		}
		
		
		
		
		
		$scope.addOutPuts= function (getOutPuts,selectedPatient) {
			if (angular.isDefined(getOutPuts)==false) {
                   return sweetAlert("Please Select the OUTPUT TYPES", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			var admission_id=selectedPatient.admission_id;
			var getOutPuts={"amount":getOutPuts.amount,
							"observation_output_type_id":getOutPuts.types,
							"admission_id":admission_id,
							"si_units":getOutPuts.units,
							"nurse_id":user_id
							};
							console.log(getOutPuts);
			$http.post('/api/addOutPuts',getOutPuts).then(function(data) {
            $scope.getOutPuts=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		
		
		$scope.addIntravenous= function (intravenous,selectedPatient) {
			if (angular.isDefined(intravenous)==false) {
                   return sweetAlert("Please Select the INTRAVENOUS FLUID", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			var intravenous={"intravenous_mils":intravenous.amount,"intravenous_types_id":intravenous.types,"admission_id":admission_id};
			$http.post('/api/addIntakeObservation',intravenous).then(function(data) {
            $scope.getIntravenous=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		
		$scope.addIntakeFluid= function (oral,selectedPatient) {
			if (angular.isDefined(oral)==false) {
                   return sweetAlert("Please Select the ORAL FLUID TYPE TAKEN", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }						
			var admission_id=selectedPatient.admission_id;
			
var oral_mils={"oral_mils":oral.amount,"oral_types_id":oral.types,"admission_id":admission_id};
			$http.post('/api/addIntakeFluid',oral_mils).then(function(data) {
            $scope.getIntravenous=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		  					
												
				  }			
            });
			
        }	
			
						   
		$scope.addWard= function (wards,ward_class) {
	   //var ward_type=wards.ward_type;
	    //console.log(ward_class);
	             if (angular.isDefined(wards)==false) {
                   return sweetAlert("Please Enter WARD NAME", "", "error");
                  }
				  else if (angular.isDefined(wards.ward_type)==false) {
                   return sweetAlert("Please Enter WARD TYPE", "", "error");
                   }
				   
				   else if (angular.isDefined(ward_class)==false) {
                   return sweetAlert("Please Enter WARD CLASS", "", "error");
                   } 
				   
				   else if (angular.isDefined(ward_class.ward_class_id)==false) {
                   return sweetAlert("Please Enter WARD CLASS", "", "error");
                   }
				   
				  else{
					  
	$http.post('/api/saveWards',{"ward_class_id":ward_class.ward_class_id.item_id,"ward_name":wards.ward_name,"ward_type_id":wards.ward_type.id,"ward_type_name":wards.ward_type.ward_type_name,"facility_id":facility_id}).then(function(data) {
           
			 if(data.data.status ==0){
					 $scope.wards = null;
					 sweetAlert(data.data.data, "", "error");
				  }else{
					   $scope.wards = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }
		
		
		$scope.addBed= function (wards,ward_id) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(wards)==false) {
                   return sweetAlert("Please Enter BED NUMBER "+ward_id, "", "error");
                  }	   
				   else if (angular.isDefined(wards.bed_type)==false) {
                   return sweetAlert("Please Enter BED TYPE "+ward_id, "", "error");
                   }
				  else{
					  console.log(wards.bed_type);
	$http.post('/api/saveBeds',{"bed_name":wards.bed_number,"bed_type_id":wards.bed_type.id,"ward_id":ward_id,"facility_id":facility_id,"eraser":1}).then(function(data) {           
			 if(data.data.status ==0){
					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  // $scope.wards = null;
                    sweetAlert(data.data.data, "", "success");  					
					 
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }
		
		
		
        var beds_number=0;
	    var beds=[];
        var wards=[];
		 $scope.getWardDetails= function (ward_id) {
			      			 
			 $http.get('/api/getWardOneInfo/'+ward_id).then(function(data){
             wards=data.data;		 
					          }); 
		$http.get('/api/getBedsNumber/'+ward_id).then(function(data){
             beds_number=data.data;
					          });
							  
            $http.get('/api/getBeds/'+ward_id).then(function(data) {
              beds=data.data; 	
              //console.log(beds_number);			  
             var object =angular.extend({},wards, beds_number); 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/manageWardBeds.html',
				  size: 'lg',
				  animation: true,
				  controller: 'wardManagementModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			
            });
			
			  }	



		 $scope.getBedDetails=function (bed_id,ward_id,bed_available) {					
            $http.get('/api/OnThisBed/'+bed_id).then(function(data) {
              beds=data.data; 

            if(data.data.status ==0){
					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' TAKEN BY '+ data.data.data;
                    sweetAlert(bed_details, "", "success");  					
					 
				  }			  
           		
              });
			
			  }
		  
		  
		  
		  
		
		var patapata="";
		 $scope.getAdmissionNotes= function (patient) {				
            $http.post('/api/getInstructions',{"patient_id":patient}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });
					   
            }

			$scope.giveBed= function (bed_id,last_name,ward_id,admission_id,bed_available) {
				
				 // sweetAlert(bed_id+' '+bed_available, "", "success"); 
				 console.log(admission_id);
				
            $http.post('/api/giveBed',{"bed_id":bed_id,"ward_id":ward_id,"admission_id":admission_id,"bed_available":bed_available}).then(function(data) {
            $scope.giveBeds=data.data;
			console.log($scope.giveBeds);
			
			if(data.data.status ==0){					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' SUCCESSFULLY ASSIGNED TO '+last_name;
                    sweetAlert(bed_details, "", "success");  					
					 
				  }	
			
			
			          });
					
					   
            }	

			
		 $scope.getAdmPatient= function (admitted) {
			 $scope.selectedPatient=admitted;
			 console.log($scope.selectedPatient);
		 }
		 
		 $scope.getPatientsSentToTheatre= function () {
              
			$http.get('/api/getPatientSentToTheatre').then(function(data){
            $scope.patientsSentToTheatres=data.data;			
			   });
		 }
		 
		 
			 
			 $scope.getAdmission= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.post('/api/getInstructions',{"patient_id":patient,"ward_id":ward_id}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });
					  
            $http.get('/api/getPatientInfo/'+patient).then(function(data) {
            $scope.quick_registration=data.data;
			
						
             var object = angular.extend({}, $scope.quick_registration, patapata);        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/bedAllocation.html',
				  size: 'lg',
				  animation: true,
				  controller: 'nursingCareModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			
            });
			
			  }	



			  $scope.assignToTheatre= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.get('/api/getFullAdmitedPatientInfo/'+admission_id).then(function(data) {
            $scope.admissions=data.data;
			    console.log(data.data);
				console.log(admission_id);		
             var object = $scope.admissions;        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/postPatientsToTheatre.html',
				  size: 'lg',
				  animation: true,
				  controller: 'postPatientsToTheatreModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
					
			
            });
			
			  }
			  
			 	 
			  
		
				

    }

})();

/**
* Created by USER on 2017-02-13.
*/
(function() {

'use strict';

angular
.module('authApp')
.controller('laboratorySettingController', laboratorySettingController);

function laboratorySettingController($http, $auth, $rootScope,$state,$location,$scope,$uibModal) {
$scope.setTab = function(newTab){
$scope.tab = newTab;
};
$scope.isSet = function(tabNum){
return $scope.tab === tabNum;
}

angular.element(document).ready(
function(){
	$scope.setTab(1);
});


//Search Test Unit
var item_units=[];
$scope.showItemtest=function (searchData) {
var searchUnit={'SearchUnit':searchData};
$http.post('/api/getunit',searchUnit).then(function(data) {
item_units=data.data;
});
return item_units;
}

//Search Color
var color=[];
$scope.showColor=function (searchData) {
var searchColor={'SearchColor':searchData};
$http.post('/api/getcolor',searchColor).then(function(data) {
color=data.data;
});
return color;
}

//Search Test Indicator
var item_indicator=[];
$scope.showTestindicator=function (searchData) {
var searchIndicator={'SearchIndicator':searchData};
$http.post('/api/getindicator',searchIndicator).then(function(data) {
item_indicator=data.data;
});
return item_indicator;
}

//Search Sample to Collect
var sample=[];
$scope.showSample=function (searchData) {
var searchSamples={'SearchSample':searchData};
$http.post('/api/getsample',searchSamples).then(function(data) {
sample=data.data;
});
return sample;
}

//Search Sample to Collect
var eqstatus=[];
$scope.showEqstatus=function (searchData) {
var searchEqustatus={'SearchEqstatus':searchData};
$http.post('/api/getequpstatus',searchEqustatus).then(function(data) {
eqstatus=data.data;
});
return eqstatus;
}

//Search Facility
var facilitys=[];
$scope.showFacility=function (searchData) {
var searchFacility={'SearchFacility':searchData};
$http.post('/api/getfacility',searchFacility).then(function(data) {
facilitys=data.data;
});
return facilitys;
}

//Search Sub Department
var sub_department=[];
$scope.showSubdep=function (searchData) {
var searchSubdep={'SearchSubdepartment':searchData};
$http.post('/api/getsubdepartments',searchSubdep).then(function(data) {
sub_department=data.data;
});
return sub_department;
}

//Service Equipment
var equipment=[];
$scope.showequipment=function (searchData) {
var searchEquipment={'SearchEquipment':searchData};
$http.post('/api/getequipements',searchEquipment).then(function(data) {
equipment=data.data;
});
return equipment;
}

//api to auto load department
$http.get('/api/get_department').then(function(data) {
$scope.department=data.data;
});

//api to auto load equipment
$http.get('/api/getequipement_status').then(function(data) {
$scope.equip_status=data.data;
});

//Patient Search Data From the database
var patient_ifo=[];
$scope.showPatient=function (searchData) {
var searchPatient={'SearchPatient':searchData};
$http.post('/api/getpatient',searchPatient).then(function(data) {
patient_ifo =data.data;
});
return patient_ifo;
}	

//Search Service from the database
var service_ifo=[];
$scope.showService=function (searchData) {
var searchService={'SearchService':searchData};
$http.post('/api/getservice',searchService).then(function(data) {
service_ifo=data.data;
});
return service_ifo;
}

//On select capture service selected
var currentUser=$scope.currentUser.id;
$scope.service_selected=[];
$scope.onSelect=function(service){
$scope.service_selected.push(
{
"id":service.service.id,
"Service_Name":service.service.item_name,
"patient_id":service.selectedpatient.id,
"doctor_id":currentUser
}
);
}

$scope.remove=function($index){
$scope.service_selected.splice($index,1);	
}


//send to lab 
$scope.send_to_lab=function()
{
var sendtolab=$scope.service_selected;
console.log(sendtolab);
$http.post('/api/send_to_lab',sendtolab).then(function (data) {
//lab_service_ifo=data.data;
});
}

//Get Sample Status
$scope.getsample_status=function () {
$http.get('/api/getsample_status').then(function(data) {
$scope.sample_status=data.data;
});
}

//Register Samples
$scope.sample_status_registration=function(sample) {
if (angular.isDefined(sample)==false) {
return sweetAlert("Please Enter Sample Status", "", "error");
}
else{
var sample_name={'status':sample.sample_name};
$http.post('/api/sample_status_registration',sample_name).then(function (data) {
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
sample_name='';
}
});
}
}

//Update Sample status
$scope.sample_status_update=function (samplestatus) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
	var samplestatuss={'status':samplestatus.sample_status};
$http.post('/api/sample_status_update',samplestatuss).then(function (data) {
var sending=data.data;
swal(
'Feedback..',
'Updates Success...',
'success'
)
})
}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//delete sample status
$scope.sample_status_delete=function(samplestatus) {
if (angular.isDefined(samplestatus)==false) {
return sweetAlert("Please Enter Sample Status", "", "error");
}
else{
//var samplestatus=samplestatus;
var samplestatus={'status':samplestatus.sample_status};
$http.get('/api/sample_status_delete/'+samplestatus).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
}
});
}
}

//Get Equipment Status
$scope.getequipement_status=function () {
$http.get('/api/getequipement_status').then(function(data) {
$scope.equip_status=data.data;
});
}


//Register Equipment Status
$scope.equipment_status_registration=function(equipmentnstatus) {
if (angular.isDefined(equipmentnstatus)==false) {
return sweetAlert("Please Enter Equipment Status", "", "error");
}
else{
var equipment_status=equipmentnstatus;
$http.post('/api/equipment_status_registration',equipment_status).then(function (data) {
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
equipmentnstatus='';
}
});
}
}


//Update Equipment status
$scope.equipement_status_update=function (equipstatus) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
$http.post('/api/equipement_status_update', equipstatus).then(function (data) {
var sending=data.data;
swal(
'Feedback..',
'Updates Success...',
'success'
)
})
}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//delete Equipment status
$scope.equipement_status_delete=function(equipstatus) {
if (angular.isDefined(equipstatus)==false) {
return sweetAlert("Please Enter Sample Status", "", "error");
}
else{
var equipstatus=equipstatus;
$http.get('/api/equipement_status_delete/'+equipstatus.id).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
equipstatus='';
}
});

}
}

//api to auto load equipment
$http.get('/api/getequipement').then(function(data) {
$scope.equipment=data.data;
});

//Function to Get Equipment 
$scope.getequipement=function () {
$http.get('/api/getequipement').then(function(data) {
$scope.equipment=data.data;
});
}

//Equipment_registration
var facility=$rootScope.currentUser.facility_id;
$scope.equipment_registration=function(equip) {
if (angular.isDefined(equip)==false) {
return sweetAlert("Please Enter Below Details", "", "error");
}
if (angular.isDefined(equip.equipment_name)==false) {
return sweetAlert("Please Enter Equipment Name", "", "error");
}
if (angular.isDefined(equip.reagents)==false) {
return sweetAlert("Please Enter Equipment Reagents", "", "error");
}
if (angular.isDefined(equip.minimum_limit)==false) {
return sweetAlert("Please Enter Equipment Minimum Limit", "", "error");
}
if (angular.isDefined(equip.maximum_limit)==false) {
return sweetAlert("Please Enter Equipment Maximum Limit", "", "error");
}
if (angular.isDefined(equip.item_units)==false) {
return sweetAlert("Please Enter Equipment SI-Unit", "", "error");
}
if (angular.isDefined(equip.id)==false) {
return sweetAlert("Please Select Equipment Status", "", "error");
}
else{
var equipe=(
{
"equipment_name":equip.equipment_name,
"reagents":equip.reagents,
"minimum_limit":equip.minimum_limit,
"maximum_limit":equip.maximum_limit,
"si_unit":equip.item_units.id,
"id":equip.id,
"facility_id":facility
}
);
console.log(equipe);
$http.post('/api/equipment_registration',equipe).then(function (data) {
$scope.equipmentt=data.data;
$scope.equip="";
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
equip='';
}
});
}
}


//Update Equipment 
$scope.equipement_update=function (equipment) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
if (angular.isDefined(equipment)==false) {
return sweetAlert("Please Enter Below Details", "", "error");
}
if (angular.isDefined(equipment.equipment_name)==false) {
return sweetAlert("Please Enter Equipment Name", "", "error");
}
if (angular.isDefined(equipment.reagents)==false) {
return sweetAlert("Please Enter Equipment Reagents", "", "error");
}
if (angular.isDefined(equipment.minimum_limit)==false) {
return sweetAlert("Please Enter Equipment Minimum Limit", "", "error");
}
if (angular.isDefined(equipment.maximum_limit)==false) {
return sweetAlert("Please Enter Equipment Maximum Limit", "", "error");
}
if (angular.isDefined(equipment.item_unit)==false) {
return sweetAlert("Please Enter Equipment SI-Unit", "", "error");
}
if (angular.isDefined(equipment.equipment_id)==false) {
return sweetAlert("Please Select Equipment Status", "", "error");
}
if (angular.isDefined(equipment.eqstatus)==false) {
return sweetAlert("Please Select Equipment Status", "", "error");
}
if (angular.isDefined(equipment.facilitys)==false) {
return sweetAlert("Please Select Facility", "", "error");
}
else{
var equipementsupdt=(
{
"equipment_name":equipment.equipment_name,
"reagents":equipment.reagents,
"minimum_limit":equipment.minimum_limit,
"maximum_limit":equipment.maximum_limit,
"si_unit":equipment.item_unit.id,
"id":equipment.equipment_id,
"equipment_status_id":equipment.eqstatus.id,
"facility_id":equipment.facilitys.id
}
);
$http.post('/api/equipement_update', equipementsupdt).then(function (data) {
var sending=data.data;
swal(
'Feedback..',
'Updates Success...',
'success'
)
})
}
}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}


//delete Equipment 
$scope.equipement_delete=function(equipment) {
if (angular.isDefined(equipment)==false) {
return sweetAlert("Please Enter Sample Status", "", "error");
}
else{
var equipment=equipment;
$http.get('/api/equipement_delete/'+equipment.id).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
equipment='';
}
});

}
}


//Get Department
$scope.get_department=function () {
$http.get('/api/get_department').then(function(data) {
$scope.department=data.data;
});
}

//Get Sub Department
$scope.getsub_department=function () {
$http.get('/api/getsub_department').then(function(data) {
$scope.subdepartment=data.data;
});
}


//Sub_Department_registration
$scope.sub_department_registration=function(sub) {
if (angular.isDefined(sub)==false) {
return sweetAlert("Please Enter Sub Department and Select Department", "", "error");
}
if (angular.isDefined(sub.sub_department)==false) {
return sweetAlert("Please Enter Sub Department Name", "", "error");
}
if (angular.isDefined(sub.id)==false) {
return sweetAlert("Select Department", "", "error");
}

else{
$http.post('/api/sub_department_registration',sub).then(function (data) {
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
sub='';
}
});
}
}

//Update Sub Department
$scope.sub_department_update=function (deptmnt) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
$http.post('/api/sub_department_update', deptmnt).then(function (data) {
var sending=data.data;
swal(
'Feedback..',
'Updates Success...',
'success'
)
})

}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//delete Sub Department
$scope.sub_department_delete=function(deptmnt) {
if (angular.isDefined(deptmnt)==false) {
return sweetAlert("Please Select Sub Department", "", "error");
}
else{
var deptmnts=deptmnt.sub_department_id;
$http.get('/api/sub_department_delete/'+deptmnts).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
}
});

}
}

//Get Item Data From the database
var item_ifo=[];
$scope.showItem=function (searchData) {
var searchItem={'SearchItem':searchData};
$http.post('/api/getitem',searchItem).then(function(data) {
item_ifo=data.data;
});
return item_ifo;
}


//Get lab_test_registration
$scope.get_lab_test=function () {
$http.post('/api/get_lab_test').then(function(data) {
$scope.lab_test=data.data;
});
}

//Lab_Test_registration
$scope.lab_test_registration=function(labtest) { 
if (angular.isDefined(labtest)==false) {
return sweetAlert("Please Select Datas", "", "error");
}
if (angular.isDefined(labtest.item)==false) {
return sweetAlert("Please Select Item", "", "error");
}
if (angular.isDefined(labtest.subdepartmnt)==false) {
return sweetAlert("Please Select Sub Department", "", "error");
}
if (angular.isDefined(labtest.equipmt)==false) {
return sweetAlert("Please Select Equipment", "", "error");
}
else{
var labtests=(
{
"item_id":labtest.id,
"item_name":labtest.item,
"sub_department_id":labtest.subdepartmnt,
"equipment_id":labtest.equipmt
}
);
$http.post('/api/lab_test_registrationlab_test_registration',labtests).then(function (data) {
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
labtest='';
}
});

}
}

//createLabsOrderNo
$scope.createLabsOrderNo=function(laborder)
{
var LabsOrderNo=(
{
"patient_id":laborder.patient_id,
"order_id":laborder.order_id,
"lab_test_id":laborder.lab_test_id,
"facility_id":laborder.facility_id
}
);
$http.post('/api/createLabsOrderNo',LabsOrderNo).then(function (data) {
$scope.order_number=data.data;
});
}

//getpatientlaborder
$scope.getpatientlaborder=function(laborder)
{
var LabsOrderN=(
{
"patient_id":laborder.patient_id,
"order_id":laborder.order_id
});
$http.post('/api/getpatientlaborder',LabsOrderN).then(function (data) {
$scope.patientlaborder=data.data;
});
}

//save patient lab order
$scope.savepatientlaborder=function(order_number,laborder)
{	
var PatientLabsOrder=(
{
"patient_id":laborder.patient_id,
"order_id":laborder.order_id,
"lab_test_id":laborder.lab_test_id,
"facility_id":laborder.facility_id,
"lab_order_id":laborder.tbl_lab_order_id,
"sample_no":order_number
}
);
$http.post('/api/savepatientlaborder',PatientLabsOrder).then(function (data) {
//$scope.patientlaborder=data.data;
var status=data.data.status;
var msg=data.data.msgs;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
PatientLabsOrder='';
}
});
}

//post patient lab order collected
$scope.postpatientlaborder=function(ordercollected)
{
var postpatientLabsOrder=(
{
"patient_id":ordercollected.patient_id,
"order_id":ordercollected.order_id,
"lab_test_id":ordercollected.lab_test_id,
"facility_id":ordercollected.facility_id,
//"lab_order_id":ordercollected.tbl_lab_order_id,
"sample_no":ordercollected.sample_no
}
);
$http.post('/api/postpatientlaborder',postpatientLabsOrder)
.then(function (data) {
$scope.loadpostresultform=data.data;
});
}




//test_unit_registration
$scope.test_unit_registration=function(testunit)
{
if (angular.isDefined(testunit)==false) {
return sweetAlert("Please Enter Test Unit", "", "error");
}
else{
var tstunit=({"unit":testunit});
$http.post('/api/test_unit_registration',tstunit).then(function (data){
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
});
}
}

//get test_unit
$scope.gettest_unit=function () {
$http.get('/api/gettest_unit').then(function(data) {
$scope.gettestunit=data.data;
});	
}

//test_unit_update
$scope.test_unit_update=function (gettestuni) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
var gettestunis=
({
"unit":gettestuni.unit,
"id":gettestuni.id,
});
$http.post('/api/test_unit_update',gettestunis).then(function (data) {
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
})

}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//test_unit_delete
$scope.test_unit_delete=function(gettestuni) {
if (angular.isDefined(gettestuni)==false) {
return sweetAlert("Please Select value", "", "error");
}
else{
var deleteunit=
{
"unit":gettestuni.unit,
"id":gettestuni.id
};
$http.get('/api/test_unit_delete/'+gettestuni.id+','+gettestuni.unit).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
}
});
}
}

//register test_sample 
$scope.test_sample_registration=function(testsample)
{
if (angular.isDefined(testsample)==false) {
return sweetAlert("Please Enter Sample", "", "error");
}
else{
var tstsamples=({"sample_to_collect":testsample});
$http.post('/api/test_sample_registration',tstsamples).then(function (data){
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
});
}
}

//Get test_sample
$scope.get_test_sample=function () {
$http.get('/api/get_test_sample').then(function(data) {
$scope.gettestsample=data.data;
});	
}

//testsample_update
$scope.testsample_update=function (gettestsampl) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
var indicators=
({
"sample_to_collect":gettestsampl.sample_to_collect,
"id":gettestsampl.id,
});
$http.post('/api/testsample_update',indicators).then(function (data) {
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
})

}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//testsample_update_delete
$scope.testsample_delete=function(gettestsampl) {
if (angular.isDefined(gettestsampl)==false) {
return sweetAlert("Please Select value", "", "error");
}
else{
var deletetestsample=
{
"sample_to_collect":gettestsampl.sample_to_collect,
"id":gettestsampl.id,
};
console.log(deletetestsample);
$http.get('/api/testsample_delete/'+gettestsampl.id+','+gettestsampl.sample_to_collect).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
}
});
}
}

//test_indicator_registration
$scope.test_indicator_registration=function(testindicator)
{
var tstindicator=(
{
"indicator":testindicator.indicator,
"color_id":testindicator.color.id
}
);
$http.post('/api/test_indicator_registration',tstindicator).then(function (data){
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
});
}


//test_panel_registration
$scope.test_panel_registration=function(testindi)
{	
var tstindicator=(
{
"panel_name":testindi.itmpname,
"item_test_range":testindi.itmtstrng,
"item_unit":testindi.item_indicator.id,
"Test_indicator":testindi.item_unit.id
}
);
$http.post('/api/test_panel_registration',tstindicator).then(function (data){
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
});
}

//Get test_panel
$scope.gettest_panel=function () {
$http.get('/api/gettest_panel').then(function(data) {
$scope.gettestpanel=data.data;
});	
}

//Test Panel Update
$scope.test_panel_update=function (gettestpan) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
var testindic=
({
"panel_name":gettestpan.panel_name,
"id":gettestpan.test_panel_id,
"Item_test_range":gettestpan.Item_test_range,
"Item_unit":gettestpan.item_units.id,
"Test_indicator":gettestpan.item_indicator.id,
});
$http.post('/api/test_panel_update',testindic).then(function (data) {
//var sending=data.data;
swal(
'Feedback..',
'Updates Success...',
'success'
)
})
}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//test_panel_delete
$scope.test_panel_delete=function(gettestpan) {
if (angular.isDefined(gettestpan)==false) {
return sweetAlert("Please Select value", "", "error");
}
else{
var deletetestpanel=
{
"panel_name":gettestpan.panel_name,
"id":gettestpan.test_panel_id,
};
var gettestpans=gettestpan;
$http.get('/api/test_panel_delete/'+gettestpan.test_panel_id+','+gettestpan.panel_name).then(function (data) {
console.log(data.data);
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
}
});
}
}

//Getlab_test_indicator
$scope.getlab_test_indicator=function () {
$http.get('/api/getlab_test_indicator').then(function(data) {
$scope.gettestindicator=data.data;
});	
}

//test_indicator Update
$scope.test_indicator_update=function (gettestindi) {
swal({
title: 'Are you sure?',
text: " ",
type: 'warning',
showCancelButton: true,
confirmButtonColor: '#3085d6',
cancelButtonColor: '#d33',
confirmButtonText: 'Yes!',
cancelButtonText: 'No, cancel!',
confirmButtonClass: 'btn btn-success',
cancelButtonClass: 'btn btn-danger',
buttonsStyling: false
}).then(function () {
var indicators=
({
"indicator":gettestindi.indicator,
"color_id":gettestindi.color.id,
"id":gettestindi.id,
});
$http.post('/api/test_indicator_update',indicators).then(function (data) {
swal(
'Feedback..',
'Updates Success...',
'success'
)
})
}, function (dismiss) {
if (dismiss === 'cancel') {
swal(
'Cancelled',
' ',
'error'
)
}
})
}

//test_indicator_delete
$scope.test_indicator_delete=function(gettestindi) {
if (angular.isDefined(gettestindi)==false) {
return sweetAlert("Please Select value", "", "error");
}
else{
var deleteindicator=
{
"indicator":gettestindi.indicator,
"id":gettestindi.id,
};
$http.get('/api/test_indicator_delete/'+gettestindi.id+','+gettestindi.indicator).then(function (data) {
var status=data.data.status;
var msgs=data.data.msgs;
if(status==0){
swal('Oops!!',msgs,'error');
}
else{
swal('success',msgs,'success');
}});
}
}


//lab_test_registration
$scope.lab_test_registration=function(labtest)
{	
var labtests=(
{
"item_name":labtest.item.item_name,
"item_id":labtest.item.id,
"item_test_range":labtest.range,
"unit":labtest.item_units.id,
"item_test_indicator":labtest.item_indicator.id,
"sample_to_collect":labtest.sample.id,
"sub_department_id":labtest.sub_department.id,
"equipment_id":labtest.equipment.id
});
$http.post('/api/lab_test_registration',labtests).then(function (data){
var status=data.data.status;
var msg=data.data.msg;
if(status==0){
swal('Oops!!',msg,'error');
}
else{
swal('success',msg,'success');
}
});
}
$scope.getequipement_status();	
}

})();

(function () {

'use strict';

var app = angular.module('authApp');

app.controller('patientresultcontroller',
['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
$scope.loadpostresultform=object;
console.log(object);

//Send patient laboratory results per order
var user_id=$scope.currentUser.id;
$scope.send_lab_result=function(loadpostresultform)
{
if (angular.isDefined(loadpostresultform.results)==false) {
return sweetAlert("You cannot post empty results", "", "error");
}
else{
console.log(loadpostresultform);
var abc=(
	{
		//"value":loadpostresultform,
		"order_id":loadpostresultform.patientorder[0].laborderid,
		"result":loadpostresultform.results,
		"item_name":loadpostresultform.patientorder[0].item_name,
		"user_id":user_id
	});
console.log(abc);
$http.post('/api/send_lab_result',abc).then(function (data) {
$scope.patientresults=data.data;
var status=data.data.status;
	var msg=data.data.msg;
	if(status==0){
		swal('Oops!!',msg,'error');
	}
	else{
		swal('success',msg,'success');
	}

});
}
}




}]);


}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('printSampleNumberBarcode',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

                   $scope.samples_numbers=object;


            $scope.getCancelledSampleReason= function(){
                $http.get('/api/getSampleStatus').then(function(data) {
                    $scope.sampleStatuses=data.data;

                });
            }

  $scope.saveComponent= function(getPanelComponet){
                $http.post('/api/saveComponentsResults').then(function(data) {
                    $scope.sampleStatuses=data.data;

                });
            }

            console.log($scope.samples_numbers);




            $scope.getCancelledSampleReason();

//function to notify user if sample cancelled
            $scope.playAudio = function() {
                var audio = new Audio('/notification/thrown.mp3');
                audio.play();
            };


            $scope.sampleReject=function(samples_numbers,sample) {

                var sample_no=samples_numbers.sample_no;
                var last_name=samples_numbers.last_name;
                var sub_department_name=samples_numbers.sub_department_name;
                var request_id=samples_numbers.request_id;
                var reason=sample.reason;

                if (angular.isDefined(request_id)==false) {
                    return sweetAlert("Select TEST to be done", "", "error");
                }
                else{

                    var dataPost={"reason":reason,"sample_no":sample_no,"order_control":3,"order_validator_id":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};


                    $http.post('/api/sampleCancel',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{

                            var msg=" Sample No."+sample_no+"  Was successfully Cancelled ";
                            //
                            sweetAlert(msg, "", "success");
                        }});
                }
            }


        $scope.resultReject=function(samples_numbers,sample) {

                var sample_no=samples_numbers.sample_no;
                var last_name=samples_numbers.last_name;
                var sub_department_name=samples_numbers.sub_department_name;
                var confirmation_status=samples_numbers.confirmation_status;
                var request_id=samples_numbers.request_id;


                if (angular.isDefined(sample)==false) {
                    return sweetAlert("Write Reason for rejecting Results for Sampl# "+sample_no, "", "error");
                }
                else{
                    var reason=sample.reason;
                    $scope.playAudio();
                    var dataPost={"cancel_reason":reason,"sample_no":sample_no,"confirmation_status":0,"order_control":3,"order_validator_id":user_id,"last_name":last_name,"facility_id":facility_id,"request_id":request_id};
                    $http.post('/api/resultsCancel',dataPost).then(function(data) {
                        if(data.data.status ==0){
                            sweetAlert(data.data.data, "", "error");
                        }
                        else{
                            $scope.playAudio();
                            var msg="Results for Sample No."+sample_no+"  Was successfully Rejected";
                            //
                            sweetAlert(msg, "", "success");
                        }});
                }
            }







	              }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('corpseDisposedModal',
                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.corpsePaticulars=object;
				  var mortuary_id = $scope.corpsePaticulars.mortuary_id;
				 $http.get('/api/getCabintesWithNoCorpses/'+mortuary_id).then(function(data) {
                 $scope.cabinets_availables=data.data;
                 console.log($scope.cabinets_availables);
			           });
			     

           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('mortuaryCareModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.mortuaryPaticulars=object;
			      $scope.corpsePaticulars=object[0];
			    var mortuary_id= $scope.mortuaryPaticulars[0].mortuary_id;
				  
				  $http.get('/api/getCabintesWithNoCorpses/'+mortuary_id).then(function(data) {
                 $scope.cabinets_availables=data.data;
			     console.log($scope.cabinets_availables);
			          }); 
			     
				//$scope.quick_registration=quick_registration;
				//console.log($scope.quick_registration);
				//$scope.patientData=$scope.quick_registration;
				//console.log($rootScope.currentUser);
				/**
				var last_visit={'patient_id':$scope.quick_registration.id,'facility_id':$scope.quick_registration.facility_id};
				
				$http.post('/api/printLastVisit',last_visit).then(function(data) {
						  $scope.patient_last_visit=data.data;
	
                      //registration_title
				  console.log($scope.patient_last_visit);
					  });
				
				**/

                $scope.giveCabinet=function (cabinets_available,corpsePaticulars) {
                    var facility_id =$rootScope.currentUser.facility_id;
                    var user_id =$rootScope.currentUser.id;
                    var corpse_admission_id=corpsePaticulars.corpse_admission_id;
                    var cabinet_id=cabinets_available.id;
                    var user_id=$rootScope.currentUser.id;
                    var corpseDetails={'corpse_admission_id':corpse_admission_id,'cabinet_id':cabinet_id,'facility_id':facility_id,'user_id':user_id};

                    $http.post('/api/giveCabinetCorpse',corpseDetails).then(function(data) {
                         if (data.data.status ==1) {
                             $scope.cancel();
                            sweetAlert(data.data.data, "", "success");
                        }
                    });
                }
				
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('mortuaryController',mortuaryController);

    function mortuaryController($http, $auth, $rootScope,$state,$location,$scope,$uibModal) {
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
        $scope.mytime1 = new Date();
        $scope.mytime2 = new Date();

				  $scope.AdmissionNotes="";
				  var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];	
				   
				     angular.element(document).ready(function () {
						 $scope.setTabWards(1);
                         $scope.getMortuary();
                         $scope.getCabinetsLists();
                         $scope.getApprovedCorpses();
                         $scope.getCorpseServices();
                         $scope.getPendingOutsideCorpses();
         
                          });



        $scope.openModalTime = function (size) {

            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: '/views/modules/nursing_care/timepicker.html',
                controller: 'TimePicker',
                size: size,
                resolve: {
                    time: function () {
                        return $scope.mytime;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                $scope.mytime = selectedItem;
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
            });
        };

        $scope.toggleAnimation = function () {
            $scope.animationsEnabled = !$scope.animationsEnabled;
        };




				   

  $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });				   
				   
			$scope.setTabAdmission = function(newTab){				
            $scope.tab = newTab;
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.post('/api/getPendingAdmissionList').then(function(data) {
            $scope.admin=data.data;
			console.log($scope.admin);
			
            });
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });
			
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getPatientSentToTheatre').then(function(data) {
            $scope.patientsSentToTheatres=data.data;
			
            });
			
			
        };
		
		
		$scope.setTabattendedPatientTheatre = function(newTab){				
            $scope.tab = newTab;
			
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/attendPatientTheatre').then(function(data) {
            $scope.attendPatientTheatres=data.data;
			
            });
			
			
        };
		
		
		$scope.setTabWards = function(newTab){				
            $scope.tab = newTab;
			$scope.setTabAdmission(1);
			$http.get('/api/getWards/'+facility_id).then(function(data) {
            $scope.getWards=data.data;
					
            });			
        };
		
		$scope.setTabDischarge = function(newTab){				
            $scope.tab = newTab;
			$http.get('/api/getWards/'+facility_id).then(function(data) {
            $scope.getWards=data.data;
					
            });			
        };
		
		$scope.setTabObservation = function(newTab){				
            $scope.tab = newTab;
			//$scope.setTabAdmission(1);
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });		
        };
		
		$scope.setTabNursingCare = function(newTab){				
            $scope.tab = newTab;
			//$scope.setTabAdmission(1);
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });		
        };
		
		
		
		$scope.setTabMortuaryClass = function(newTab){
            $scope.tab = newTab;
            $scope.getMortuaryClass();
		     };
		


		$scope.setTabMortuaryDisposition= function(newTab){
            $scope.tab = newTab;
             $scope.getPendingCorpses();
            $scope.getPendingOutsideCorpses();
            $scope.getApprovedCorpses();
		     };

		$scope.setTabMortuaryService= function(newTab){
            $scope.tab = newTab;
            $scope.getApprovedCorpses();
            $scope.getCorpseServices();
		     };
         $scope.setTabCorpseDischarge= function(newTab){
            $scope.tab = newTab;
            $scope.getApprovedCorpses();
		     };

        $scope.getDisposedCorpse= function (disposed) {
            $scope.disposedCorpse=disposed;
          }


 $scope.getCorpseServices= function () {
         $http.get('/api/getMortuaryServises').then(function(data) {
         $scope.corpseServices=data.data;

     });
 }

 $scope.addCorpseService= function (item_name,item_id,disposedCorpse) {
     console.log(disposedCorpse);
     if (angular.isDefined(disposedCorpse)==false) {
         return sweetAlert("Please Select Corpse First", "", "error");
     }
     var dataPost={"item_name":item_name,"service_number":item_id,"corpse_admission_id":disposedCorpse.corpse_admission_id,"user_id":user_id};
     $http.post('/api/addCorpseService',dataPost).then(function(data) {

         if(data.data.status ==0){
             sweetAlert(data.data.data, "", "error");
         }
         else{
                 sweetAlert(data.data.data, "", "success");
         }

     });



 }

		$scope.setTabTreatment = function(newTab){				
            $scope.tab = newTab;
			
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });	
        };
		
		
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime = true;
				   		   
						   
						

  $scope.addMortuaryClass= function (mortuary) {

                $scope.dataLoading = true;
	            if (angular.isDefined(mortuary)==false) {
                    $scope.dataLoading = false;
                   return sweetAlert("Enter MORTUARY Class ", "", "error");
                  }else{
	$http.post('/api/addMortuaryClass',{"mortuary_class":mortuary.class}).then(function(data){
			 if(data.data.status ==0){
								 sweetAlert(data.data.data, "", "error");
				  }else{
                     mortuary.class = null;
                    sweetAlert(data.data.data, "", "success");
			          }
			          }).finally(function () {
        $scope.dataLoading = false;
    });

                }
  }


        $scope.addTimesQue= function (PreMedication,selectedPatient) {
	             if (angular.isDefined(PreMedication)==false) {
                   return sweetAlert("Please Enter Pre-Medication ", "", "error");
                 }
                 else{
	             var PreMedicationTime=PreMedication.time+" "+PreMedication.time_day;
	             var information_category="PRE MEDICATION";
	             var dataPost={"erasor":0,"noted_value":PreMedicationTime,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":PreMedication.remarks,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreMedication = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }





        $scope.PreOPCondition= function (PreOPCondition,selectedPatient) {
	             if (angular.isDefined(PreOPCondition)==false) {
                   return sweetAlert("Please Enter Pre Operation Condition", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="PRE-OPERTION CONDITION";
	             var dataPost={"erasor":0,"noted_value":PreOPCondition.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":PreOPCondition.case,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }



        $scope.anaesthBloodLoss= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF BLOOD COLLECTED", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="BLOOD LOSS";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.noted_amount,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthFluidGiven= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF FLUID GIVEN", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="FLUID GIVEN";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount_fluid,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.noted_amount_fluid,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


 $scope.anaesthUrineOutput= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF URINE OUTPUT", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="URINE OUTPUT";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.urine_output,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.urine_output,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     pulse_rate.urine_output = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


 $scope.anaesthComplications= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Write any Compilcations found during Operations", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else{
	             var information_category="COMPLICATIONS";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.complications,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.complications,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     pulse_rate.complications = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthPulseRate= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="PULSE RATE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthSystolic= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="SYSTOLIC PRESSURE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	pulse_rate.read = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthDiastolic= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read_diastolic==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="DIASTOLIC PRESSURE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read_diastolic,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	pulse_rate.read_diastolic = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthIntubation= function (Intubation,selectedPatient) {
	             if (angular.isDefined(Intubation)==false) {
                   return sweetAlert("Please Enter INTUBATION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="INTUBATION";
	             var dataPost={"erasor":0,"noted_value":Intubation.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Intubation.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthRespiration= function (Respiration,selectedPatient) {
	             if (angular.isDefined(Respiration)==false) {
                   return sweetAlert("Please Enter RESPIRATION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="RESPIRATION";
	             var dataPost={"erasor":0,"noted_value":Respiration.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Respiration.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthLocal= function (Local,selectedPatient) {
	             if (angular.isDefined(Local)==false) {
                   return sweetAlert("Please Enter LOCAL INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="LOCAL";
	             var dataPost={"erasor":0,"noted_value":Local.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Local.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthPosition= function (Position,selectedPatient) {
	             if (angular.isDefined(Position)==false) {
                   return sweetAlert("Please Enter POSITION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="POSITION";
	             var dataPost={"erasor":0,"noted_value":Position.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Position.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthNeedle= function (Needle,selectedPatient) {
	             if (angular.isDefined(Needle)==false) {
                   return sweetAlert("Please Enter NEEDLE INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="NEEDLE";
	             var dataPost={"erasor":0,"noted_value":Needle.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Needle.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Needle = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthEffect= function (Effect,selectedPatient) {
	             if (angular.isDefined(Effect)==false) {
                   return sweetAlert("Please Enter NEEDLE INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="EFFECT";
	             var dataPost={"erasor":0,"noted_value":Effect.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Effect.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Effect = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

		$scope.saveHb= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter Laboratory Status", "", "error");
                  } 
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='LABORATORY STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.laboratory,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {
           
			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.laboratory = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }


        $scope.savePreAnaestheticOrder= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter PRE ANAESTHETIC ORDER", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='PRE ANAESTHETIC ORDER';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.pre_anaesthetic_order,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
				    hb.pre_anaesthetic_order = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }


        $scope.saveAnaestheticTechniques= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter ANAESTHETIC TECHNIQUES", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='ANAESTHETIC TECHNIQUES';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.anaesthetic_technique,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
				    hb.anaesthetic_technique = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.savePhysicalStatus= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter Physical Status", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='PHYSICAL STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.physical_status,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.laboratory = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.saveOral= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter LAST ORAL INTAKE", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='LAST ORAL INTAKE';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.oral,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.oral = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.saveNutritional= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter NUTRITIONAL STATUS", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='NUTRITIONAL STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.nutrional,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                    hb.nutrional = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }
			

		
		var mortuary_classes=[];
		$scope.showSearchMortuaryClass= function (searchKey) {
				
            $http.get('/api/getMortuaryClasses/'+searchKey).then(function(data) {
                mortuary_classes=data.data;
			
            });
			return mortuary_classes;
        }	
			  

			  var beds=[];
		$scope.showSearchBedTypes= function (searchKey) {				
            $http.get('/api/searchBedTypes/'+searchKey).then(function(data) {
            beds=data.data;			
            });
			return beds;
        }	
		
		
		$scope.getPendingCorpses= function () {
			$http.get('/api/getPendingCorpses/'+facility_id).then(function(data) {
            $scope.pendingCorpses=data.data;

                console.log($scope.pendingCorpses);
          			
            });
        }

        $scope.getPendingOutsideCorpses= function () {
			$http.get('/api/getPendingOutsideCorpses/'+facility_id).then(function(data) {
            $scope.PendingOutsideCorpses=data.data;
             });
        }




        $scope.giveCorpseCabinet= function (getPendingOutside) {
            console.log(getPendingOutside);
		    var corpse_admission_id=getPendingOutside.corpse_admission_id;
            $http.get('/api/getPendingOutsideCorpseInfo/'+corpse_admission_id).then(function(data) {
                var object=data.data;
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/mortuary/cabinetAllocation.html',
                    size: 'lg',
                    animation: true,
                    controller: 'mortuaryCareModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });

                modalInstance.result.then(function(quick_registration) {
                    $scope.quick_reg = quick_registration;
                    console.log($scope.quick_reg);
                });

            });

        }






        $scope.getApprovedCorpses= function () {
			$http.get('/api/getApprovedCorpses/'+facility_id).then(function(data) {
            $scope.approvedCorpses=data.data;

            });
        }

		$scope.getVital= function () {
			$http.post('/api/getVital').then(function(data) {
            $scope.getVitals=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		
		
		$scope.saveAssociateHistory= function (associate_history,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(associate_history)==false){
					  
					  return sweetAlert("Please Enter History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='ASSOCIATE HISTORY';
			var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
				"medical":associate_history.medical,"surgical":associate_history.surgical,
				"anaesthetic":associate_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
			$http.post('/api/saveAssociateHistory',associateHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		$scope.savePastHistory= function (past_history,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(past_history)==false){
					  
					  return sweetAlert("Please Enter History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='PAST HISTORY';
			var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"medical":past_history.medical,"surgical":past_history.surgical,"anaesthetic":past_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
			$http.post('/api/savePastHistory',associateHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		
		$scope.saveSocialSurgery= function (social,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(social)==false){
					  
					  return sweetAlert("Please Enter Social History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='SOCIAL AND FAMILY HISTORY';
			var socialHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"chronic_illness":social.chronic_illness,"substance_abuse":social.substance_abuse,"adoption":social.adoption,"others":social.others,"other_information":information_category,"nurse_id":user_id};
			$http.post('/api/saveSocialHistory',socialHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		$scope.saveRespiratoryExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Respiratory System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/physical_examinations.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveDentalStatus= function (tooth_id,tooth_number,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before ENTERING DENTAL STATUS", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			  $scope.dentals={"tooth_id":tooth_id,"tooth_number":tooth_number};
			 var object =angular.extend($scope.selectedPatient,$scope.dentals); 
             console.log(object);				 
             console.log($scope.dentals);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/dental_status.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveCardivascularExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Cardivascular System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/cardivascular_examinations.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }	


		$scope.saveGastroIntestineExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Gastro Intestine System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/gastrointestine.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveCentralNervousSystem= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding CENTRAL NERVOUS SYSTEM", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/centralNervousSystem.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.getDiagnosis= function () {
			$http.get('/api/getDiagnosis').then(function(data) {
            $scope.getDiagnosises=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		$scope.getTeeth= function (selectedPatient) {
						
			$http.get('/api/getTeethAbove').then(function(data) {
            $scope.teethAboves=data.data;
			$http.get('/api/getTeethBelow').then(function(data) {
            $scope.teethBelows=data.data;
			console.log($scope.teethBelows);
		});
			
			         });
					 
			if(angular.isDefined(selectedPatient)==false){					  
       return sweetAlert("Select the Patient Before SETTING DENTAL STATUS", "", "error");
			}else{
				var request_id=selectedPatient.id;
			$http.get('/api/getTeethStatusFromPatientAbove/'+request_id).then(function(data) {
            $scope.teeth_patientsAboves=data.data;
					
            });
			
			$http.get('/api/getTeethStatusFromPatientBelow/'+request_id).then(function(data) {
            $scope.teeth_patientsBelows=data.data;
			 			
            });
				
			}
			
			
			
			
        }
		
		
		
		$scope.getDrugs= function () {
			$http.get('/api/getDrugs').then(function(data) {
            $scope.getDrugs=data.data;
            //console.log($getVitals);			
            });
			
        }

	$scope.getCabinetsLists= function () {
			$http.get('/api/getCabinetsLists/'+facility_id).then(function(data) {
            $scope.cabinetsLists=data.data;
              });
		}

		$scope.getMortuaryClass= function () {
			$http.get('/api/getMortuaryClassLists/'+facility_id).then(function(data) {
            $scope.getMortuaryClasses=data.data;
            });
			
        }
		
		$scope.addVitals= function (vitals,selectedPatient) {
			if (angular.isDefined(vitals)==false) {
                   return sweetAlert("Please Select the Vital Signs", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			console.log(selectedPatient);
			 var admission_id=selectedPatient.admission_id;
			var vitalsSigns={"observed_amount":vitals.amount,"observation_type_id":vitals.types,"admission_id":admission_id};
			$http.post('/api/addVitals',vitalsSigns).then(function(data) {
            $scope.getVitals=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addDrugs= function (drugs,selectedPatient) {
			if (angular.isDefined(drugs)==false) {
                   return sweetAlert("Please Select the DRUGS", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			var admission_id=selectedPatient.admission_id;
			var drugsList={"how_often":drugs.drugs_given,"type_of_drugs_dosage_id":drugs.types,"admission_id":admission_id};
			$http.post('/api/addDrugs',drugsList).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		$scope.addGoals= function (goals,selectedPatient) {
			if (angular.isDefined(goals)==false) {
                   return sweetAlert("Please Select Nursing Diagnosis", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			console.log(selectedPatient);
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="PATIENT GOALS";
		
  var goals={"targeted_plans":goals.patient_goals,
			            "nurse_diagnosis_id":goals.types,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addGoals',goals).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addImplementation= function (implementations,selectedPatient) {
			if (angular.isDefined(implementations)==false) {
                   return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="IMPLEMENTATIONS";
		
  var implementations={"targeted_plans":implementations.implementation,
			            "nurse_diagnosis_id":implementations.getDiagnos,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addImplementations',implementations).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addEvaluations= function (evaluations,selectedPatient) {
			if (angular.isDefined(evaluations)==false) {
                   return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="EVALUATIONS";
		
  var evaluations={"targeted_plans":evaluations.evaluation,
			            "nurse_diagnosis_id":evaluations.getDiagnos,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addEvaluations',evaluations).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		$scope.addTimes= function (times,selectedPatient) {
			if (angular.isDefined(times)==false) {
                   return sweetAlert("Please Select Diagnosis for TIMING", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  
				console.log(times); 
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="TIME";
			 var daytime=times.time_day;
			 var resultsTime=times.time+' '+daytime;
		
  var times={"targeted_plans":resultsTime,
			       "nurse_diagnosis_id":times.getDiagnos,
			       "admission_id":admission_id,
			       "nursing_care_types":nursing_care_type,"nurse_id":user_id,"daytime":daytime};
				   console.log(times);
				   
			$http.post('/api/addTimes',times).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
											
				  }			
            });
			
        }	
		
		$scope.patientDischarge= function (selectedPatient) {		
			 $scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/patientDischarge.html',
				  size: 'lg',
				  animation: true,
				  controller: 'patientDischargedModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
		 
		}
		
		
		
		
		
		$scope.addOutPuts= function (getOutPuts,selectedPatient) {
			if (angular.isDefined(getOutPuts)==false) {
                   return sweetAlert("Please Select the OUTPUT TYPES", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			var admission_id=selectedPatient.admission_id;
			var getOutPuts={"amount":getOutPuts.amount,
							"observation_output_type_id":getOutPuts.types,
							"admission_id":admission_id,
							"si_units":getOutPuts.units,
							"nurse_id":user_id
							};
							console.log(getOutPuts);
			$http.post('/api/addOutPuts',getOutPuts).then(function(data) {
            $scope.getOutPuts=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		
		
		$scope.addIntravenous= function (intravenous,selectedPatient) {
			if (angular.isDefined(intravenous)==false) {
                   return sweetAlert("Please Select the INTRAVENOUS FLUID", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			var intravenous={"intravenous_mils":intravenous.amount,"intravenous_types_id":intravenous.types,"admission_id":admission_id};
			$http.post('/api/addIntakeObservation',intravenous).then(function(data) {
            $scope.getIntravenous=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		
		$scope.addIntakeFluid= function (oral,selectedPatient) {
			if (angular.isDefined(oral)==false) {
                   return sweetAlert("Please Select the ORAL FLUID TYPE TAKEN", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }						
			var admission_id=selectedPatient.admission_id;
			
var oral_mils={"oral_mils":oral.amount,"oral_types_id":oral.types,"admission_id":admission_id};
			$http.post('/api/addIntakeFluid',oral_mils).then(function(data) {
            $scope.getIntravenous=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		  					
												
				  }			
            });
			
        }	
			
						   
		$scope.addMortuary= function (mortuary,mortuary_class) {
	              if (angular.isDefined(mortuary)==false) {
                   return sweetAlert("Please Enter MORTUARY NAME BEFORE SAVING...", "", "error");
                  }

				   else if (angular.isDefined(mortuary_class)==false) {
                   return sweetAlert("Please Enter MORTUARY CLASS", "", "error");
                   }


				  else{
					 console.log(mortuary);
					 console.log(mortuary_class);
	$http.post('/api/addMortuary',{"mortuary_class_id":mortuary_class.mortuary_class_id.item_id,"mortuary_name":mortuary.mortuary_name,"user_id":user_id,"facility_id":facility_id}).then(function(data) {
           
			 if(data.data.status ==0){
					 $scope.mortuary = null;
					 sweetAlert(data.data.data, "", "error");
				  }else{
					   $scope.mortuary = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }
	$scope.addCabinet= function (cabinets,mortuary_id) {
	             if (angular.isDefined(cabinets)==false) {
                   return sweetAlert("Please Enter CABINET NAME ", "", "error");
                  }	   
				   else if (angular.isDefined(mortuary_id)==false) {
                   return sweetAlert("Selected Mortuary Flushed in the Local storage Please Restart ", "", "error");
                   }
				  else{
	                 $http.post('/api/saveCabinets',{"cabinet_name":cabinets.cabinet_number,"capacity":cabinets.capacity,"mortuary_id":mortuary_id,"user_id":user_id,"eraser":1}).then(function(data) {
			 if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }else{
                 $scope.getCabinetsLists();
					    sweetAlert(data.data.data, "", "success");
					 
				  }
					          });
					  
				  } 

        }

		 $scope.getMortuaryDetails= function (mortuary_id) {

			     $http.get('/api/getMortuaryOneInfo/'+mortuary_id).then(function(data){
                 $scope.mortuary=data.data;
					          });


            $http.get('/api/getCabinets/'+mortuary_id).then(function(data) {
                $scope.Cabinets=data.data;
              var object =$scope.mortuary;
           	 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/mortuary/manageMortuaryCabinates.html',
				  size: 'lg',
				  animation: true,
				  controller: 'mortuaryManagementModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			
            });
			
			  }	



		 $scope.getBedDetails=function (bed_id,ward_id,bed_available) {					
            $http.get('/api/OnThisBed/'+bed_id).then(function(data) {
              beds=data.data; 

            if(data.data.status ==0){
					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' TAKEN BY '+ data.data.data;
                    sweetAlert(bed_details, "", "success");  					
					 
				  }			  
           		
              });
			
			  }
		  
		  
		  
		  
		
		var patapata="";
		 $scope.getAdmissionNotes= function (patient) {				
            $http.post('/api/getInstructions',{"patient_id":patient}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });
					   
            }

			$scope.giveBed= function (bed_id,last_name,ward_id,admission_id,bed_available) {
				
				 // sweetAlert(bed_id+' '+bed_available, "", "success"); 
				 console.log(admission_id);
				
            $http.post('/api/giveBed',{"bed_id":bed_id,"ward_id":ward_id,"admission_id":admission_id,"bed_available":bed_available}).then(function(data) {
            $scope.giveBeds=data.data;
			console.log($scope.giveBeds);
			
			if(data.data.status ==0){					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' SUCCESSFULLY ASSIGNED TO '+last_name;
                    sweetAlert(bed_details, "", "success");  					
					 
				  }	
			
			
			          });
					
					   
            }	

			
		 $scope.getAdmPatient= function (admitted) {
			 $scope.selectedPatient=admitted;
			 console.log($scope.selectedPatient);
		 }
		 
		 $scope.getMortuary= function () {
			$http.get('/api/getMortuaryList').then(function(data){
            $scope.getMortuaryLists=data.data;
			   });
		 }
		 
		 
			 
			 $scope.getDisposed= function (pendingCorpse) {

             var object =pendingCorpse;
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/mortuary/cabinetAllocation.html',
				  size: 'lg',
				  animation: true,
				  controller: 'corpseDisposedModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			

			
			  }	



			  $scope.assignToTheatre= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.get('/api/getFullAdmitedPatientInfo/'+admission_id).then(function(data) {
            $scope.admissions=data.data;
			    console.log(data.data);
				console.log(admission_id);		
             var object = $scope.admissions;        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/postPatientsToTheatre.html',
				  size: 'lg',
				  animation: true,
				  controller: 'postPatientsToTheatreModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
					
			
            });
			
			  }
			  
			 	 
			  
		
				

    }

})();

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('mortuaryManagementModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
                    $scope.mortuary=object;
                    var mortuary_id=$scope.mortuary.id;

            $http.get('/api/getCabinetNumber/'+mortuary_id).then(function(data){
                $scope.getCabinetNumber=data.data;
            });

            $http.get('/api/getCabinets/'+mortuary_id).then(function(data){
                $scope.getCabinets=data.data;
            });

			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('TimePicker',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'time',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,time) {

            $scope.mytime = new Date();

            $scope.hstep = 1;
            $scope.mstep = 15;
            $scope.mytime = '';

            $scope.options = {
                hstep: [1, 2, 3],
                mstep: [1, 5, 10, 15, 25, 30]
            };
            $scope.ismeridian = true;
            $scope.mytime = time;
            $scope.selected = {
                mytime: $scope.mytime
            };
            $scope.toggleMode = function() {
                $scope.ismeridian = ! $scope.ismeridian;
            };

            $scope.update = function() {
                var d = new Date();
                d.setHours( 14 );
                d.setMinutes( 0 );
                $scope.mytime = d;
            };

            $scope.changed = function () {
                console.log('Time changed to: ' + $scope.mytime);
            };

            $scope.clear = function() {
                $scope.mytime = null;
            };
            $scope.ok = function () {
                $uibModalInstance.close($scope.mytime);
            };

            $scope.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };


        }]);
		
		
		
		
		
}());

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('nursingCareController',nursingCareController);

    function nursingCareController($http, $auth, $rootScope,$state,$location,$scope,$uibModal) {
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
        $scope.mytime1 = new Date();
        $scope.mytime2 = new Date();

				  $scope.AdmissionNotes="";
				  var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];	
				   
				     angular.element(document).ready(function () {
						 $scope.setTabWards(1);
						 
         
                          });



        $scope.openModalTime = function (size) {

            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: '/views/modules/nursing_care/timepicker.html',
                controller: 'TimePicker',
                size: size,
                resolve: {
                    time: function () {
                        return $scope.mytime;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                $scope.mytime = selectedItem;
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
            });
        };

        $scope.toggleAnimation = function () {
            $scope.animationsEnabled = !$scope.animationsEnabled;
        };




				   

  $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });				   
				   
			$scope.setTabAdmission = function(newTab){				
            $scope.tab = newTab;
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.post('/api/getPendingAdmissionList').then(function(data) {
            $scope.admin=data.data;
			console.log($scope.admin);
			
            });
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });
			
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getPatientSentToTheatre').then(function(data) {
            $scope.patientsSentToTheatres=data.data;
			
            });
			
			
        };
		
		
		$scope.setTabattendedPatientTheatre = function(newTab){				
            $scope.tab = newTab;
			
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/attendPatientTheatre').then(function(data) {
            $scope.attendPatientTheatres=data.data;
			
            });
			
			
        };
		

		$scope.getDischargedPatients = function(){
		    $http.get('/api/getDischargedLists/'+facility_id).then(function(data) {
            $scope.dischargedPatients=data.data;
            });
        }

		$scope.setTabWards = function(newTab){				
            $scope.tab = newTab;
			$scope.setTabAdmission(1);
			$http.get('/api/getWards/'+facility_id).then(function(data) {
            $scope.getWards=data.data;
					
            });			
        };
		
		$scope.setTabDischarge = function(newTab){				
            $scope.tab = newTab;
            $scope.getDischargedPatients();
			$http.get('/api/getWards/'+facility_id).then(function(data) {
            $scope.getWards=data.data;
					
            });			
        };
		
		$scope.setTabObservation = function(newTab){				
            $scope.tab = newTab;
			//$scope.setTabAdmission(1);
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });		
        };
		
		$scope.setTabNursingCare = function(newTab){				
            $scope.tab = newTab;
			//$scope.setTabAdmission(1);
			//.. i need to pass ward ID LATER TO RESTRICT
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });		
        };

		$scope.setTabWardtypes = function(newTab){				
            $scope.tab = newTab;
			
			$http.post('/api/getWardTypes').then(function(data) {
            $scope.getWardTypes=data.data;
					
            });			
        };	

		$scope.setTabTreatment = function(newTab){				
            $scope.tab = newTab;
			
			$http.get('/api/getAprovedAdmissionList').then(function(data) {
            $scope.admitted=data.data;
			
            });	
        };

        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime = true;

						   
						

  $scope.addWardTypes= function (wards) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(wards)==false) {
                   return sweetAlert("Please Enter WARD TYPE", "", "error");
                  }else{
	$http.post('/api/saveWardTypes',{"ward_type_name":wards.ward_type}).then(function(data) {
           
			 if(data.data.status ==0){
					 $scope.wards = null;
					 sweetAlert(data.data.data, "", "error");
				  }else{
					   $scope.wards = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }


        $scope.addTimesQue= function (PreMedication,selectedPatient) {
	             if (angular.isDefined(PreMedication)==false) {
                   return sweetAlert("Please Enter Pre-Medication ", "", "error");
                 }
                 else{
	             var PreMedicationTime=PreMedication.time+" "+PreMedication.time_day;
	             var information_category="PRE MEDICATION";
	             var dataPost={"erasor":0,"noted_value":PreMedicationTime,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":PreMedication.remarks,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreMedication = null;
                    sweetAlert(data.data.data, "", "success");
				  }

                 });
                  }
        }





        $scope.PreOPCondition= function (PreOPCondition,selectedPatient) {
	             if (angular.isDefined(PreOPCondition)==false) {
                   return sweetAlert("Please Enter Pre Operation Condition", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="PRE-OPERTION CONDITION";
	             var dataPost={"erasor":0,"noted_value":PreOPCondition.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":PreOPCondition.case,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }



        $scope.anaesthBloodLoss= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF BLOOD COLLECTED", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="BLOOD LOSS";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.noted_amount,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthFluidGiven= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF FLUID GIVEN", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="FLUID GIVEN";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.noted_amount_fluid,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.noted_amount_fluid,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


 $scope.anaesthUrineOutput= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter AMOUNT OF URINE OUTPUT", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="URINE OUTPUT";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.urine_output,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.urine_output,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     pulse_rate.urine_output = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


 $scope.anaesthComplications= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Write any Compilcations found during Operations", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else{
	             var information_category="COMPLICATIONS";
	             var dataPost={"erasor":0,"noted_value":pulse_rate.complications,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":pulse_rate.complications,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
                     pulse_rate.complications = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthPulseRate= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="PULSE RATE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthSystolic= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="SYSTOLIC PRESSURE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	pulse_rate.read = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthDiastolic= function (pulse_rate,selectedPatient) {
	             if (angular.isDefined(pulse_rate)==false) {
                   return sweetAlert("Please Enter Pulse Rate Associating Info", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }
                 else if (pulse_rate.am_pm==null) {
                     return sweetAlert("IS IT AM/PM ? ", "", "error");
                 }

                 else if (pulse_rate.hr==null) {
                     return sweetAlert("HOURS MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins==null) {
                     return sweetAlert("MINUTES MISSED ", "", "error");
	             }
	             else if (pulse_rate.mins.length !=2) {
                     return sweetAlert("MINUTES MUST BE IN TWO DIGITS ", "", "error");
	             }
	             else if (pulse_rate.mins >=60) {
                     return sweetAlert("MINUTES MUST BE LESS THAN 60 ", "", "error");
	             }

	             else if (pulse_rate.mins < 0) {
                     return sweetAlert("MINUTES MUST BE GREATER THAN 0 ", "", "error");
	             }
                else if (pulse_rate.read_diastolic==null) {
                     return sweetAlert("EMPTY VALUE IN READ BOX  ", "", "error");
	             }


                 else{

	             var information_category="DIASTOLIC PRESSURE";

	             var dataPost={"erasor":0,"noted_value":pulse_rate.read_diastolic,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "am_pm":pulse_rate.am_pm,"mins":pulse_rate.mins,"hr":pulse_rate.hr,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addPrBp',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	pulse_rate.read_diastolic = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthIntubation= function (Intubation,selectedPatient) {
	             if (angular.isDefined(Intubation)==false) {
                   return sweetAlert("Please Enter INTUBATION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{

	             var information_category="INTUBATION";
	             var dataPost={"erasor":0,"noted_value":Intubation.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Intubation.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.PreOPCondition = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthRespiration= function (Respiration,selectedPatient) {
	             if (angular.isDefined(Respiration)==false) {
                   return sweetAlert("Please Enter RESPIRATION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="RESPIRATION";
	             var dataPost={"erasor":0,"noted_value":Respiration.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Respiration.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthLocal= function (Local,selectedPatient) {
	             if (angular.isDefined(Local)==false) {
                   return sweetAlert("Please Enter LOCAL INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="LOCAL";
	             var dataPost={"erasor":0,"noted_value":Local.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Local.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthPosition= function (Position,selectedPatient) {
	             if (angular.isDefined(Position)==false) {
                   return sweetAlert("Please Enter POSITION INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="POSITION";
	             var dataPost={"erasor":0,"noted_value":Position.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Position.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Respiration = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }


        $scope.anaesthNeedle= function (Needle,selectedPatient) {
	             if (angular.isDefined(Needle)==false) {
                   return sweetAlert("Please Enter NEEDLE INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="NEEDLE";
	             var dataPost={"erasor":0,"noted_value":Needle.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Needle.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Needle = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

        $scope.anaesthEffect= function (Effect,selectedPatient) {
	             if (angular.isDefined(Effect)==false) {
                   return sweetAlert("Please Enter NEEDLE INFO", "", "error");
                 }
                 else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Select Patient Before Proceed", "", "error");
                 }

                 else{
	             var information_category="EFFECT";
	             var dataPost={"erasor":0,"noted_value":Effect.condition,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
                         "remarks":Effect.condition,"information_category":information_category,"nurse_id":user_id};
                 $http.post('/api/addTimesQue',dataPost).then(function(data) {
			     if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }
			      else{
			      	$scope.Effect = null;
                    sweetAlert(data.data.data, "", "success");
				  }});
                  }
        }

		$scope.saveHb= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter Laboratory Status", "", "error");
                  } 
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='LABORATORY STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.laboratory,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {
           
			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.laboratory = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }


        $scope.savePreAnaestheticOrder= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter PRE ANAESTHETIC ORDER", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='PRE ANAESTHETIC ORDER';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.pre_anaesthetic_order,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
				    hb.pre_anaesthetic_order = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }


        $scope.saveAnaestheticTechniques= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter ANAESTHETIC TECHNIQUES", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	var information_category='ANAESTHETIC TECHNIQUES';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.anaesthetic_technique,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
				    hb.anaesthetic_technique = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.savePhysicalStatus= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter Physical Status", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='PHYSICAL STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.physical_status,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.laboratory = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.saveOral= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter LAST ORAL INTAKE", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='LAST ORAL INTAKE';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.oral,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                     hb.oral = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }

        $scope.saveNutritional= function (hb,selectedPatient) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(hb)==false) {
                   return sweetAlert("Please Enter NUTRITIONAL STATUS", "", "error");
                  }
				  else if (angular.isDefined(selectedPatient)==false) {
                   return sweetAlert("Please Enter Patient Selected", "", "error");
                  } else{
	             	console.log(hb);
	             	var information_category='NUTRITIONAL STATUS';
	             	var dataToPost={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
						"value_noted":hb.nutrional,"information_category":information_category,"nurse_id":user_id};
                     $http.post('/api/saveStatusAnaesthetic',dataToPost).then(function(data) {

			 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
                    hb.nutrional = null;
                    sweetAlert(data.data.data, "", "success");


				  }




			          });

				  }


        }
			
             var ward_types=[];
		$scope.showSearchWardTypes= function (searchKey) {
				
            $http.get('/api/searchWardTypes/'+searchKey).then(function(data) {
            ward_types=data.data;
			
            });
			return ward_types;
        }	
		
		var ward_classes=[];
		$scope.showSearchWardClass= function (searchKey) {
				
            $http.get('/api/getWardClasses/'+searchKey).then(function(data) {
            ward_classes=data.data;
			
            });
			return ward_classes;
        }	
			  

			  var beds=[];
		$scope.showSearchBedTypes= function (searchKey) {				
            $http.get('/api/searchBedTypes/'+searchKey).then(function(data) {
            beds=data.data;			
            });
			return beds;
        }	
		
		
		$scope.getOutPutTypes= function () {
			$http.get('/api/getOutPutTypes').then(function(data) {
            $scope.getOutPutTypes=data.data;
          			
            });
			
        }
		
		$scope.getVital= function () {
			$http.post('/api/getVital').then(function(data) {
            $scope.getVitals=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		
		
		$scope.saveAssociateHistory= function (associate_history,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(associate_history)==false){
					  
					  return sweetAlert("Please Enter History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='ASSOCIATE HISTORY';
			var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,
				"medical":associate_history.medical,"surgical":associate_history.surgical,
				"anaesthetic":associate_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
			$http.post('/api/saveAssociateHistory',associateHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		$scope.savePastHistory= function (past_history,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(past_history)==false){
					  
					  return sweetAlert("Please Enter History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='PAST HISTORY';
			var associateHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"medical":past_history.medical,"surgical":past_history.surgical,"anaesthetic":past_history.anaesthetic,"information_category":information_category,"nurse_id":user_id};
			$http.post('/api/savePastHistory',associateHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		
		$scope.saveSocialSurgery= function (social,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  else if(angular.isDefined(social)==false){
					  
					  return sweetAlert("Please Enter Social History Records or NILL", "", "error");
				  }
			var admission_id=selectedPatient.admission_id;
			var information_category='SOCIAL AND FAMILY HISTORY';
			var socialHistory={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"chronic_illness":social.chronic_illness,"substance_abuse":social.substance_abuse,"adoption":social.adoption,"others":social.others,"other_information":information_category,"nurse_id":user_id};
			$http.post('/api/saveSocialHistory',socialHistory).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		 				
				  }			
            });
			
        }
		
		$scope.saveRespiratoryExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Respiratory System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/physical_examinations.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveDentalStatus= function (tooth_id,tooth_number,selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before ENTERING DENTAL STATUS", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			  $scope.dentals={"tooth_id":tooth_id,"tooth_number":tooth_number};
			 var object =angular.extend($scope.selectedPatient,$scope.dentals); 
             console.log(object);				 
             console.log($scope.dentals);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/dental_status.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveCardivascularExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Cardivascular System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/cardivascular_examinations.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }	


		$scope.saveGastroIntestineExaminations= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding Gastro Intestine System", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/gastrointestine.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.saveCentralNervousSystem= function (selectedPatient) {
			 if(angular.isDefined(selectedPatient)==false){					  
return sweetAlert("Select the Patient Before Adding CENTRAL NERVOUS SYSTEM", "", "error");
				  }
				  else{
				  
			$scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/centralNervousSystem.html',
				  size: 'lg',
				  animation: true,
				  controller: 'physicalExaminations',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
			
			
			
				  }
			
        }
		
		$scope.getDiagnosis= function () {
			$http.get('/api/getDiagnosis').then(function(data) {
            $scope.getDiagnosises=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		$scope.getTeeth= function (selectedPatient) {
						
			$http.get('/api/getTeethAbove').then(function(data) {
            $scope.teethAboves=data.data;
			$http.get('/api/getTeethBelow').then(function(data) {
            $scope.teethBelows=data.data;
			console.log($scope.teethBelows);
		});
			
			         });
					 
			if(angular.isDefined(selectedPatient)==false){					  
       return sweetAlert("Select the Patient Before SETTING DENTAL STATUS", "", "error");
			}else{
				var request_id=selectedPatient.id;
			$http.get('/api/getTeethStatusFromPatientAbove/'+request_id).then(function(data) {
            $scope.teeth_patientsAboves=data.data;
					
            });
			
			$http.get('/api/getTeethStatusFromPatientBelow/'+request_id).then(function(data) {
            $scope.teeth_patientsBelows=data.data;
			 			
            });
				
			}
			
			
			
			
        }
		
		
		
		$scope.getDrugs= function () {
			$http.get('/api/getDrugs').then(function(data) {
            $scope.getDrugs=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		$scope.getIntakeFluid= function () {
			$http.get('/api/getIntakeSolutions').then(function(data) {
            $scope.getIntakeFluids=data.data;
            //console.log($getVitals);			
            });
			
        }
		
		$scope.addVitals= function (vitals,selectedPatient) {
			if (angular.isDefined(vitals)==false) {
                   return sweetAlert("Please Select the Vital Signs", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			console.log(selectedPatient);
			 var admission_id=selectedPatient.admission_id;
			var vitalsSigns={"observed_amount":vitals.amount,"observation_type_id":vitals.types,"admission_id":admission_id};
			$http.post('/api/addVitals',vitalsSigns).then(function(data) {
            $scope.getVitals=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addDrugs= function (drugs,selectedPatient) {
			if (angular.isDefined(drugs)==false) {
                   return sweetAlert("Please Select the DRUGS", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			var admission_id=selectedPatient.admission_id;
			var drugsList={"how_often":drugs.drugs_given,"type_of_drugs_dosage_id":drugs.types,"admission_id":admission_id};
			$http.post('/api/addDrugs',drugsList).then(function(data) {
            
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		$scope.addGoals= function (goals,selectedPatient) {
			if (angular.isDefined(goals)==false) {
                   return sweetAlert("Please Select Nursing Diagnosis", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			console.log(selectedPatient);
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="PATIENT GOALS";
		
  var goals={"targeted_plans":goals.patient_goals,
			            "nurse_diagnosis_id":goals.types,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addGoals',goals).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addImplementation= function (implementations,selectedPatient) {
			if (angular.isDefined(implementations)==false) {
                   return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="IMPLEMENTATIONS";
		
  var implementations={"targeted_plans":implementations.implementation,
			            "nurse_diagnosis_id":implementations.getDiagnos,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addImplementations',implementations).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }
		
		$scope.addEvaluations= function (evaluations,selectedPatient) {
			if (angular.isDefined(evaluations)==false) {
                   return sweetAlert("Please Select Diagnosis for Implementations", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="EVALUATIONS";
		
  var evaluations={"targeted_plans":evaluations.evaluation,
			            "nurse_diagnosis_id":evaluations.getDiagnos,
			            "admission_id":admission_id,
			            "nursing_care_types":nursing_care_type,"nurse_id":user_id};
			$http.post('/api/addEvaluations',evaluations).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		$scope.addTimes= function (times,selectedPatient) {
			if (angular.isDefined(times)==false) {
                   return sweetAlert("Please Select Diagnosis for TIMING", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
				  
				console.log(times); 
			
			 var admission_id=selectedPatient.admission_id;
			 var nursing_care_type="TIME";
			 var daytime=times.time_day;
			 var resultsTime=times.time+' '+daytime;
		
  var times={"targeted_plans":resultsTime,
			       "nurse_diagnosis_id":times.getDiagnos,
			       "admission_id":admission_id,
			       "nursing_care_types":nursing_care_type,"nurse_id":user_id,"daytime":daytime};
				   console.log(times);
				   
			$http.post('/api/addTimes',times).then(function(data) {
           			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
											
				  }			
            });
			
        }	
		
		$scope.patientDischarge= function (selectedPatient) {		
			 $scope.selectedPatient=selectedPatient;
			 console.log($scope.selectedPatient);
			 
			 //console.log(beds_number);			  
             var object =$scope.selectedPatient; 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/patientDischarge.html',
				  size: 'lg',
				  animation: true,
				  controller: 'patientDischargedModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
		 
		}
		
		
		
		
		
		$scope.addOutPuts= function (getOutPuts,selectedPatient) {
			if (angular.isDefined(getOutPuts)==false) {
                   return sweetAlert("Please Select the OUTPUT TYPES", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			var admission_id=selectedPatient.admission_id;
			var getOutPuts={"amount":getOutPuts.amount,
							"observation_output_type_id":getOutPuts.types,
							"admission_id":admission_id,
							"si_units":getOutPuts.units,
							"nurse_id":user_id
							};
							console.log(getOutPuts);
			$http.post('/api/addOutPuts',getOutPuts).then(function(data) {
            $scope.getOutPuts=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		
		
		$scope.addIntravenous= function (intravenous,selectedPatient) {
			if (angular.isDefined(intravenous)==false) {
                   return sweetAlert("Please Select the INTRAVENOUS FLUID", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }
			
			
			 var admission_id=selectedPatient.admission_id;
			var intravenous={"intravenous_mils":intravenous.amount,"intravenous_types_id":intravenous.types,"admission_id":admission_id};
			$http.post('/api/addIntakeObservation',intravenous).then(function(data) {
            $scope.getIntravenous=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");            				  					
					 //$scope.getAdmPatient(selectedPatient);
							
				  }			
            });
			
        }	
		
		
		$scope.addIntakeFluid= function (oral,selectedPatient) {
			if (angular.isDefined(oral)==false) {
                   return sweetAlert("Please Select the ORAL FLUID TYPE TAKEN", "", "error");
                  }
				  else if(angular.isDefined(selectedPatient)==false){
					  
					  return sweetAlert("Please Select the Patient From list on the Left panel", "", "error");
				  }						
			var admission_id=selectedPatient.admission_id;
			
var oral_mils={"oral_mils":oral.amount,"oral_types_id":oral.types,"admission_id":admission_id};
			$http.post('/api/addIntakeFluid',oral_mils).then(function(data) {
            $scope.getIntravenous=data.data;
			
          if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
                    sweetAlert(data.data.data, "", "success");		  					
												
				  }			
            });
			
        }	
			
						   
		$scope.addWard= function (wards,ward_class) {
	   //var ward_type=wards.ward_type;
	    //console.log(ward_class);
	             if (angular.isDefined(wards)==false) {
                   return sweetAlert("Please Enter WARD NAME", "", "error");
                  }
				  else if (angular.isDefined(wards.ward_type)==false) {
                   return sweetAlert("Please Enter WARD TYPE", "", "error");
                   }
				   
				   else if (angular.isDefined(ward_class)==false) {
                   return sweetAlert("Please Enter WARD CLASS", "", "error");
                   } 
				   
				   else if (angular.isDefined(ward_class.ward_class_id)==false) {
                   return sweetAlert("Please Enter WARD CLASS", "", "error");
                   }
				   
				  else{
					  
	$http.post('/api/saveWards',{"ward_class_id":ward_class.ward_class_id.item_id,"ward_name":wards.ward_name,"ward_type_id":wards.ward_type.id,"ward_type_name":wards.ward_type.ward_type_name,"facility_id":facility_id}).then(function(data) {
           
			 if(data.data.status ==0){
					 $scope.wards = null;
					 sweetAlert(data.data.data, "", "error");
				  }else{
					   $scope.wards = null;
                    sweetAlert(data.data.data, "", "success");            				  					
					 
							
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }
		
		
		$scope.addBed= function (wards,ward_id) {
	   //var ward_type=wards.ward_type;
	             if (angular.isDefined(wards)==false) {
                   return sweetAlert("Please Enter BED NUMBER "+ward_id, "", "error");
                  }	   
				   else if (angular.isDefined(wards.bed_type)==false) {
                   return sweetAlert("Please Enter BED TYPE "+ward_id, "", "error");
                   }
				  else{
					  console.log(wards.bed_type);
	$http.post('/api/saveBeds',{"bed_name":wards.bed_number,"bed_type_id":wards.bed_type.id,"ward_id":ward_id,"facility_id":facility_id,"eraser":1}).then(function(data) {           
			 if(data.data.status ==0){
					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  // $scope.wards = null;
                    sweetAlert(data.data.data, "", "success");  					
					 
				  }
			
			
			
			
			          });  
					  
				  } 
				           
			
        }
		
		
		
        var beds_number=0;
	    var beds=[];
        var wards=[];
		 $scope.getWardDetails= function (ward_id) {
			      			 
			 $http.get('/api/getWardOneInfo/'+ward_id).then(function(data){
             wards=data.data;		 
					          }); 
		$http.get('/api/getBedsNumber/'+ward_id).then(function(data){
             beds_number=data.data;
					          });
							  
            $http.get('/api/getBeds/'+ward_id).then(function(data) {
              beds=data.data; 	
              //console.log(beds_number);			  
             var object =angular.extend({},wards, beds_number); 
             //console.log(beds_number);				 
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/manageWardBeds.html',
				  size: 'lg',
				  animation: true,
				  controller: 'wardManagementModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			
            });
			
			  }	



		 $scope.getBedDetails=function (bed_id,ward_id,bed_available) {					
            $http.get('/api/OnThisBed/'+bed_id).then(function(data) {
              beds=data.data; 

            if(data.data.status ==0){
					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' TAKEN BY '+ data.data.data;
                    sweetAlert(bed_details, "", "success");  					
					 
				  }			  
           		
              });
			
			  }
		  
		  
		  
		  
		
		var patapata="";
		 $scope.getAdmissionNotes= function (patient) {				
            $http.post('/api/getInstructions',{"patient_id":patient}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });
					   
            }

			$scope.giveBed= function (bed_id,last_name,ward_id,admission_id,bed_available) {
				
				 // sweetAlert(bed_id+' '+bed_available, "", "success"); 
				 console.log(admission_id);
				
            $http.post('/api/giveBed',{"bed_id":bed_id,"ward_id":ward_id,"admission_id":admission_id,"bed_available":bed_available}).then(function(data) {
            $scope.giveBeds=data.data;
			console.log($scope.giveBeds);
			
			if(data.data.status ==0){					
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' SUCCESSFULLY ASSIGNED TO '+last_name;
                    sweetAlert(bed_details, "", "success");  					
					 
				  }	
			
			
			          });
					
					   
            }	

			
		 $scope.getAdmPatient= function (admitted) {
			 $scope.selectedPatient=admitted;
			 console.log($scope.selectedPatient);
		 }
		 
		 $scope.getPatientsSentToTheatre= function () {
              
			$http.get('/api/getPatientSentToTheatre').then(function(data){
            $scope.patientsSentToTheatres=data.data;			
			   });
		 }
		 
		 
			 
			 $scope.getAdmission= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.post('/api/getInstructions',{"patient_id":patient,"ward_id":ward_id}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });
					  
            $http.get('/api/getPatientInfo/'+patient).then(function(data) {
            $scope.quick_registration=data.data;
			
						
             var object = angular.extend({}, $scope.quick_registration, patapata);        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/bedAllocation.html',
				  size: 'lg',
				  animation: true,
				  controller: 'nursingCareModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			
            });
			
			  }	



			  $scope.assignToTheatre= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.get('/api/getFullAdmitedPatientInfo/'+admission_id).then(function(data) {
            $scope.admissions=data.data;
			    console.log(data.data);
				console.log(admission_id);		
             var object = $scope.admissions;        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/postPatientsToTheatre.html',
				  size: 'lg',
				  animation: true,
				  controller: 'postPatientsToTheatreModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
					
			
            });
			
			  }
			  
			 	 
			  
		
				

    }

})();

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('nursingCareModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.patientPaticulars=object;
			      $scope.doctorPaticulars=object[0];

				 var ward_id = $scope.patientPaticulars[0].ward_id;
				  
				  $http.get('/api/getBedsWithNoPatients/'+ward_id).then(function(data) {
                 $scope.beds_availables=data.data;
			     console.log($scope.beds_availables);
			          }); 
			     
				//$scope.quick_registration=quick_registration;
				//console.log($scope.quick_registration);
				//$scope.patientData=$scope.quick_registration;
				//console.log($rootScope.currentUser);
				/**
				var last_visit={'patient_id':$scope.quick_registration.id,'facility_id':$scope.quick_registration.facility_id};
				
				$http.post('/api/printLastVisit',last_visit).then(function(data) {
						  $scope.patient_last_visit=data.data;
	
                      //registration_title
				  console.log($scope.patient_last_visit);
					  });
				
				**/
				
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('nursingCareController',nursingCareController);

    function nursingCareController($http, $auth, $rootScope,$state,$location,$scope,$uibModal) {
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
				  
				  
				   var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];				   
				   
				   
				   		   
		    $scope.showSearchMarital= function (searchKey) {
				
            $http.get('/api/getMaritalStatus/'+searchKey).then(function(data) {
            maritals=data.data;
			
            });
			console.log(maritals);
			return maritals;
        }
		
				

    }

})();

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('patientDischargedModal',

                ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.patientPaticulars=object;

            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;


            $scope.today = function() {
    $scope.dt = new Date();
  };
  $scope.today();

  $scope.clear = function() {
    $scope.dt = null;
  };

  $scope.options = {
    customClass: getDayClass,
    minDate: new Date(),
    showWeeks: true
  };

  // Disable weekend selection
  function disabled(data) {
    var date = data.date,
      mode = data.mode;
    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
  }

  $scope.toggleMin = function() {
    $scope.options.minDate = $scope.options.minDate ? null : new Date();
  };

  $scope.toggleMin();

  $scope.setDate = function(year, month, day) {
    $scope.dt = new Date(year, month, day);
  };

  var tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date(tomorrow);
  afterTomorrow.setDate(tomorrow.getDate() + 1);
  $scope.events = [
    {
      date: tomorrow,
      status: 'full'
    },
    {
      date: afterTomorrow,
      status: 'partially'
    }
  ];

  function getDayClass(data) {
    var date = data.date,
      mode = data.mode;
    if (mode === 'day') {
      var dayToCheck = new Date(date).setHours(0,0,0,0);

      for (var i = 0; i < $scope.events.length; i++) {
        var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }

    return '';
  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
			      var admission_id=$scope.patientPaticulars.admission_id;
				   
				  
				  $http.get('/api/getFullAdmitedPatientInfo/'+admission_id).then(function(data) {
                 $scope.admissions=data.data;
			     console.log($scope.admissions);
			          });


            $scope.getDischargedPatients = function(){
                $http.get('/api/getDischargedLists/'+facility_id).then(function(data) {
                    $scope.dischargedPatients=data.data;
                });
            }
			   
				
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}   


			$scope.addDischarge=function (discharge,admission_id,dt) {
                 				
				  if (angular.isDefined(discharge)==false) {
                   return sweetAlert("Provide Discharge Notes", "", "error");
                  }	
				  else if (angular.isDefined(admission_id)==false) {
                   return sweetAlert("Please Select Patient", "", "error");
                  }					  			 			  
				  	  
				  else{
                  var dateSelected = $filter('date')(dt,'yyyy-MM-dd');
                  var today = $filter('date')(new Date(),'yyyy-MM-dd');				  
				  var user_id=$rootScope.currentUser.id;		
				  var dischargeNotes={'permission_date':today,'nurse_id':user_id,
				  'confirm':1,'admission_id':admission_id,'domestic_dosage':discharge,'followup_date':dateSelected};
				 
				 $http.post('/api/addDischargeNotes',dischargeNotes).then(function(data) {
						  $scope.dischargeNotes=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
                      $scope.getDischargedPatients();
					sweetAlert(data.data.data, "", "success");  
					   					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('physicalExaminations',

                ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.admissions=object;
				  console.log($scope.admissions);
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
				  
				  $scope.saveResipratorySystem= function (system,selectedPatient) {
			 if(angular.isDefined(system)==false){
					  
					  return sweetAlert("Please Enter value at least one field", "", "error");
				  }
			else{
				console.log(selectedPatient);
			var information_category='RESPIRATORY HISTORY';
			var resipratorySystem={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"inspection":system.	inspection,"palpation":system.palpation,"auscultation":system.auscultation,"percussion":system.percussion,"other_information":information_category,"nurse_id":user_id};
			
			console.log(resipratorySystem);
			
			$http.post('/api/saveResipratorySystem',resipratorySystem).then(function(data) {
            if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $uibModalInstance.dismiss();
					    sweetAlert(data.data.data, "", "success");		 				
				  }	
		   
            });
		}
			
        }		


		$scope.addDentalInfo= function (system,selectedPatient) {
			 if(angular.isDefined(system)==false){					  
					  return sweetAlert("Please Enter value at least one field", "", "error");
				  }
			else{				
			var information_category='DENTAL STATUS';
			var resipratorySystem={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"inspection":system.	inspection,"palpation":system.palpation,"auscultation":system.auscultation,"percussion":system.percussion,"other_information":information_category,"nurse_id":user_id};
			
			console.log(resipratorySystem);
			
			$http.post('/api/saveResipratorySystem',resipratorySystem).then(function(data) {
            if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $uibModalInstance.dismiss();
					    sweetAlert(data.data.data, "", "success");		 				
				  }	
		   
            });
		}
			
        }
		//saveTeethStatus
		$scope.addDentalInfo= function (dental,selectedPatient) {
			 if(angular.isDefined(dental)==false){					  
					  return sweetAlert("Please Select Dental Status", "", "error");
				  }
			else{				
			var information_category='DENTAL STATUS';
			var css_class='';
			if(dental.dental_status==2){
				var css_class='numberCircle';
			}else if(dental.dental_status==1){
			var css_class='missedDental';				
			}
			else if(dental.dental_status==3){
			var css_class='decayedDental';	
				
			}
			
			console.log(selectedPatient.tooth_id);
var teeth_status={"erasor":0,"admission_id":selectedPatient.admission_id,
"request_id":selectedPatient.id,"dental_id":selectedPatient.tooth_id,"dental_status":dental.dental_status,
"css_class":css_class,"other_information":information_category,"nurse_id":user_id};
					
			$http.post('/api/saveTeethStatus',teeth_status).then(function(data) {
            if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $uibModalInstance.dismiss();
					    sweetAlert(data.data.data, "", "success");		 				
				  }	
		   
            });
		}
			
        }

			$scope.saveCardivascularSystem= function (system,selectedPatient) {
			 if(angular.isDefined(system)==false){
					  
					  return sweetAlert("Please Enter value at least one field", "", "error");
				  }
			else{
				console.log(selectedPatient);
			var information_category='CARDIVASCULAR SYSTEM';
			var resipratorySystem={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"inspection":system.	inspection,"palpation":system.palpation,"auscultation":system.auscultation,"percussion":system.percussion,"other_information":information_category,"nurse_id":user_id};
			
			console.log(resipratorySystem);
			
			$http.post('/api/saveResipratorySystem',resipratorySystem).then(function(data) {
            if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $uibModalInstance.dismiss();
					    sweetAlert(data.data.data, "", "success");		 				
				  }	
		   
            });
		}
			
        }
	
	$scope.saveGastroIntestineExaminations= function (system,selectedPatient) {
			 if(angular.isDefined(system)==false){
					  
					  return sweetAlert("Please Enter value at least one field", "", "error");
				  }
			else{
				console.log(selectedPatient);
			var information_category='Gastro Intestine';
			var resipratorySystem={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"inspection":system.	inspection,"palpation":system.palpation,"auscultation":system.auscultation,"percussion":system.percussion,"other_information":information_category,"nurse_id":user_id};
			
			console.log(resipratorySystem);
			
			$http.post('/api/saveResipratorySystem',resipratorySystem).then(function(data) {
            if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $uibModalInstance.dismiss();
					    sweetAlert(data.data.data, "", "success");		 				
				  }	
		   
            });
		}
			
        }
		
		$scope.saveCentralNervousSystemExaminations= function (system,selectedPatient) {
			 if(angular.isDefined(system)==false){
					  
					  return sweetAlert("Please Enter value at least one field", "", "error");
				  }
			else{
				console.log(selectedPatient);
			var information_category='CENTRAL NERVOUS SYSTEM';
			var resipratorySystem={"erasor":0,"admission_id":selectedPatient.admission_id,"request_id":selectedPatient.id,"inspection":system.	inspection,"palpation":system.palpation,"auscultation":system.auscultation,"percussion":system.percussion,"other_information":information_category,"nurse_id":user_id};
			
			console.log(resipratorySystem);
			
			$http.post('/api/saveResipratorySystem',resipratorySystem).then(function(data) {
            if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $uibModalInstance.dismiss();
					    sweetAlert(data.data.data, "", "success");		 				
				  }	
		   
            });
		}
			
        }
				  
				   $scope.today = function() {
    $scope.dt = new Date();
  };
  $scope.today();

  $scope.clear = function() {
    $scope.dt = null;
  };

  $scope.options = {
    customClass: getDayClass,
    minDate: new Date(),
    showWeeks: true
  };

  // Disable weekend selection
  function disabled(data) {
    var date = data.date,
      mode = data.mode;
    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
  }

  $scope.toggleMin = function() {
    $scope.options.minDate = $scope.options.minDate ? null : new Date();
  };

  $scope.toggleMin();

  $scope.setDate = function(year, month, day) {
    $scope.dt = new Date(year, month, day);
  };

  var tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date(tomorrow);
  afterTomorrow.setDate(tomorrow.getDate() + 1);
  $scope.events = [
    {
      date: tomorrow,
      status: 'full'
    },
    {
      date: afterTomorrow,
      status: 'partially'
    }
  ];

  function getDayClass(data) {
    var date = data.date,
      mode = data.mode;
    if (mode === 'day') {
      var dayToCheck = new Date(date).setHours(0,0,0,0);

      for (var i = 0; i < $scope.events.length; i++) {
        var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }

    return '';
  }
				  
				  
				  
				  
				  
				  
				  
				  
				  
			     
			   
				
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}   


			$scope.addDischarge=function (discharge,admission_id,dt) {
                 				
				  if (angular.isDefined(discharge)==false) {
                   return sweetAlert("Provide Discharge Notes", "", "error");
                  }	
				  else if (angular.isDefined(admission_id)==false) {
                   return sweetAlert("Please Select Patient", "", "error");
                  }					  			 			  
				  	  
				  else{
                  var dateSelected = $filter('date')(dt,'yyyy-MM-dd');
                  var today = $filter('date')(new Date(),'yyyy-MM-dd');				  
				  var user_id=$rootScope.currentUser.id;		
				  var dischargeNotes={'permission_date':today,'nurse_id':user_id,
				  'confirm':1,'admission_id':admission_id,'domestic_dosage':discharge,'followup_date':dateSelected};
				 
				 $http.post('/api/addDischargeNotes',dischargeNotes).then(function(data) {
						  $scope.dischargeNotes=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					sweetAlert(data.data.data, "", "success");  
					   					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('postPatientsToTheatreModal',

                ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.admissions=object;
				 
				   $scope.today = function() {
    $scope.dt = new Date();
  };
  $scope.today();

  $scope.clear = function() {
    $scope.dt = null;
  };

  $scope.options = {
    customClass: getDayClass,
    minDate: new Date(),
    showWeeks: true
  };

  // Disable weekend selection
  function disabled(data) {
    var date = data.date,
      mode = data.mode;
    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
  }

  $scope.toggleMin = function() {
    $scope.options.minDate = $scope.options.minDate ? null : new Date();
  };

  $scope.toggleMin();

  $scope.setDate = function(year, month, day) {
    $scope.dt = new Date(year, month, day);
  };

  var tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  var afterTomorrow = new Date(tomorrow);
  afterTomorrow.setDate(tomorrow.getDate() + 1);
  $scope.events = [
    {
      date: tomorrow,
      status: 'full'
    },
    {
      date: afterTomorrow,
      status: 'partially'
    }
  ];

  function getDayClass(data) {
    var date = data.date,
      mode = data.mode;
    if (mode === 'day') {
      var dayToCheck = new Date(date).setHours(0,0,0,0);

      for (var i = 0; i < $scope.events.length; i++) {
        var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

        if (dayToCheck === currentDay) {
          return $scope.events[i].status;
        }
      }
    }

    return '';
  }
				    
		$scope.enterTheatre=function (theatre_notes,admission_id,dt) {
                 				
				  if (angular.isDefined(theatre_notes)==false) {
                   return sweetAlert("Provide Doctor Prescriptions", "", "error");
                  }	
				  else if (angular.isDefined(admission_id)==false) {
                   return sweetAlert("Please Select Patient", "", "error");
                  }					  			 			  
				  	  
				  else{
                  var dateSelected = $filter('date')(dt,'yyyy-MM-dd');
                  var today = $filter('date')(new Date(),'yyyy-MM-dd');				  
				  var user_id=$rootScope.currentUser.id;		
				  var theatre_notes_given={'received':0,'posted_date':today,'nurse_id':user_id,
				  'confirm':1,'admission_id':admission_id,'prescriptions':theatre_notes,'operation_date':dateSelected};
				 
				 $http.post('/api/enterTheatre',theatre_notes_given).then(function(data) {
						  
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					sweetAlert(data.data.data, "", "success");  
					   					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('wardManagementModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
			      $scope.wards=object;
				  var ward_id=object[0].ward_id;
				  var beds_list=[];
				  $http.get('/api/getBeds/'+ward_id).then(function(data) {
						 $scope.beds=data.data;
						 console.log($scope.beds);
				  });

				  				  			
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}
			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

/**
 * Created by Mazigo Jr on 2017-02-23.
 */
(function () {
    'use strict';
    angular
        .module('authApp')
        .controller('paymentsController',paymentsController);
    function paymentsController($scope,$state,$http,$rootScope,$uibModal) {

        var facility_id = $rootScope.currentUser.facility_id;
        var user_id=$rootScope.currentUser.id;
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });
        //Patients to PoS
        var resdata =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/patientsToPoS',{"search":searchKey,"facility_id":facility_id}).then(function(data) {
                resdata = data.data;
            });
            return resdata;
        }
        var PoSata =[];
        $scope.searchItems = function(searchKey,patient) {
            var category_id =patient.patient_category_id;
            if (category_id == null) {
                swal("Please search patient first!", "", "error"); return;
            }
            if(patient.main_category_id == 3){
                category_id = 1;
            }
            $http.post('/api/itemsToPoS',{"search":searchKey,"patient_category_id":category_id,"facility_id":facility_id}).then(function(data) {
                PoSata = data.data;
            });
            return PoSata;
        }
        $scope.reloadBills = function () {
            $http.get('/api/getBills/'+facility_id ).then(function(data) {
                $scope.billsData=data.data;
            });
        }
        //get patients' bills
        $http.get('/api/getBills/'+facility_id ).then(function(data) {
           $scope.billsData=data.data;
          });

        $scope.getBill = function (item) {
            $http.get('/api/getPatientBill/'+item.patient_id).then(function(data) {
                $scope.patientBills=data.data;
            });
        }
        var patientData=[];
        $scope.getBillModal = function (item) {
            if (angular.isDefined(item.patient_id)==false) {
                return sweetAlert("Please Click on the Patient you want to charge!", "", "error");
            }
            $http.post('/api/getPatientBill',{"patient_id":item.patient_id,"receipt_number":item.receipt_number}).then(function(data) {
        patientData=data.data;
                    var object = patientData;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/payments/billsModal.html',
                        size: 'lg',
                        animation: true,
                        controller: 'receiptsController',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });
            });


        }

        $scope.itemData = [];
        var balance = [];
        $scope.addItem = function(item,x,quantity){
            //console.log(item)
            var payment_status = 2;
            var payment_filter = '';
            var main_category = item.main_category_id;
            if(item == null || x==null || quantity ==null){
                swal("Please search Patient and Item the click 'Add' Button"); return;
            }
            for(var i=0;i<$scope.itemData.length;i++)
                if($scope.itemData[i].item_id == x.item_id){
                    swal(x.item_name+" already in your order list!","","info");
                    $("#item").val('');
                    $("#qty").val('');
                    return;}
            var sub_total = x.price * quantity;
            if(item.main_category_id == 3 && x.exemption_status == 0){
                sub_total = 0;
            }
            if(item.main_category_id == 3 && x.exemption_status == 1){
                sub_total=sub_total;
            }
            if(item.main_category_id != 1  && x.exemption_status == 0){
                payment_status = 1;
                payment_filter = item.patient_category_id;
            }
            if(item.main_category_id != 1  && x.exemption_status == 1){
                payment_status = 2;
                payment_filter = '';
            }
            if(item.main_category_id == 3){
                main_category = 1;
            }
            if(x.dept_id == 4){
            $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":x.item_id,"facility_id":facility_id}).then(function (data) {
                    balance = data.data;
                //console.log(balance)
                if(balance.length<1){
                    swal(x.item_name +' is not available in store.','Contact store manager','info');
                    return;
                }
                else if(balance.length >0 && balance[0].balance>=quantity){
                    $scope.itemData.push({"dept_id":x.dept_id,"item_id":x.item_id,"item_name":x.item_name,"sub_total":sub_total,"receipt_number":"","item_type_id":x.item_type_id,"quantity":quantity,"price":x.price,"item_price_id":x.price_id,
                        "user_id":user_id,"patient_id":item.patient_id,"medical_record_number":item.medical_record_number,"account_number":item.account_number,"account_number_id":item.account_id,"first_name":item.first_name,"middle_name":item.middle_name,"last_name":item.last_name,
                        "status_id":payment_status,"payment_filter":payment_filter,"facility_id":facility_id,"discount":0,"discount_by":user_id});
                    $scope.toto = $scope.getTotal();
                    return;
                }
                else if(quantity>balance[0].balance){
                    swal('Quantity for '+ x.item_name +' is not sufficient in store.','There are only '+ balance[0].balance+' items remained in store','info');
                    return;
                }

            });
            }
            else {
                $scope.itemData.push({"dept_id":x.dept_id,"item_id":x.item_id,"item_name":x.item_name,"sub_total":sub_total,"receipt_number":"","item_type_id":x.item_type_id,"quantity":quantity,"price":x.price,"item_price_id":x.price_id,
                    "user_id":user_id,"patient_id":item.patient_id,"medical_record_number":item.medical_record_number,"account_number":item.account_number,"account_number_id":item.account_id,"first_name":item.first_name,"middle_name":item.middle_name,"last_name":item.last_name,
                    "status_id":payment_status,"payment_filter":payment_filter,"facility_id":facility_id,"discount":0,"discount_by":user_id});
                $scope.toto = $scope.getTotal();
            }

            $("#item").val('');
            $("#qty").val('');
        }
        $scope.removeItem = function(item){

            var indexofItem = $scope.itemData.indexOf(item);
            $scope.itemData.splice(indexofItem,1);
            $scope.toto = $scope.getTotal();

        }

        $scope.getTotal = function () {
            var  total = 0;
            for(var i = 0; i < $scope.itemData.length ; i++) {
                total += ($scope.itemData[i].sub_total);
                      }
            return total;
        }
    $scope.processSales = function () {
        var x= $scope.getTotal();
        swal({
            title: 'Are you sure you want to complete this transaction with a sum of '+x+' Tshs? .Process cannot be undone',

            text: "",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!  ',
            cancelButtonText: 'No, cancel!',
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            buttonsStyling: false
        }).then(function () {
            var receiptNumber="";
                $http.post('/api/saveFromPoS',$scope.itemData).then(function (data) {
                    receiptNumber=data.data;
                    for(var i=0;i<$scope.itemData.length;i++){
                        $scope.itemData[i]["receipt_number"] = receiptNumber;
                    }
                    var object = $scope.itemData;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/payments/posReceipts.html',
                        size: 'lg',
                        animation: true,
                        controller: 'posReceipts',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }

                    });
                    $scope.itemData = [];
                    $scope.toto = $scope.getTotal();
                });
        }, function (dismiss) {
            if (dismiss === 'cancel') {
                swal('Transaction cancelled','Carefully prepare another transaction','info');
            }
        })

           }
    }
})();

/**
 * Created by Mazigo Jr on 2017-03-27.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('posReceipts',['$scope','$http','$rootScope','$uibModal' ,'$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal, $uibModalInstance, object) {
            $scope.date = new Date();
            $scope.bill = object;
            var facility_id = $rootScope.currentUser.facility_id;
            var user_id=$rootScope.currentUser.id;
            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
            });
            $scope.getTotal = function () {
                var  total = 0;
                for(var i = 0; i < object.length ; i++) {
                    total += (object[i].sub_total);
                }
                return total;
            }
           $scope.printInvoice= function ()
            {
                var DocumentContainer = document.getElementById('contentToPrint');
                var WindowObject = window.open("", "PrintWindow",
                    "width=750,height=650,top=50,left=50,toolbars=no,scrollbars=yes,status=no,resizable=yes");
                WindowObject.document.title = "Print Receipt: GoT-HOMIS";
                WindowObject.document.writeln(DocumentContainer.innerHTML);
                WindowObject.document.close();

                setTimeout(function(){
                    WindowObject.focus();
                    WindowObject.print();
                    WindowObject.close();
                },2000);

            }
        }]);
}());

/**
 * Created by Mazigo Jr on 2017-03-25.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('printReceipt',['$scope','$state','$http','$rootScope','$uibModal' ,'$uibModalInstance', 'object',
            function ($scope,$state,$http,$rootScope,$uibModal, $uibModalInstance, object) {
                $scope.date = new Date();
                var user_id = $rootScope.currentUser.id;
                var facility_id = $rootScope.currentUser.facility_id;
                $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                    $scope.menu=data.data;
                });
            $scope.bill = object;
                $scope.getTotal = function () {
                    var  total = 0;
                    for(var i = 0; i < $scope.bill.length ; i++) {
                        total += ($scope.bill[i].quantity * $scope.bill[i].price - $scope.bill[i].discount);
                    }
                    return total;
                }
              $scope.printInvoice = function printInvoice()
                {
                    var DocumentContainer = document.getElementById('contentToPrint');
                    var WindowObject = window.open("", "PrintWindow",
                        "width=750,height=650,top=50,left=50,toolbars=no,scrollbars=yes,status=no,resizable=yes");
                    WindowObject.document.title = "Print Receipt: GoT-HOMIS";
                    WindowObject.document.writeln(DocumentContainer.innerHTML);
                    WindowObject.document.close();

                    setTimeout(function(){
                        WindowObject.focus();
                        WindowObject.print();
                        WindowObject.close();
                    },2000);

                   $state.reload();

                }



            }]);
}());

/**
 * Created by Mazigo Jr on 2017-02-23.
 */
(function () {
    'use strict';
   var app= angular.module('authApp');
    app.controller('receiptsController',['$scope','$http','$rootScope','$uibModal','$uibModalInstance','object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            var user_id=$rootScope.currentUser.id;
            $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
                $scope.menu=data.data;
            });
            $scope.patientBills=object;

            $scope.toto = function () {
                var  total = 0;
                for(var i = 0; i < $scope.patientBills.length ; i++) {
                    total += ($scope.patientBills[i].quantity * $scope.patientBills[i].price - $scope.patientBills[i].discount);
                }
                return total;
            }
            var facility_id = $rootScope.currentUser.facility_id;
            $scope.proccessBill = function (bill) {
               if(bill == null){
                    swal("Please choose Patient and payment method to continue!"); return;
                 }
                $http.post('/api/updateBills',{"user_id":user_id,"invoice_id":bill[0].receipt_number}).then(function (data) {
               });
                $http.get('/api/getBills/'+facility_id ).then(function(data) {
                    $scope.billsData=data.data;
                });
                var object = bill;
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/payments/receipts.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printReceipt',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });

                $uibModalInstance.dismiss();
            }
        }

        ]);



})();

/**
 * Created by Mazigo Jr on 2017-02-28.
 */
(function () {
    'use strict';
    angular
        .module('authApp')
        .controller('reportsController',reportsController);
    function reportsController($http,$scope,$rootScope,$uibModal) {
        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });
        $scope.getDepartmental = function (item) {
            $http.post('/api/getDepartmentalReports',{"start":item.start,"end":item.end,"facility_id":facility_id}).then(function (data) {
                $scope.departments = data.data;
                $scope.depGrandTotal = $scope.depTotal();
            });
        }
        $scope.sum = function () {
            var  total = 0;
            for(var i = 0; i < $scope.detailedData.length ; i++) {
                total += ($scope.detailedData[i].sub_total);
            }
            return total;
        }
        $scope.depTotal = function () {
            var  total = 0;
            for(var i = 0; i < $scope.departments.length ; i++) {
                total += ($scope.departments[i].total);
            }
            return total;
        }
        $scope.cashierTtl = function () {
            var  total = 0;
            for(var i = 0; i < $scope.cashiers.length ; i++) {
                total += ($scope.cashiers[i].sub_total);
            }
            return total;
        }
        $scope.getDate = function (item) {
            $http.post('/api/getDetailedReports',{"start":item.start,"end":item.end,"facility_id":facility_id}).then(function (data) {
                $scope.detailedData = data.data;
                $scope.selIdx= -1;
                $scope.detailedTotal = $scope.sum();
                $scope.selData=function(d,idx){
                    $scope.selectedData=d;
                    $scope.selIdx=idx;
                }
                $scope.isSelData=function(d){
                    return $scope.selectedData===d;
                }
            });
        }
        $scope.getDetailedData=function (item,dates) {
         $http.post('/api/detailedData',{"receipt_number":item.receipt_number,"start":dates.start,"end":dates.end}).then(function (data) {
            $scope.getDetailedReports= data.data;
         });
        }
        $scope.getCashiers = function (item) {
            $http.post('/api/getCashierReports',{"start":item.start,"end":item.end,"facility_id":facility_id}).then(function (data) {
                $scope.cashiers = data.data;
                $scope.depGrandTotal = $scope.cashierTtl();
            });
        }
        var reprint = [];
        $scope.getReceipt = function (item,dates) {
            $http.post('/api/detailedData',{"receipt_number":item.receipt_number,"start":dates.start,"end":dates.end}).then(function (data) {
                $scope.getDetailedReports= data.data;
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/payments/receipts.html',
                    size: 'lg',
                    animation: true,
                    controller: 'printReceipt',
                    resolve:{
                        object: function () {

                            return $scope.getDetailedReports;
                        }
                    }
                });
            });

        }
    }
})();

/**
 * Created by Mazigo Jr on 2017-04-10.
 */
(function () {
    'use strict';
    angular
        .module('authApp')
        .controller('referralController',referralController);
    function referralController($scope,$rootScope,$state,$http,$uibModal) {
        var facility_id=$rootScope.currentUser.facility_id;
        var user_id=$rootScope.currentUser.id;
        $http.post('/api/incomingReferrals',{"facility_id":facility_id}).then(function (data) {
           $scope.referrals = data.data;
            $scope.oneAtATime=true;
        });
        $scope.getReferrals = function (item) {
            $http.post('/api/getReferrals',{"sender_facility_id":item.sender_facility_id}).then(function (data) {
               $scope.patients= data.data;
            });
        }
        $scope.acceptReferral = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/referral/referralModal.html',
                size: 'lg',
                animation: true,
                controller: 'referralModal',
                resolve: {
                    object: function () {
                        return object;
                    }
                }
            });
            $http.post('/api/updateReferals',{"patient_id":item.patient_id}).then(function (data) {

            });
            $state.reload();
        }
    }
})();

/**
 * Created by Mazigo Jr on 2017-04-10.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('referralModal',['$scope','$http','$rootScope','$uibModal' ,'$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal, $uibModalInstance, object) {
            var facility_id = $rootScope.currentUser.facility_id;
            $scope.patientDetails = object;
            var patientCategory =[];
            $scope.searchPatientCategory = function(searchKey) {
                $http.get('/api/searchPatientCategory/'+searchKey).then(function(data) {
                    patientCategory = data.data;
                });
                return patientCategory;
            }
            $scope.getPricedItems=function (patient_category_selected) {
                console.log(patient_category_selected);
                $http.get('/api/getPricedItems/'+patient_category_selected).then(function(data) {
                    $scope.services=data.data;
                });

            }

            $scope.enterEncounter=function (encounter,patient) {


                if (angular.isDefined(encounter)==false) {
                    return sweetAlert("Please Type the Payment Category", "", "error");
                }
                else if (angular.isDefined(encounter.payment_category)==false) {
                    return sweetAlert("Please Type the Payment Category", "", "error");
                }
                else if (angular.isDefined(encounter.payment_services)==false) {
                    return sweetAlert("Please Select Service", "", "error");
                }
                else{

                    console.log(encounter);
                    console.log(patient);
                    var patient_category=encounter.payment_category.patient_category;
                    var service_category=encounter.payment_services;
                    var service_id=encounter.payment_services.service_id;
                    var price_id=encounter.payment_services.price_id;
                    var item_type_id=encounter.payment_services.item_type_id;
                    var patient_id=patient.patient_id;
                    var user_id=$rootScope.currentUser.id;

                    var bill_category_id=encounter.payment_category.patient_category_id;
                    var main_category_id=encounter.payment_category.patient_main_category_id;

                    var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                        'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};

                    $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
                        $scope.registrationReport=data.data;

                        if(data.data.status ==0){

                            sweetAlert(data.data.data, "", "error");
                        }else{

                            $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
                                $scope.patientsInfo=data.data;
                            });

                            var modalInstance = $uibModal.open({
                                templateUrl: '/views/modules/registration/printCard.html',
                                size: 'lg',
                                animation: true,
                                controller: 'printCard',
                                resolve:{
                                    patientData: function () {
                                     return $scope.patientDetails;
                                    }
                                }
                            });
                        }
                    });
                }
            }

        }]);

})();

(function () {

    'use strict';

    var app = angular
		.module('authApp')

    app.controller('completeRegistrationModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'selectedPatient',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,selectedPatient) {
            	        $scope.selectedPatient=selectedPatient;

            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;


            $scope.cancel=function (){
                console.log('done and cleared');
                $uibModalInstance.dismiss();

            }

            $scope.completeRegistration=function (patient,others) {
                console.log(patient);
                var first_name=patient.first_name;
                var middle_name=patient.middle_name;
                var last_name=patient.last_name;
                var gender=patient.gender;
                var dob=patient.dob;
                var mobile_number=patient.mobile_number;
                var patient_id=patient.id;
                var residence_id=patient.residence_id;


                if (angular.isDefined(others.occupation)==false) {
                    return sweetAlert("Please Enter Occupations and choose from the suggestions", "", "error");
                }

                else if (angular.isDefined(others.tribe)==false) {
                    return sweetAlert("Please Enter Tribe and choose from the suggestions", "", "error");
                }
                else if (angular.isDefined(others.country)==false) {
                    return sweetAlert("Please Enter Country and choose from the suggestions", "", "error");
                }
                else if (angular.isDefined(others.next_kin_residence)==false) {
                    return sweetAlert("Please Enter Next of kin Residences and choose from the suggestions", "", "error");
                }
                else if (angular.isDefined(others.relationship)==false) {
                    return sweetAlert("Please Enter Relationships and choose from the suggestions", "", "error");
                }
                var marital_status=others.marital.id;
                var occupation=others.occupation.id;
                var tribe=others.tribe.id;
                var country=others.country.id;
                var next_of_kin_name=others.next_of_kin_name;
                var next_of_kin_resedence_id=others.next_kin_residence.residence_id;
                var relationship=others.relationship.relationship;
                var mobile_number_next_kin=others.mobile_number_next_kin;
                var complete_registration={"residence_id":residence_id,"patient_id":patient_id,"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"facility_id":facility_id,"user_id":user_id,"marital_status":marital_status,"occupation_id":occupation,"tribe":tribe,"country_id":country,"next_of_kin_name":next_of_kin_name,"next_of_kin_resedence_id":next_of_kin_resedence_id,"relationship":relationship,"mobile_number_next_kin":mobile_number_next_kin}



                $http.post('/api/complete_registration',complete_registration).then(function(data) {
                    if(data.data.status ==0){
                        sweetAlert(data.data.data, "", "error");
                    }else{
                        console.log(data.data[2]);
                        var patientData = data.data[0][0];
                        var accounts_number = data.data[1][0];
                        var residences = data.data[2][0];
                        var getLastVisit= data.data[3];
                        var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                        $scope.cancel();
                        $scope.patient = null;
                        $scope.others = null;
                        var modalInstance = $uibModal.open({
                            templateUrl: '/views/modules/registration/encounterModal.html',
                            size: 'lg',
                            animation: true,
                            controller: 'registrationModal',
                            resolve:{
                                object: function () {
                                    return object;
                                }
                            }
                        });

                    }
                });



            }



			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
		.module('authApp').directive('ngFiles', ['$parse', function ($parse) {

			function fn_link(scope, element, attrs) {
				var onChange = $parse(attrs.ngFiles);
				element.on('change', function (event) {
					onChange(scope, { $files: event.target.files });
				});
			};

			return {
				link: fn_link
			}
		} ])
        .controller('formController', formController);

    function formController($http, $auth, $rootScope,$state,$location,$scope,$uibModal) {


        // we will store all of our form data in this object
        $scope.formData = {};

        // function to process the form
        $scope.processForm = function() {
            alert('awesome!');
        };



        var formdata = new FormData();

		$scope.getTheFiles = function ($files) {

			angular.forEach($files, function (value, key) {
				formdata.append(key, value);

			});

		};
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;

        $scope.verification = function (item) {
            $scope.dataLoading = true;
            $http.get('https://verification.nhif.or.tz/NHIFService/breeze/Verification/GetCard?CardNo='+item).then(function (data) {
                 if(data.data.StatusDescription=='Active'){

                    $scope.patient.date_of_birth=data.data.DateOfBirth.substr(0,data.data.DateOfBirth.indexOf('T'));
                    $scope.nhif_patient = {"first_name":data.data.FirstName,
                        "middle_name":data.data.MiddleName,
                        "last_name":data.data.LastName,"gender":data.data.Gender,
                        "dob":$scope.patient.date_of_birth,
						"AuthorizationNo":data.data.AuthorizationNo
                    };

                     $scope.dataLoading = false;
                     $scope.quick_registration= $scope.nhif_patient;
                     var modalInstance = $uibModal.open({
                         templateUrl: '/views/modules/registration/insuarance.html',
                         size: 'lg',
                         animation: true,
                         controller: 'registrationModal',
                         resolve:{
                             quick_registration: function () {
                                 console.log($scope.quick_registration);
                                 return $scope.quick_registration ;
                             }
                         }


                     });


                }

                else if(data.data.StatusDescription=='Revoked'){
                     $scope.dataLoading = false;
                     swal("CARD NOT ACTIVE");
				 }
                else {
                     $scope.dataLoading = false;
                     return sweetAlert("CARD NUMBER "+item+" NOT FOUND IN NHIF DATABASE", "", "error");

                 }
            }).finally(function () {
                $scope.dataLoading = false;
                            });


        }


        var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];				   
				   var insuranceService=[];

				   
				   		   
		    $scope.showSearchMarital= function (searchKey) {
				
            $http.get('/api/getMaritalStatus/'+searchKey).then(function(data) {
            maritals=data.data;
			
            });
			console.log(maritals);
			return maritals;
        }

        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime = true;



        $scope.showNextForm=function (newTab) {
            $scope.tab = newTab;
            alert('next form');
        }
		
		$scope.showSearchTribe= function (searchKey) {
				
            $http.get('/api/getTribe/'+searchKey).then(function(data) {
            tribe=data.data;
			
            });
			return tribe;
        }
		
		$scope.showSearchOccupation= function (searchKey) {
				
            $http.get('/api/getOccupation/'+searchKey).then(function(data) {
            occupation=data.data;
			
            });
			return occupation;
        }
		
		$scope.getCountry= function (searchKey) {
				
            $http.get('/api/getCountry/'+searchKey).then(function(data) {
            country=data.data;
			
            });
			return country;
        }
		
		$scope.getRelationships= function (searchKey) {
				
            $http.get('/api/getRelationships/'+searchKey).then(function(data) {
            relationships=data.data;		
            });
			return relationships;
        }
        $http.get('/api/getInsurances').then(function(data) {
            $scope.insurances=data.data;


        });
				   
		    $scope.getPatients = function (searchKey) {
				console.log(searchKey);
            $http.get('/api/getSeachedPatients/'+searchKey).then(function(data) {
            patientsList=data.data;
			console.log($scope.patients);
          
            });
			return patientsList;
        }
				   
            $scope.showSearchNextResidences= function(searchKey) {

             $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                nextresdata= data.data;
             });
			 //console.log(resdata);
             return nextresdata;
             }
			 
			 $scope.showSearchResidences = function(searchKey) {

             $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                resdata = data.data;
             });
			 //console.log(resdata);
             return resdata;
             }
			 
			 $scope.patientService = function() {
				 var searchKey={'patient_category':$scope.encounter.payment_category.patient_category,'item_name':$scope.encounter};
console.log($scope.encounter);
             $http.post('/api/searchPatientServices',searchKey).then(function(data) {
               patientService = data.data;
            });
			 console.log(resdata);
             return patientService;
             }



        $scope.patientInsuaranceService = function(searchKey) {
            var searchKeyReceived={'patient_category':'NHIF','item_name':searchKey};
            console.log(searchKeyReceived);
            $http.post('/api/searchPatientServices',searchKeyReceived).then(function(data) {
                insuranceService = data.data;
            });
             return insuranceService;
        }
			
            $scope.searchPatientCategory = function(searchKey) {

             $http.get('/api/searchPatientCategory/'+searchKey).then(function(data) {
                patientCategory = data.data;
             });
			 //console.log(resdata);
             return patientCategory;
             }
				  			  
				  $scope.viewItem = function (quick_registration) {
					   $scope.quick_registration = quick_registration;
					  
				  console.log(quick_registration.first_name);
				  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterModal.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModal',
				  resolve:{
                  quick_registration: function () {
					  console.log($scope.quick_registration);
                  return $scope.quick_registration ;
                  }
                  }

				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
                }





					   $scope.postCorpseMortuary = function (quick_registration) {
					   $scope.quick_registration = quick_registration;
                      $http.get('/api/getMortuary').then(function(data) {
                          $scope.mortuaries=data.data;
                          console.log($scope.mortuaries);


                  var object =angular.extend($scope.quick_registration ,$scope.mortuaries);
                      console.log(object);

                  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterMortuary.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModalCorpse',
				  resolve:{
                      object: function () {
					  return object;
                  }
                  }


                  });
                      });

                }




				
				$scope.openDialogForServices = function (selectedPatient) {
					console.log(selectedPatient);
					   $scope.quick_registration =selectedPatient;
					   
				  
				  console.log($scope.quick_registration);
				  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterModal.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModal',
				  resolve:{
                  quick_registration: function () {
					  $scope.cardDetails=$scope.quick_registration;
					  console.log($scope.cardDetails);
                  return $scope.quick_registration ;
                  }
                  }

				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
                }
				  
		// Parse the resolve object
    function parseResolve(quick_registration) {
        if (typeof quick_registration === 'string') {
            return {
                quick_registration: function() {
                    return quick_registration;
                }
            }
        }
        else if (typeof quick_registration === 'object') {
            //var resolve = {};
            var resolve = $scope.quick_registration;
            angular.forEach(quick_registration, function(value, key) {
                resolve[key] = function() {
					//console.log(value);
                    return value;
                }
            })
			console.log(resolve);
            return resolve;
        }
    }		  
				  
				  
		
				  $scope.patient_quick_registration=function (patient) {
			      var first_name=patient.first_name;
			      var middle_name=patient.middle_name;
			      var last_name=patient.last_name;
			      var gender=patient.gender;
			      var dob=patient.dob;
			      var mobile_number=patient.mobile_number;
				  
				  
				  if (angular.isDefined(first_name)==false) {
                   return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
                  } 
				  
				  else if (angular.isDefined(middle_name)==false) {
                   return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
                  }
				  
				  else if (angular.isDefined(last_name)==false) {
                   return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
                  }
				  else if (angular.isDefined(patient.resedence_id)==false) {
                   return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
                   }
				  var patient_residences=patient.resedence_id.residence_id;
				  var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}
				  
				  
				 $http.post('/api/quick_registration',quick_registration).then(function(data) {
                 $scope.quick_registration=data.data;
				 //console.log(data.data);
				 if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{	  
					  $scope.patient = null;
					  quick_registration=$scope.quick_registration;
			          $scope.viewItem(quick_registration);
					 
							
				  }
				});
			   
	
			   
					}

  $scope.corpse_quick_registration=function (patient) {
			      var first_name=patient.first_name;
			      var middle_name=patient.middle_name;
			      var last_name=patient.last_name;
			      var gender=patient.gender;
			      var dob=patient.dob;
			      var mobile_number=patient.mobile_number;


				  if (angular.isDefined(first_name)==false) {
                   return sweetAlert("Please Enter FIRST NAME or UKNOWN before SAVING", "", "error");
                  }

				  else if (angular.isDefined(middle_name)==false) {
                   return sweetAlert("Please Enter MIDDLE NAME or UKNOWN before SAVING", "", "error");
                  }

				  else if (angular.isDefined(last_name)==false) {
                   return sweetAlert("Please Enter LAST NAME or UKNOWN before SAVING", "", "error");
                  }
				  else if (angular.isDefined(patient.resedence_id)==false) {
                   return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
                   }
				  var patient_residences=patient.resedence_id.residence_id;
				  var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


				 $http.post('/api/corpse_registration',quick_registration).then(function(data) {
                 $scope.corpse_registration=data.data;
				 //console.log(data.data);
				 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $scope.patient = null;
					  quick_registration=$scope.corpse_registration;
			          $scope.postCorpseMortuary(quick_registration);


				  }
				});



					}




        $scope.savePatientInsuarance=function (quick_registration,patient) {
            var first_name=quick_registration.first_name;
            var middle_name=quick_registration.middle_name;
            var last_name=quick_registration.last_name;
            var gender=quick_registration.gender;
            var dob=quick_registration.dob;
              if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }

            var mobile_number=patient.mobile_number;

            var patient_residences=patient.resedence_id.residence_id;
            var patientservices=patient.payment_services.service_id;
            var price_id=patient.payment_services.price_id;
            var item_type_id=patient.payment_services.item_type_id;
            var patient_main_category_id=patient.payment_services.patient_main_category_id;
            var patient_category=patient.payment_services.patient_category;
            var quick_registration={"item_type_id":item_type_id,"price_id":price_id,"patient_main_category_id":patient_main_category_id,"patient_category":patient_category,"patientservices":patientservices,"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}
            $http.post('/api/quick_registration',quick_registration).then(function(data) {
                $scope.registeredPatient=data.data;
               if(data.data.status ==0){
                    sweetAlert(data.data.data, "", "error");
                }else{
                    $scope.patient = null;
                    $scope.addEncounterInsuarance($scope.registeredPatient,quick_registration);
                    //sweetAlert('successfully registered '+first_name, "", "success");
                     }
            });
     }

        $scope.addEncounterInsuarance=function (registeredPatient,quick_registration) {

            $scope.patientsInfo=registeredPatient;
            var patient_id=registeredPatient.id;
            var patient_category=registeredPatient.patient_category;
            var item_type_id=quick_registration.item_type_id;
            var price_id=quick_registration.price_id;
            var facility_id=registeredPatient.facility_id;
            var user_id=$rootScope.currentUser.id;
            var payment_filter=quick_registration.patient_main_category_id;
            var service_category=quick_registration.item_name;
            var service_id=quick_registration.patientservices;
            var price_id=quick_registration.price_id;
            var bill_category_id=quick_registration.patient_main_category_id;
            var main_category_id=quick_registration.patient_main_category_id;
            var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};

            $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
                $scope.registrationReport=data.data;

                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{


                    console.log($scope.patientsInfo);
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/registration/printCardBima.html',
                        size: 'lg',
                        animation: true,
                        controller: 'printCardBima',
                        resolve:{
                            patientsInfo: function () {
                                //console.log($scope.quick_registration);
                                return $scope.patientsInfo;
                            }
                        }


                    });

                    //sweetAlert(data.data.data, "", "success");
                    //enterEncounter='';
                }


            });



        }


        $scope.fullRegistration=function (patient,others) {
			      var first_name=patient.first_name;
			      var middle_name=patient.middle_name;
			      var last_name=patient.last_name;
			      var gender=patient.gender;
			      var dob=patient.dob;
			      var mobile_number=patient.mobile_number;
			      
				  
				  
				  if (angular.isDefined(first_name)==false) {
                   return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
                  } 
				  
				  else if (angular.isDefined(middle_name)==false) {
                   return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
                  }
				  
				  else if (angular.isDefined(last_name)==false) {
                   return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
                  }
				  else if (angular.isDefined(patient.resedence_id)==false) {
                   return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
                   }
				   
				   else if (angular.isDefined(others.marital)==false) {
                   return sweetAlert("Please Enter Marital Status and choose from the suggestions", "", "error");
                   }
				   
				   else if (angular.isDefined(others.occupation)==false) {
                   return sweetAlert("Please Enter Occupations and choose from the suggestions", "", "error");
                   }
				   
				   else if (angular.isDefined(others.tribe)==false) {
                   return sweetAlert("Please Enter Tribe and choose from the suggestions", "", "error");
                   }				   
				   else if (angular.isDefined(others.country)==false) {
                   return sweetAlert("Please Enter Country and choose from the suggestions", "", "error");
                   }
				   else if (angular.isDefined(others.next_kin_residence)==false) {
                   return sweetAlert("Please Enter Next of kin Residences and choose from the suggestions", "", "error");
                   }
				   else if (angular.isDefined(others.relationship)==false) {
                   return sweetAlert("Please Enter Relationships and choose from the suggestions", "", "error");
                   }
				   			   
				  			   
				   console.log(others.next_kin_residence);
				  var patient_residences=patient.resedence_id.residence_id;
				  var marital_status=others.marital.id;
			      var occupation=others.occupation.id;
			      var tribe=others.tribe.id;
			      var country=others.country.id;
			      var next_of_kin_name=others.next_of_kin_name;
			      var next_of_kin_resedence_id=others.next_kin_residence.residence_id;
			      var relationship=others.relationship.relationship;
			      var mobile_number_next_kin=others.mobile_number_next_kin;				  
				  var full_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id,"marital_status":marital_status,"occupation_id":occupation,"tribe":tribe,"country_id":country,"next_of_kin_name":next_of_kin_name,"next_of_kin_resedence_id":next_of_kin_resedence_id,"relationship":relationship,"mobile_number_next_kin":mobile_number_next_kin}
				  
				
				  
				 $http.post('/api/full_registration',full_registration).then(function(data) {
                 $scope.full_registration=data.data;
                 //console.log(data.data);
				 if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
                    
                    				  
					  $scope.patient = null;
					  full_registration=$scope.full_registration;
			          $scope.viewItemFull(full_registration);
					 
							
				  }
				});
			   
	
			   
					}	
					
					  $scope.viewItemFull = function (full_registration) {
					   $scope.quick_registration =full_registration;
					   
					   var quick_registration=full_registration;
				  console.log(full_registration.first_name);
				  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterModal.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModal',
				  resolve:{
                  quick_registration: function () {
					  console.log($scope.quick_registration);
                  return $scope.quick_registration ;
                  }
                  }

				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
                }
					
					
					
			
			$scope.getPricedItems=function (patient_category_selected) {
			console.log(patient_category_selected);
				$http.get('/api/getPricedItems/'+patient_category_selected).then(function(data) {
			      $scope.services=data.data;
			});
					
			}


        $scope.getPricedMortuary=function () {
            $http.get('/api/getMortuary').then(function(data) {
                $scope.mortuaries=data.data;
                console.log($scope.mortuaries);
            });

        }

			
			
			
			//Patient Get Data From the database
			$scope.getpatient=function () {
				/**
            $http.get('/api/getpatient').then(function(data) {
                $scope.patients=data.data;
            });
			
						swal({
  title: 'Error!',
  html: $('<div>')
    .addClass('some-class')
    .text('SAVED'),
  animation: false,
  customClass: 'animated tada'
})
		*/	
			}
			
			
			
			$scope.cancelEncounte=function () {
				var sms='You have canceled service for '+data.data.first_name;
								
						swal({
  title: 'SERVICE CANCELED',
  html: $('<div>')
    .addClass('some-class')
    .text(''+sms+''),
  animation: false,
  customClass: 'animated tada'
});
				
			}
			
			$scope.openModal = function(quick_registration){
            $(".modal").modal("show");
			}
			
			
			
		
			//Patient Update
			$scope.updatepatient=function (patients) {
			var comit=confirm('Are you sure you want to Update '+patients.first_name);
			if(comit) {
			$http.post('/api/updatepatient', patients).then(function (data) {
			})
			$scope.getpatient();
			}
			else{
				return false;
			}
			}
			$scope.getpatient();
			
			
			/*Patient delete
			$scope.deletepatient=function (patients) {
			var comit=confirm('Are you sure you want to delete '+patients.first_name);
			if(comit){
			$http.get('/api/deletepatient/'+patients.id).then(function(data) {
			$scope.getpatient();
			})
			}
			else {
			return false;
			}
			}
			$scope.getpatient();
			*/
			
			//Patient Update Ame
			$scope.updatepatient=function (selectedpatient,residence,marital,occupation,
			tribe,country,gender) {
			var patient_info_toupdate = {
			"id":selectedpatient.id,
			"first_name":selectedpatient.first_name,
			"middle_name":selectedpatient.middle_name,
			"last_name":selectedpatient.last_name,
			"dob":selectedpatient.dob,
			"gender":gender.gender,
			"mobile_number":selectedpatient.mobile_number,
			"residence_id":residence.residence_id,
			"marital_id":marital.id,
			"occupation_id":occupation.id,
			"tribe_id":tribe.id,
			"country_id":country.id,
			"facility_id":$rootScope.currentUser.facility_id,
			}
			console.log(patient_info_toupdate);
			//console.log(patient_info_toupdate)
			$http.post('/api/updatepatient', patient_info_toupdate).then(function (data) {
			$scope.patientss=data;
			console.log(patientss);
			swal("You have Succesfully Update" +$scope.patientss);
			});
			}



	// exemptions======================================================


		$scope.exemption_type_list=function () {
			$http.get('/api/exemption_type_list').then(function(data) {
				$scope.exemption_types=data.data;


			});
		}

		$scope.exemption_type_list();

		$http.get('/api/getexemption_services/'+facility_id).then(function(data) {
			$scope.exemption_services=data.data;
		});


		$scope.exemption_registration=function (exempt,patientData) {

			console.log(patientData,exempt)
			var status_id = 2;
			var reason_for_revoke = "..";



			if(exempt==undefined){
				swal(
					'Feedback..',
					'FILL ALL FIELDS',
					'error'
				)

			}

			else if (exempt.exemption_type_id==undefined ){
				swal(
					'Feedback..',
					'Please Select Exemption Category ',
					'error'
				)
			}

			else if (exempt.exemption_reason==undefined){
				swal(
					'Feedback..',
					'Please Fill  Reason(s) for This exemption ',
					'error'
				)
			}
			else if (exempt.service==undefined){
				swal(
					'Feedback..',
					'Please Choose Service ',
					'error'
				)
			}



			else{
var patient=patientData.id;
				var patient_category=exempt.service.patient_category;
				var service_category=exempt.service;
				var service_id=exempt.service.service_id;
				var price_id=exempt.service.price_id;
				var item_type_id=exempt.service.item_type_id;
				var patient_id=patient;
				var facility_id=exempt.service.facility_id;
				var user_id=$rootScope.currentUser.id;
				var payment_filter=exempt.exemption_type_id;

				var bill_category_id=exempt.exemption_type_id;
				var main_category_id=3;

				var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
					'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};


				var status_id=2;

				var exemption_type_id= exempt.exemption_type_id;
				var exemption_reason= exempt.exemption_reason;
				var user_id= $rootScope.currentUser.id;
				var facility_id= $rootScope.currentUser.facility_id;
				var patient_id= patient;
				var status_id= status_id;
				var exemption_type_id=exempt.exemption_type_id;
				var exemption_reason= exempt.exemption_reason;
				var reason_for_revoke= reason_for_revoke;
				var description=exempt.description;

				formdata.append('exemption_type_id',exemption_type_id);
				formdata.append('exemption_reason',exemption_reason);
				formdata.append('user_id',user_id);
				formdata.append('facility_id',facility_id);
				formdata.append('patient_id',patient_id);
				formdata.append('reason_for_revoke',reason_for_revoke);
				formdata.append('status_id',status_id);
				var request = {
					method: 'POST',
					url: '/api/'+'patient_exemption',
					data: formdata,
					headers: {
						'Content-Type': undefined
					}

				};

				// SEND THE FILES.
				$http(request).then(function (data) {

						var msg = data.data.msg;
						$scope.ok = data.data.status;
						//console.log(data.data.status);
						var statuss = data.data.status;

						$http.post('/api/enterEncounter',enterEncounter).then(function(data) {
							$scope.registrationReport=data.data;

							if(data.data.status ==0){

								sweetAlert(data.data.data, "", "error");
							}else{

								$http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
									$scope.patientsInfo=data.data;
								});

								var modalInstance = $uibModal.open({
									templateUrl: '/views/modules/registration/printCard.html',
									size: 'lg',
									animation: true,
									controller: 'printCard',
									resolve:{
										patientData: function () {
											//console.log($scope.quick_registration);
											return $scope.patientData;
										}
									}


								});

								//sweetAlert(data.data.data, "", "success");
								//enterEncounter='';
							}


						});

					})
					.then(function () {
					});



			}
		}






		// exemptions======================================================


    }

})();

(function () {

    'use strict';

    var app = angular
		.module('authApp')

    app.controller('nhifRegistrationModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            	console.log(object);
    	        $scope.patientData=object;
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;



            $scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}



            $scope.savePatientInsuarance=function (quick_registration,patient) {
                var first_name=quick_registration.first_name;
                var middle_name=quick_registration.middle_name;
                var last_name=quick_registration.last_name;
                var gender=quick_registration.gender;
                var dob=quick_registration.dob;
                var membership_number=quick_registration.membership_number;

                if (angular.isDefined(first_name)==false) {
                    return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
                }

                else if (angular.isDefined(middle_name)==false) {
                    return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
                }

                else if (angular.isDefined(last_name)==false) {
                    return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
                }

                var mobile_number=patient.mobile_number;
                var patient_residences=patient.resedence_id.residence_id;
                var patientservices=patient.payment_services.service_id;
                var occupation=patient.occupation.id;
                var price_id=patient.payment_services.price_id;
                var item_type_id=patient.payment_services.item_type_id;
                var patient_main_category_id=patient.payment_services.patient_main_category_id;
                var patient_category=patient.payment_services.patient_category;
                var payment_filter=patient.payment_services.patient_category_id;
                var insuaranceRegistration={"membership_number":membership_number,"payment_filter":payment_filter,"occupation":occupation,"item_type_id":item_type_id,"price_id":price_id,"patient_main_category_id":patient_main_category_id,"patient_category":patient_category,"patientservices":patientservices,"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}
                $http.post('/api/insuaranceRegistration',insuaranceRegistration).then(function(data) {
                    $scope.registeredPatient=data.data;
                    if(data.data.status ==0){
                        sweetAlert(data.data.data, "", "error");
                    }else{

                        var patientData = data.data[0];
                        var accounts_number = data.data[1][0];
                        var residences = data.data[2][0];
                        var getLastVisit= data.data[3];
                        var object={'patientsInfo':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                        $scope.patient = null;
                        $scope.cancel();
                        var modalInstance = $uibModal.open({
                            templateUrl: '/views/modules/registration/printCard.html',
                            size: 'lg',
                            animation: true,
                            controller: 'printCard',
                            resolve:{
                                object: function () {
                                    //console.log($scope.quick_registration);
                                    return object;
                                }
                            }


                        });

                    }
                });
            }



            $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
		.module('authApp').directive('ngFiles', ['$parse', function ($parse) {

			function fn_link(scope, element, attrs) {
				var onChange = $parse(attrs.ngFiles);
				element.on('change', function (event) {
					onChange(scope, { $files: event.target.files });
				});
			};

			return {
				link: fn_link
			}
		} ])
        .controller('patientController', patientController);

    function patientController($http, $auth, $rootScope,$state,$location,$scope,$uibModal,toastr) {

		var formdata = new FormData();


		$scope.getTheFiles = function ($files) {

			angular.forEach($files, function (value, key) {
				formdata.append(key, value);

			});

		};
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
		//age calculation
			$scope.calculateAge = function(source) {
				var dob = $scope.patient.dob;
				if($scope.patient.dob == undefined && $scope.patient.age == undefined)
					return;
				
				if(dob != '' && source == 'date' && ((new Date()).getFullYear() < parseInt(dob.substring(0, 4)) || 
					((new Date()).getFullYear() == parseInt(dob.substring(0, 4)) && ((new Date()).getMonth()+1) < parseInt(dob.substring(dob.indexOf("-")+1, 7))) ||
				   ((new Date()).getFullYear() == parseInt(dob.substring(0,4)) && ((new Date()).getMonth()+1) == parseInt(dob.substring(dob.indexOf("-")+1, 7)) && ((new Date()).getDate()) < parseInt(dob.substring(dob.lastIndexOf("-")+1, 10))))){
					$scope.patient.dob = "";
					$scope.patient.age_unit = "";
					$scope.patient.age = "";
					swal('Future dates not allowed!','','warning');
					return;
				}
				
				if(source == 'age'){
					$scope.patient.dob = ((new Date()).getFullYear() - $scope.patient.age).toString()+'-07-01';
					$scope.patient.age_unit = 'Years';
				}
				else if(source == 'date'){		
					$scope.patient.dob = $scope.patient.dob.replace(/\//g,'-');
					var days = Math.floor(((new Date()) - new Date(dob.substring(0,4)+'-'+dob.substring(dob.indexOf("-")+1, 7)+'-'+dob.substring(dob.lastIndexOf("-")+1, 10))) / (1000*60*60*24));
					if(days > 365){
						$scope.patient.age = Math.floor(days/365);
						$scope.patient.age_unit = 'Years';
					}else if(days > 30 ){
						$scope.patient.age = Math.floor(days/30);
						$scope.patient.age_unit = 'Months';
					}else{
						$scope.patient.age = days;
						$scope.patient.age_unit = 'Days';
					}
				}else{
					if($scope.patient.age_unit == 'Years')
						$scope.calculateAge('age');
					else if($scope.patient.age_unit == 'Months'){
						if (((new Date()).getMonth()+1) >= ($scope.patient.age%12))
							$scope.patient.dob = ((new Date()).getFullYear()-~~($scope.patient.age/12))+ '-' + ((((new Date()).getMonth()+1)-($scope.patient.age%12)).toString().length == 2 ? '' : '0')+(((new Date()).getMonth()+1)-($scope.patient.age%12)) + '-01';
						else
							$scope.patient.dob = ((new Date()).getFullYear()-1-~~($scope.patient.age/12))+'-' + (((12+((new Date()).getMonth()+1))-($scope.patient.age%12)).toString().length == 2 ? '' : '0')+((12+((new Date()).getMonth()+1))-($scope.patient.age%12)) + '-01';
					}else{
						if (((new Date()).getDate()) >= ($scope.patient.age%30))
						$scope.patient.dob = ((new Date()).getFullYear()-~~($scope.patient.age/365)) +'-'+ ((((new Date()).getMonth()+1)-~~($scope.patient.age/30)).toString().length == 2 ? '' : '0')+(((new Date()).getMonth()+1)-~~($scope.patient.age/30)) + '-' + ($scope.patient.age.toString().length == 2 ? '' : '0')+$scope.patient.age.toString();
						else
							$scope.patient.dob = ((new Date()).getFullYear()-~~($scope.patient.age/365)) +'-'+ ((((new Date()).getMonth())-~~($scope.patient.age/30)).toString().length == 2 ? '' : '0')+(((new Date()).getMonth())-~~($scope.patient.age/30)) + '-' + (((30+((new Date()).getDate()))-($scope.patient.age%30)).toString().length == 2 ? '' : '0') +((30+((new Date()).getDate()))-($scope.patient.age%30));
					}
				}
			}

        $scope.getDepartment=function () {
            $http.get('/api/getClinic').then(function(data) {
                $scope.departments=data.data;
            });

        }

      $scope.getSms=function () {
          $http.get('http://kiuta.co.tz/oneapi-php-master/examples.php').then(
              function (response) {
                      console.log(response.status);

                  toastr.success('','SMS SENT TO NASSORO');

              },
              function (data) {
                  // Handle error here
                  toastr.error('','SMS MAY DELAY ');
              })
      }

        $scope.verification = function (item) {
            $scope.dataLoading = true;
            $http.get('https://verification.nhif.or.tz/NHIFService/breeze/Verification/GetCard?CardNo=' + item).then(
                function (response) {
                     if(response.data.StatusDescription=='Active'){
                        console.log(response.status);
                        $scope.patient.date_of_birth=response.data.DateOfBirth.substr(0,response.data.DateOfBirth.indexOf('T'));
                        $scope.nhif_patient = {"first_name":response.data.FirstName,
                            "middle_name":response.data.MiddleName,
                            "last_name":response.data.LastName,"gender":response.data.Gender,
                            "dob":$scope.patient.date_of_birth,
                            "AuthorizationNo":response.data.AuthorizationNo,
                            "membership_number":item
                        };

                        $scope.dataLoading = false;
                        var object= $scope.nhif_patient;
                        var modalInstance = $uibModal.open({
                            templateUrl: '/views/modules/registration/insuarance.html',
                            size: 'lg',
                            animation: true,
                            controller: 'nhifRegistrationModal',
                            resolve:{
                                object: function () {
                                    return object;
                                }
                            }


                        });


                    }else if(response.data.StatusDescription=='Revoked'){
                        $scope.dataLoading = false;
                           toastr.error('','Card No. Not Active!');
                    }


                },
                function (data) {
                    // Handle error here
                    toastr.error('','Card No. Not Found in Database!');
                }).finally(function () {
                $scope.dataLoading = false;
            });
        }



        var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];				   
				   var insuranceService=[];

				   
				   		   
		    $scope.showSearchMarital= function (searchKey) {
				
            $http.get('/api/getMaritalStatus/'+searchKey).then(function(data) {
            maritals=data.data;
			
            });
			console.log(maritals);
			return maritals;
        }

        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime = true;



        $scope.showFirstForm=function () {
            $scope.firstFormShow=true;
            $scope.secondFormShow=false;
        }
        $scope.showFirstForm();

        $scope.showNextForm=function (patient) {
            $scope.patient=patient;
            console.log($scope.patient)
            $scope.firstFormShow=false;
            $scope.secondFormShow=true;
        }
		
		$scope.showSearchTribe= function (searchKey) {
				
            $http.get('/api/getTribe/'+searchKey).then(function(data) {
            tribe=data.data;
			
            });
			return tribe;
        }
		
		$scope.showSearchOccupation= function (searchKey) {
				
            $http.get('/api/getOccupation/'+searchKey).then(function(data) {
            occupation=data.data;
			
            });
			return occupation;
        }
		
		$scope.getCountry= function (searchKey) {
				
            $http.get('/api/getCountry/'+searchKey).then(function(data) {
            country=data.data;
			
            });
			return country;
        }
		
		$scope.getRelationships= function (searchKey) {
				
            $http.get('/api/getRelationships/'+searchKey).then(function(data) {
            relationships=data.data;		
            });
			return relationships;
        }
        $http.get('/api/getInsurances').then(function(data) {
            $scope.insurances=data.data;


        });
				   
		    $scope.getPatients = function (searchKey) {
				console.log(searchKey);
            $http.get('/api/getSeachedPatients/'+searchKey).then(function(data) {
            patientsList=data.data;

            });
			return patientsList;
        }

        $scope.getInsuarancePatients = function (searchKey) {
			$http.get('/api/getSeachedInsuarancePatients/'+searchKey).then(function(data) {
            patientsList=data.data;

            });
			return patientsList;
        }
				   
            $scope.showSearchNextResidences= function(searchKey) {

             $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                nextresdata= data.data;
             });
			 //console.log(resdata);
             return nextresdata;
             }
			 
			 $scope.showSearchResidences = function(searchKey) {

             $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                resdata = data.data;
             });
			 //console.log(resdata);
             return resdata;
             }
			 
			 $scope.patientService = function() {
				 var searchKey={'patient_category':$scope.encounter.payment_category.patient_category,'item_name':$scope.encounter};
            console.log($scope.encounter);
             $http.post('/api/searchPatientServices',searchKey).then(function(data) {
               patientService = data.data;
            });
			 console.log(resdata);
             return patientService;
             }



        $scope.patientInsuaranceService = function(searchKey) {
            var searchKeyReceived={'patient_category':'NHIF','item_name':searchKey};
            console.log(searchKeyReceived);
            $http.post('/api/searchPatientServices',searchKeyReceived).then(function(data) {
                insuranceService = data.data;
            });
             return insuranceService;
        }
			
            $scope.searchPatientCategory = function(searchKey) {

             $http.get('/api/searchPatientCategory/'+searchKey).then(function(data) {
                patientCategory = data.data;
             });
			 //console.log(resdata);
             return patientCategory;
             }
				  			  
				  $scope.viewItem = function (quick_registration) {
					   $scope.quick_registration = quick_registration;
					  
				  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterModal.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModal',
				  resolve:{
                  quick_registration: function () {
					  console.log($scope.quick_registration);
                  return $scope.quick_registration ;
                  }
                  }

				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
                }





					   $scope.postCorpseMortuary = function (quick_registration) {
					   $scope.quick_registration = quick_registration;
                      $http.get('/api/getMortuary').then(function(data) {
                          $scope.mortuaries=data.data;
                          console.log($scope.mortuaries);


                  var object =angular.extend($scope.quick_registration ,$scope.mortuaries);
                      console.log(object);

                  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterMortuary.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModalCorpse',
				  resolve:{
                      object: function () {
					  return object;
                  }
                  }


                  });
                      });

                }




				
				$scope.openDialogForServices = function (selectedPatient) {
					var patient_id=selectedPatient.patient_id;
					var residence_id=selectedPatient.residence_id;
                    var postData={"patient_id":patient_id,"residence_id":residence_id,"facility_id":facility_id};
					$scope.quick_registration =selectedPatient;

                    $http.post('/api/getPatientRegistrationStatus',postData).then(function(data) {
                         if(data.data[0]==0) {

                             var patientData =selectedPatient;
                             var accounts_number = data.data[1][0];
                             var residences = data.data[2][0];
                             var getLastVisit= data.data[3];
                             var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};

                             var modalInstance = $uibModal.open({
                                 templateUrl: '/views/modules/registration/encounterModal.html',
                                 size: 'lg',
                                 animation: true,
                                 controller: 'registrationModal',
                                 resolve: {
                                     object: function () {
                                           return object;
                                     }
                                 }


                             });
                         }else{

                             var modalInstance = $uibModal.open({
                                 templateUrl: '/views/modules/registration/completeRegistrationModal.html',
                                 size: 'lg',
                                 animation: true,
                                 controller: 'completeRegistrationModal',
                                 resolve: {
                                     selectedPatient: function () {
                                            return selectedPatient;
                                     }
                                 }


                             });
                         }
                    });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
                }
				  
		// Parse the resolve object
    function parseResolve(quick_registration) {
        if (typeof quick_registration === 'string') {
            return {
                quick_registration: function() {
                    return quick_registration;
                }
            }
        }
        else if (typeof quick_registration === 'object') {
            //var resolve = {};
            var resolve = $scope.quick_registration;
            angular.forEach(quick_registration, function(value, key) {
                resolve[key] = function() {
					//console.log(value);
                    return value;
                }
            })
			console.log(resolve);
            return resolve;
        }
    }		  
				  
				  
		
				  $scope.patient_quick_registration=function (patient) {
			      var first_name=patient.first_name;
			      var middle_name=patient.middle_name;
			      var last_name=patient.last_name;
			      var gender=patient.gender;
			      var dob=patient.dob;
			      var mobile_number=patient.mobile_number;
				  
				  
				  if (angular.isDefined(first_name)==false) {
                   return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
                  } 
				  
				  else if (angular.isDefined(middle_name)==false) {
                   return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
                  }
				  
				  else if (angular.isDefined(last_name)==false) {
                   return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
                  }
				  else if (angular.isDefined(patient.resedence_id)==false) {
                   return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
                   }
				  var patient_residences=patient.resedence_id.residence_id;
				  var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}
				  
				  
				 $http.post('/api/quick_registration',quick_registration).then(function(data) {
                 $scope.quick_registration=data.data;
				 console.log($scope.quick_registration);
				 if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
                     var patientData = data.data[0];
                     var accounts_number = data.data[1][0];
                     var residences = data.data[2][0];
                     var getLastVisit= data.data[3];
                     var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                      $scope.patient = null;
                     var modalInstance = $uibModal.open({
                         templateUrl: '/views/modules/registration/encounterModal.html',
                         size: 'lg',
                         animation: true,
                         controller: 'registrationModal',
                         resolve:{
                             object: function () {
                                 console.log(object);
                                 return object;
                             }
                         }


                     });
							
				  }
				});
			   
	
			   
					}

  $scope.corpse_quick_registration=function (patient) {
			      var first_name=patient.first_name;
			      var middle_name=patient.middle_name;
			      var last_name=patient.last_name;
			      var gender=patient.gender;
			      var dob=patient.dob;
			      var mobile_number=patient.mobile_number;


				  if (angular.isDefined(first_name)==false) {
                   return sweetAlert("Please Enter FIRST NAME or UKNOWN before SAVING", "", "error");
                  }

				  else if (angular.isDefined(middle_name)==false) {
                   return sweetAlert("Please Enter MIDDLE NAME or UKNOWN before SAVING", "", "error");
                  }

				  else if (angular.isDefined(last_name)==false) {
                   return sweetAlert("Please Enter LAST NAME or UKNOWN before SAVING", "", "error");
                  }
				  else if (angular.isDefined(patient.resedence_id)==false) {
                   return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
                   }
				  var patient_residences=patient.resedence_id.residence_id;
				  var quick_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


				 $http.post('/api/corpse_registration',quick_registration).then(function(data) {
                 $scope.corpse_registration=data.data;
				 //console.log(data.data);
				 if(data.data.status ==0){

					 sweetAlert(data.data.data, "", "error");
				  }else{
					  $scope.patient = null;
					  quick_registration=$scope.corpse_registration;
			          $scope.postCorpseMortuary(quick_registration);


				  }
				});



					}





        $scope.addEncounterInsuarance=function (registeredPatient,quick_registration) {

            $scope.patientsInfo=registeredPatient;
            var patient_id=registeredPatient.id;
            var patient_category=registeredPatient.patient_category;
            var item_type_id=quick_registration.item_type_id;
            var price_id=quick_registration.price_id;
            var facility_id=registeredPatient.facility_id;
            var user_id=$rootScope.currentUser.id;
            var payment_filter=quick_registration.patient_main_category_id;
            var service_category=quick_registration.item_name;
            var service_id=quick_registration.patientservices;
            var price_id=quick_registration.price_id;
            var bill_category_id=quick_registration.patient_main_category_id;
            var main_category_id=quick_registration.patient_main_category_id;
            var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};

            $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
                $scope.registrationReport=data.data;

                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/registration/printCardBima.html',
                        size: 'lg',
                        animation: true,
                        controller: 'printCardBima',
                        resolve:{
                            patientsInfo: function () {
                                //console.log($scope.quick_registration);
                                return $scope.patientsInfo;
                            }
                        }


                    });

                    //sweetAlert(data.data.data, "", "success");
                    //enterEncounter='';
                }


            });



        }


        $scope.fullRegistration=function (patient,others) {
			      var first_name=patient.first_name;
			      var middle_name=patient.middle_name;
			      var last_name=patient.last_name;
			      var gender=patient.gender;
			      var dob=patient.dob;
			      var mobile_number=patient.mobile_number;
			      
				  
				  
				  if (angular.isDefined(first_name)==false) {
                   return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
                  } 
				  
				  else if (angular.isDefined(middle_name)==false) {
                   return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
                  }
				  
				  else if (angular.isDefined(last_name)==false) {
                   return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
                  }
				  else if (angular.isDefined(patient.resedence_id)==false) {
                   return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
                   }

				   else if (angular.isDefined(others.tribe)==false) {
                   return sweetAlert("Please Enter Tribe and choose from the suggestions", "", "error");
                   }				   
				   else if (angular.isDefined(others.country)==false) {
                   return sweetAlert("Please Enter Country and choose from the suggestions", "", "error");
                   }
				   else if (angular.isDefined(others.next_kin_residence)==false) {
                   return sweetAlert("Please Enter Next of kin Residences and choose from the suggestions", "", "error");
                   }
				   else if (angular.isDefined(others.relationship)==false) {
                   return sweetAlert("Please Enter Relationships and choose from the suggestions", "", "error");
                   }


                  if (angular.isDefined(others.marital)==true) {
                      var marital_status=others.marital.id;
                  }
				  			   
				   console.log(others.next_kin_residence);
				  var patient_residences=patient.resedence_id.residence_id;

				  var occupation=others.occupation.id;
			      var tribe=others.tribe.id;
			      var country=others.country.id;
			      var next_of_kin_name=others.next_of_kin_name;
			      var next_of_kin_resedence_id=others.next_kin_residence.residence_id;
			      var relationship=others.relationship.relationship;
			      var mobile_number_next_kin=others.mobile_number_next_kin;				  
				  var full_registration={"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id,"marital_status":marital_status,"occupation_id":occupation,"tribe":tribe,"country_id":country,"next_of_kin_name":next_of_kin_name,"next_of_kin_resedence_id":next_of_kin_resedence_id,"relationship":relationship,"mobile_number_next_kin":mobile_number_next_kin}
				  
				
				  
				 $http.post('/api/full_registration',full_registration).then(function(data) {
                	 if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }else{

                         var patientData = data.data[0];
                         var accounts_number = data.data[1][0];
                         var residences = data.data[2][0];
                         var getLastVisit= data.data[3];
                         var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                         $scope.showFirstForm();
                         $scope.patient = null;
                         $scope.others = null;
                         var modalInstance = $uibModal.open({
                             templateUrl: '/views/modules/registration/encounterModal.html',
                             size: 'lg',
                             animation: true,
                             controller: 'registrationModal',
                             resolve:{
                                 object: function () {
                                     console.log(object);
                                     return object;
                                 }
                             }
                         });
							
				  }
				});
			   
	
			   
					}	
				  $scope.viewItemFull = function (full_registration) {
					   $scope.quick_registration =full_registration;
					   
					   var quick_registration=full_registration;
				  console.log(full_registration.first_name);
				  var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/encounterModal.html',
				  size: 'lg',
				  animation: true,
				  controller: 'registrationModal',
				  resolve:{
                  quick_registration: function () {
					  console.log($scope.quick_registration);
                  return $scope.quick_registration ;
                  }
                  }

				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
                }

        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
            console.log($scope.menu);

        });
					
			
			$scope.getPricedItems=function (patient_category_selected) {
			console.log(patient_category_selected);
				$http.get('/api/getPricedItems/'+patient_category_selected).then(function(data) {
			      $scope.services=data.data;
			});
					
			}


        $scope.regReport=function (){
            var reportsOPD={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

            $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

                var attendanceOpd = data.data[0][0];
                var newAttendanceOpd = data.data[1][0];
                var opd_mahudhurio_marudio = data.data[2][0];
                var opd_diagnosises = data.data[3];
                var object={'opd_diagnosises':opd_diagnosises,'attendanceOpd':attendanceOpd,'newAttendanceOpd':newAttendanceOpd,'opd_mahudhurio_marudio':opd_mahudhurio_marudio};
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/reports/registration_report.html',
                    size: 'lg',
                    animation: true,
                    controller: 'opdMtuhaController',
                    windowClass: 'app-modal-window',
                    resolve: {
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }


        $scope.regPerfomance=function (){
            var reportsOPD={"user_id":user_id,"facility_id":facility_id};

            $http.post('/api/getStaffPerfomance',reportsOPD).then(function(data) {

                var specificStaff = data.data[0][0];
                var otherStaff = data.data[1][0];
                var startDate = data.data[2];
                var endDate = data.data[3];
                 var object={'endDate':endDate,'startDate':startDate,'specificStaff':specificStaff,'otherStaff':otherStaff};
                console.log(object);

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/reports/regPerfomance.html',
                    size: 'lg',
                    animation: true,
                    controller: 'opdStaffController',
                    windowClass: 'app-modal-window',
                    resolve: {
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }



        $scope.getPricedMortuary=function () {
            $http.get('/api/getMortuary').then(function(data) {
                $scope.mortuaries=data.data;
                console.log($scope.mortuaries);
            });

        }

			
			
			
			//Patient Get Data From the database
			$scope.getpatient=function () {
				/**
            $http.get('/api/getpatient').then(function(data) {
                $scope.patients=data.data;
            });
			
						swal({
  title: 'Error!',
  html: $('<div>')
    .addClass('some-class')
    .text('SAVED'),
  animation: false,
  customClass: 'animated tada'
})
		*/	
			}
			
			
			
			$scope.cancelEncounte=function () {
				var sms='You have canceled service for '+data.data.first_name;
								
						swal({
  title: 'SERVICE CANCELED',
  html: $('<div>')
    .addClass('some-class')
    .text(''+sms+''),
  animation: false,
  customClass: 'animated tada'
});
				
			}
			
			$scope.openModal = function(quick_registration){
            $(".modal").modal("show");
			}
			
			
			
		
			//Patient Update
			$scope.updatepatient=function (patients) {
			var comit=confirm('Are you sure you want to Update '+patients.first_name);
			if(comit) {
			$http.post('/api/updatepatient', patients).then(function (data) {
			})
			$scope.getpatient();
			}
			else{
				return false;
			}
			}
			$scope.getpatient();
			
			
			/*Patient delete
			$scope.deletepatient=function (patients) {
			var comit=confirm('Are you sure you want to delete '+patients.first_name);
			if(comit){
			$http.get('/api/deletepatient/'+patients.id).then(function(data) {
			$scope.getpatient();
			})
			}
			else {
			return false;
			}
			}
			$scope.getpatient();
			*/
			
			//Patient Update Ame
			$scope.updatepatient=function (selectedpatient,residence,marital,occupation,
			tribe,country,gender) {
			var patient_info_toupdate = {
			"id":selectedpatient.id,
			"first_name":selectedpatient.first_name,
			"middle_name":selectedpatient.middle_name,
			"last_name":selectedpatient.last_name,
			"dob":selectedpatient.dob,
			"gender":gender.gender,
			"mobile_number":selectedpatient.mobile_number,
			"residence_id":residence.residence_id,
			"marital_id":marital.id,
			"occupation_id":occupation.id,
			"tribe_id":tribe.id,
			"country_id":country.id,
			"facility_id":$rootScope.currentUser.facility_id,
			}
			console.log(patient_info_toupdate);
			//console.log(patient_info_toupdate)
			$http.post('/api/updatepatient', patient_info_toupdate).then(function (data) {
			$scope.patientss=data;
			console.log(patientss);
			swal("You have Succesfully Update" +$scope.patientss);
			});
			}



	// exemptions======================================================


		$scope.exemption_type_list=function () {
			$http.get('/api/exemption_type_list').then(function(data) {
				$scope.exemption_types=data.data;


			});
		}

		$scope.exemption_type_list();

		$http.get('/api/getexemption_services/'+facility_id).then(function(data) {
			$scope.exemption_services=data.data;
		});


		$scope.exemption_registration=function (exempt,patientData) {

			console.log(patientData,exempt)
			var status_id = 2;
			var reason_for_revoke = "..";



			if(exempt==undefined){
				swal(
					'Feedback..',
					'FILL ALL FIELDS',
					'error'
				)

			}

			else if (exempt.exemption_type_id==undefined ){
				swal(
					'Feedback..',
					'Please Select Exemption Category ',
					'error'
				)
			}

			else if (exempt.exemption_reason==undefined){
				swal(
					'Feedback..',
					'Please Fill  Reason(s) for This exemption ',
					'error'
				)
			}
			else if (exempt.service==undefined){
				swal(
					'Feedback..',
					'Please Choose Service ',
					'error'
				)
			}



			else{
var patient=patientData.id;
console.log(patientData,patient)
				var patient_category=exempt.service.patient_category;
				var service_category=exempt.service;
				var service_id=exempt.service.service_id;
				var price_id=exempt.service.price_id;
				var item_type_id=exempt.service.item_type_id;
				var patient_id=patient;
				var facility_id=exempt.service.facility_id;
				var user_id=$rootScope.currentUser.id;
				var payment_filter=exempt.exemption_type_id;

				var bill_category_id=exempt.exemption_type_id;
				var main_category_id=3;

				var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
					'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};


				var status_id=2;

				var exemption_type_id= exempt.exemption_type_id;
				var exemption_reason= exempt.exemption_reason;
				var user_id= $rootScope.currentUser.id;
				var facility_id= $rootScope.currentUser.facility_id;
				var patient_id= patient;
				var status_id= status_id;
				var exemption_type_id=exempt.exemption_type_id;
				var exemption_reason= exempt.exemption_reason;
				var reason_for_revoke= reason_for_revoke;
				var description=exempt.description;

				formdata.append('exemption_type_id',exemption_type_id);
				formdata.append('exemption_reason',exemption_reason);
				formdata.append('user_id',user_id);
				formdata.append('facility_id',facility_id);
				formdata.append('patient_id',patient_id);
				formdata.append('reason_for_revoke',reason_for_revoke);
				formdata.append('status_id',status_id);
				var request = {
					method: 'POST',
					url: '/api/'+'patient_exemption',
					data: formdata,
					headers: {
						'Content-Type': undefined
					}

				};

				// SEND THE FILES.
				$http(request).then(function (data) {

						var msg = data.data.msg;
						$scope.ok = data.data.status;
						//console.log(data.data.status);
						var statuss = data.data.status;

						$http.post('/api/enterEncounter',enterEncounter).then(function(data) {
							$scope.registrationReport=data.data;

							if(data.data.status ==0){

								sweetAlert(data.data.data, "", "error");
							}else{

								$http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
									$scope.patientsInfo=data.data;
									$scope.patientData=data.data;
									console.log(data.data);
									var object={patientsInfo:$scope.patientsInfo};
									var modalInstance = $uibModal.open({
									templateUrl: '/views/modules/registration/printCard.html',
									size: 'lg',
									animation: true,
									controller: 'printCard',
									resolve:{
										object: function () {
											//console.log($scope.quick_registration);
											return object ;
										}
									}


								});
									
								});

								

								//sweetAlert(data.data.data, "", "success");
								//enterEncounter='';
							}


						});

					})
					.then(function () {
					});



			}
		}






		// exemptions======================================================


    }

})();

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('printCard',

                ['$scope','$http','$rootScope', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope, $uibModalInstance, object) {

				$scope.patientData=object.patientsInfo;
				$scope.patientResidences=object.residences;
                console.log($scope.patientData);
                console.log(object);
				$scope.cancel=function (){
				$uibModalInstance.dismiss();
			}
				
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					sweetAlert(data.data.data, "", "success"); 
                    enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('printCardBima',

                ['$scope','$http','$rootScope', '$uibModalInstance', 'patientsInfo',
        function ($scope,$http,$rootScope, $uibModalInstance, patientsInfo) {
				$scope.registeredPatient=patientsInfo;
				//console.log($scope.quick_registration);

				console.log($scope.registeredPatient);

				$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}
				
           $scope.enterEncounter=function (encounter,patient,facility_id) {
			     	 
				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   
				  console.log(encounter);
				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;		
				  var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					sweetAlert(data.data.data, "", "success"); 
                    enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular
        .module('authApp')

    app.controller('registrationModal',

        ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
                console.log(object);
                $scope.patientData=object.patientData;
                $scope.accounts_number=object.accounts_number;
                $scope.residences=object.residences;
                $scope.getLastVisit=object.getLastVisit;

                $scope.enterEncounter=function (patientData,residences,encounter,patient,facility_id,dept_id) {


                    if (angular.isDefined(encounter)==false) {
                        return sweetAlert("Please Type the Payment Category", "", "error");
                    }
                    else if (angular.isDefined(encounter.payment_category)==false) {
                        return sweetAlert("Please Type the Payment Category", "", "error");
                    }
                    else if (angular.isDefined(encounter.payment_services)==false) {
                        return sweetAlert("Please Select Service", "", "error");
                    }
                    else{


                        var patient_category=encounter.payment_category.patient_category;
                        var service_category=encounter.payment_services;
                        var service_id=encounter.payment_services.service_id;
                        var price_id=encounter.payment_services.price_id;
                        var item_type_id=encounter.payment_services.item_type_id;
                        var patient_id=patient;
                        var facility_id=facility_id;
                        var user_id=$rootScope.currentUser.id;
                        var payment_filter=encounter.payment_category.patient_category_id;

                        var bill_category_id=encounter.payment_category.patient_category_id;
                        var main_category_id=encounter.payment_category.patient_main_category_id;

                        var enterEncounter={'dept_id':dept_id,'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
                            'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
                        console.log(enterEncounter)
                        $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
                            $scope.registrationReport=data.data;

                            if(data.data.status ==0){

                                sweetAlert(data.data.data, "", "error");
                            }else{
                                var object={'patientsInfo':patientData,'residences':residences};
                                $scope.cancel();
                                var modalInstance = $uibModal.open({
                                    templateUrl: '/views/modules/registration/printCard.html',
                                    size: 'lg',
                                    animation: true,
                                    controller: 'printCard',
                                    resolve:{
                                        object: function () {
                                            //console.log($scope.quick_registration);
                                            return object;
                                        }
                                    }


                                });

                                //sweetAlert(data.data.data, "", "success");
                                //enterEncounter='';
                            }


                        });



                    }
                }


                $scope.cancel=function (){
                    console.log('done and cleared');
                    $uibModalInstance.dismiss();

                }


                $scope.closeAllModals=function (){
                    console.log('done and cleared');
                    $uibModalInstance.dismissAll();

                }

            }]);





}());

(function () {

    'use strict';

    var app = angular
		.module('authApp')

    app.controller('registrationModalCorpse',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance, object) {

            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.quick_registration=object;
				$scope.corpse=object;
				console.log($scope.corpse.id);
				$scope.patientData=$scope.quick_registration;
				//console.log($rootScope.currentUser);
				var last_visit={'patient_id':$scope.quick_registration.id,'facility_id':$scope.quick_registration.facility_id};

            $scope.saveMortuary= function (quick_registration,mortuary) {
                $scope.corpseInfo = quick_registration[1];
                $scope.corpseData = mortuary;

                console.log($scope.corpseInfo);
                console.log($scope.corpseData);
                var data={"corpse_id":$scope.corpseData.id,"mortuary_id":$scope.corpseData[0].id,"facility_id":facility_id,"user_id":user_id,"admission_status_id":1};
                $http.post('/api/saveCorpseFromOutsideFacility',data).then(function(data) {

                    if(data.data.status ==1){
                        $scope.cancel();
                        sweetAlert(data.data.data, "", "success");
                    }
                });


            }

            $scope.enterEncounter=function (encounter,patient,facility_id) {

				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   

				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;	 
				  var payment_filter=encounter.payment_category.patient_category_id;

                 var bill_category_id=encounter.payment_category.patient_category_id;
                 var main_category_id=encounter.payment_category.patient_main_category_id;
 				  
				  var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 console.log(enterEncounter)
				 $http.post('/api/enterEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  
					   $http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
						  $scope.patientsInfo=data.data;					  
					   });
					  
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                  patientData: function () {
					  //console.log($scope.quick_registration);
                  return $scope.patientData;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}


			// exemptions===============================================================
/*
			$scope.exemption_registration=function (exempt,patient) {

				console.log(patient,exempt)
				var status_id = 2;
				var reason_for_revoke = "..";



				if(exempt==undefined){
					swal(
						'Feedback..',
						'FILL ALL FIELDS',
						'error'
					)

				}
				else if(patient==undefined){
					swal(
						'Feedback..',
						'Please Select Client from a Search Box above...',
						'error'
					)

				}
				else if (exempt.exemption_type_id==undefined ){
					swal(
						'Feedback..',
						'Please Select Exemption Category ',
						'error'
					)
				}

				else if (exempt.exemption_reason==undefined){
					swal(
						'Feedback..',
						'Please Fill  Reason(s) for This exemption ',
						'error'
					)
				}
				else if (exempt.service==undefined){
					swal(
						'Feedback..',
						'Please Choose Service ',
						'error'
					)
				}



				else{

					var patient_category=exempt.service.patient_category;
					var service_category=exempt.service;
					var service_id=exempt.service.service_id;
					var price_id=exempt.service.price_id;
					var item_type_id=exempt.service.item_type_id;
					var patient_id=patient;
					var facility_id=exempt.service.facility_id;
					var user_id=$rootScope.currentUser.id;

					var bill_category_id=exempt.exemption_type_id;
					var main_category_id=3;

					var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
						'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};


					var status_id=2;
					var patient= patient;
					var exemption_type_id= exempt.exemption_type_id;
					var exemption_reason= exempt.exemption_reason;
					var user_id= $rootScope.currentUser.id;
					var facility_id= $rootScope.currentUser.facility_id;
					var patient_id= patient;
					var status_id= status_id;
					var exemption_type_id=exempt.exemption_type_id;
					var exemption_reason= exempt.exemption_reason;
					var reason_for_revoke= reason_for_revoke;
					var description=exempt.description;

					formdata.append('exemption_type_id',exemption_type_id);
					formdata.append('exemption_reason',exemption_reason);
					formdata.append('user_id',user_id);
					formdata.append('facility_id',facility_id);
					formdata.append('patient_id',patient_id);
					formdata.append('reason_for_revoke',reason_for_revoke);
					formdata.append('status_id',status_id);
					var request = {
						method: 'POST',
						url: '/api/'+'patient_exemption',
						data: formdata,
						headers: {
							'Content-Type': undefined
						}

					};

					// SEND THE FILES.
					$http(request).then(function (data) {

							var msg = data.data.msg;
							$scope.ok = data.data.status;
							//console.log(data.data.status);
							var statuss = data.data.status;

							$http.post('/api/enterEncounter',enterEncounter).then(function(data) {
								$scope.registrationReport=data.data;

								if(data.data.status ==0){

									sweetAlert(data.data.data, "", "error");
								}else{

									$http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
										$scope.patientsInfo=data.data;
									});

									var modalInstance = $uibModal.open({
										templateUrl: '/views/modules/registration/printCard.html',
										size: 'lg',
										animation: true,
										controller: 'printCard',
										resolve:{
											patientData: function () {
												//console.log($scope.quick_registration);
												return $scope.patientData;
											}
										}


									});

									//sweetAlert(data.data.data, "", "success");
									//enterEncounter='';
								}


							});

						})
						.then(function () {
						});



				}
			}





			// exemptions===============================================================

*/




			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('dentalMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.dental_attendances=object.postedToClinic;

            $scope.getIPDReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsIPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};


                $http.post('/api/getIpdReport',reportsIPD).then(function(data) {
                    var admittedIPD = data.data[0][0];
                    var diagnosisIPD = data.data[1];
                    var object={'admittedIPD':admittedIPD,'diagnosisIPD':diagnosisIPD};
                    $scope.ipd_admissions=object.admittedIPD;
                    $scope.diagnosisIPDs=object.diagnosisIPD;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;
                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('doctorsPerfomacesController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.DoctorsPerfomaces=object.DoctorsPerfomaces;

            $scope.getReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsOPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};

                $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

                    var attendanceOpd = data.data[0][0];
                    var newAttendanceOpd = data.data[1][0];
                    var opd_mahudhurio_marudio = data.data[2][0];
                    var opd_diagnosises = data.data[3];
                    var object = {
                        'opd_diagnosises': opd_diagnosises,
                        'attendanceOpd': attendanceOpd,
                        'newAttendanceOpd': newAttendanceOpd,
                        'opd_mahudhurio_marudio': opd_mahudhurio_marudio
                    };
                    $scope.opd_mahudhurio=object.attendanceOpd;
                    $scope.opd_mahudhurio_new=object.newAttendanceOpd;
                    $scope.opd_mahudhurio_marudio=object.opd_mahudhurio_marudio;
                    $scope.opd_diagnosises=object.opd_diagnosises;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;


                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('drugsMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.drugsOutOfStocks=object.drugsOutOfStock;

            $scope.getReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsOPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};

                $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

                    var attendanceOpd = data.data[0][0];
                    var newAttendanceOpd = data.data[1][0];
                    var opd_mahudhurio_marudio = data.data[2][0];
                    var opd_diagnosises = data.data[3];
                    var object = {
                        'opd_diagnosises': opd_diagnosises,
                        'attendanceOpd': attendanceOpd,
                        'newAttendanceOpd': newAttendanceOpd,
                        'opd_mahudhurio_marudio': opd_mahudhurio_marudio
                    };
                    $scope.opd_mahudhurio=object.attendanceOpd;
                    $scope.opd_mahudhurio_new=object.newAttendanceOpd;
                    $scope.opd_mahudhurio_marudio=object.opd_mahudhurio_marudio;
                    $scope.opd_diagnosises=object.opd_diagnosises;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;


                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('expiredDrugsMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.drugsExpireds=object.drugsExpired;

            $scope.getReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsOPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};

                $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

                    var attendanceOpd = data.data[0][0];
                    var newAttendanceOpd = data.data[1][0];
                    var opd_mahudhurio_marudio = data.data[2][0];
                    var opd_diagnosises = data.data[3];
                    var object = {
                        'opd_diagnosises': opd_diagnosises,
                        'attendanceOpd': attendanceOpd,
                        'newAttendanceOpd': newAttendanceOpd,
                        'opd_mahudhurio_marudio': opd_mahudhurio_marudio
                    };
                    $scope.opd_mahudhurio=object.attendanceOpd;
                    $scope.opd_mahudhurio_new=object.newAttendanceOpd;
                    $scope.opd_mahudhurio_marudio=object.opd_mahudhurio_marudio;
                    $scope.opd_diagnosises=object.opd_diagnosises;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;


                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('eyeMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.eye_attendances=object.postedToClinic;

            $scope.getIPDReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsIPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};


                $http.post('/api/getIpdReport',reportsIPD).then(function(data) {
                    var admittedIPD = data.data[0][0];
                    var diagnosisIPD = data.data[1];
                    var object={'admittedIPD':admittedIPD,'diagnosisIPD':diagnosisIPD};
                    $scope.ipd_admissions=object.admittedIPD;
                    $scope.diagnosisIPDs=object.diagnosisIPD;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;
                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('ipdMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.ipd_admissions=object.admittedIPD;
            $scope.diagnosisIPDs=object.diagnosisIPD;

            $scope.getIPDReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsIPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};


                $http.post('/api/getIpdReport',reportsIPD).then(function(data) {
                    var admittedIPD = data.data[0][0];
                    var diagnosisIPD = data.data[1];
                    var object={'admittedIPD':admittedIPD,'diagnosisIPD':diagnosisIPD};
                    $scope.ipd_admissions=object.admittedIPD;
                    $scope.diagnosisIPDs=object.diagnosisIPD;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;
                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('labMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.testsOutOfStocks=object.testsOutOfStock;

            $scope.getReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsOPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};

                $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

                    var attendanceOpd = data.data[0][0];
                    var newAttendanceOpd = data.data[1][0];
                    var opd_mahudhurio_marudio = data.data[2][0];
                    var opd_diagnosises = data.data[3];
                    var object = {
                        'opd_diagnosises': opd_diagnosises,
                        'attendanceOpd': attendanceOpd,
                        'newAttendanceOpd': newAttendanceOpd,
                        'opd_mahudhurio_marudio': opd_mahudhurio_marudio
                    };
                    $scope.opd_mahudhurio=object.attendanceOpd;
                    $scope.opd_mahudhurio_new=object.newAttendanceOpd;
                    $scope.opd_mahudhurio_marudio=object.opd_mahudhurio_marudio;
                    $scope.opd_diagnosises=object.opd_diagnosises;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;


                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('opdMtuhaController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.opd_mahudhurio=object.attendanceOpd;
            $scope.opd_mahudhurio_new=object.newAttendanceOpd;
            $scope.opd_mahudhurio_marudio=object.opd_mahudhurio_marudio;
            $scope.opd_diagnosises=object.opd_diagnosises;
            
            $scope.getReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsOPD={"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};

                $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

                    var attendanceOpd = data.data[0][0];
                    var newAttendanceOpd = data.data[1][0];
                    var opd_mahudhurio_marudio = data.data[2][0];
                    var opd_diagnosises = data.data[3];
                    var object = {
                        'opd_diagnosises': opd_diagnosises,
                        'attendanceOpd': attendanceOpd,
                        'newAttendanceOpd': newAttendanceOpd,
                        'opd_mahudhurio_marudio': opd_mahudhurio_marudio
                    };
                    $scope.opd_mahudhurio=object.attendanceOpd;
                    $scope.opd_mahudhurio_new=object.newAttendanceOpd;
                    $scope.opd_mahudhurio_marudio=object.opd_mahudhurio_marudio;
                    $scope.opd_diagnosises=object.opd_diagnosises;
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;


                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('opdStaffController',

        ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
            function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {

    	    var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            $scope.specificStaff=object.specificStaff;
            $scope.otherStaff=object.otherStaff;
            $scope.start_date=object.startDate;
            $scope.end_date=object.endDate;

            $scope.getReportBasedOnthisDate=function (dt_start,dt_end) {
                var reportsOPD={"user_id":user_id,"facility_id":facility_id,"start_date":dt_start,"end_date":dt_end};

                $http.post('/api/getStaffPerfomance',reportsOPD).then(function(data) {

                    $scope.specificStaff = data.data[0][0];
                    $scope.otherStaff = data.data[1][0];
                    $scope.start_date=dt_start;
                    $scope.end_date=dt_end;


                });
                }

			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();

			}

                $http.get('/api/getLoginUserDetails/'+user_id ).then(function(data) {
                    $scope.loginUserFacilityDetails=data.data;

                    console.log($scope.loginUserFacilityDetails);

                });

                $scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}


                $scope.today = function() {
                    $scope.dt_start = new Date();
                    $scope.dt_end = new Date();
                };
                //$scope.today();

                $scope.clear = function() {
                    $scope.dt_start = null;
                    $scope.dt_end = null;
                };

                $scope.inlineOptions = {
                    customClass: getDayClass,
                    minDate: new Date(),
                    showWeeks: true
                };

                $scope.dateOptions = {
                    dateDisabled: disabled,
                    formatYear: 'yy',
                    maxDate: new Date(2020, 5, 22),
                    minDate: new Date(),
                    startingDay: 1
                };

                // Disable weekend selection
                function disabled(data) {
                    var date = data.date,
                        mode = data.mode;
                    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
                }

                $scope.toggleMin = function() {
                    $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date();
                    $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
                };

                $scope.toggleMin();

                $scope.open1 = function() {
                    $scope.popup1.opened = true;
                };

                $scope.open2 = function() {
                    $scope.popup2.opened = true;
                };

                $scope.setDate = function(year, month, day) {
                    $scope.dt_end = new Date(year, month, day);
                };

                $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
                $scope.format = $scope.formats[0];
                $scope.altInputFormats = ['M!/d!/yyyy'];

                $scope.popup1 = {
                    opened: false
                };

                $scope.popup2 = {
                    opened: false
                };

                var tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                var afterTomorrow = new Date();
                afterTomorrow.setDate(tomorrow.getDate() + 1);
                $scope.events = [
                    {
                        date: tomorrow,
                        status: 'full'
                    },
                    {
                        date: afterTomorrow,
                        status: 'partially'
                    }
                ];

                function getDayClass(data) {
                    var date = data.date,
                        mode = data.mode;
                    if (mode === 'day') {
                        var dayToCheck = new Date(date).setHours(0,0,0,0);

                        for (var i = 0; i < $scope.events.length; i++) {
                            var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

                            if (dayToCheck === currentDay) {
                                return $scope.events[i].status;
                            }
                        }
                    }

                    return '';
                }



        }]);




		
}());

(function () {
  'use strict';

  var app = angular.module('authApp');

  app.controller('reportsMtuha',

      ['$filter','$scope','$http','$rootScope','$uibModal', '$mdDialog',
      function ($filter,$scope,$http,$rootScope,$uibModal, $mdDialog) {

        var facility_id = $rootScope.currentUser.facility_id;
        var user_id =$rootScope.currentUser.id;

        $scope.getNHIFdashboard = function (){
          var reportsDrugs={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

          $http.post('/api/reportsDrugs',reportsDrugs).then(function(data) {

            var drugsOutOfStock = data.data[0];
            var object={'drugsOutOfStock':drugsOutOfStock};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/insurance/insurance.html',
              size: 'lg',
              animation: true,
              controller: 'insuranceController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.showDrugsOutOfStock = function (){
          var reportsDrugs={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

          $http.post('/api/reportsDrugs',reportsDrugs).then(function(data) {

            var drugsOutOfStock = data.data[0];
            var object={'drugsOutOfStock':drugsOutOfStock};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/drugs.html',
              size: 'lg',
              animation: true,
              controller: 'drugsMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.closeDialog = function(e) {
          e.preventDefault();
          $mdDialog.hide();
        };

        $scope.confirmDialog = function() {

          $mdDialog.show({
            controller          : 'reportsMtuha',
            templateUrl         : 'views/confirm.html',
            clickOutsideToClose : true,
            $scope              : $scope,
            preserveScope       : true,
          }).then(function() {

            if (confirmPay) {

              var payable = {
                id                  : id,
                bank_transaction_no : confirmPay.reference,
                payment_date        : confirmPay.confirmation_date
              };

              Helper.setPayable(payable);
              var uri =  '#!/payments/preview/' + id;

              $window.location.href = uri;
            } else {

              $scope.loading = false;
              return;
            }
          });
        };

        $scope.showTestsOutOfStock=function (){
          var reportsTests={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-01'};

          $http.post('/api/reportsUnavailableTests',reportsTests).then(function(data) {

            var testsOutOfStock = data.data[0];
            var object={'testsOutOfStock':testsOutOfStock};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/lab_tests.html',
              size: 'lg',
              animation: true,
              controller: 'labMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };


        $scope.showBookFive = function (){
          var reportsOPD={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

          $http.post('/api/getMahudhurioOPD',reportsOPD).then(function(data) {

            var attendanceOpd = data.data[0][0];
            var newAttendanceOpd = data.data[1][0];
            var opd_mahudhurio_marudio = data.data[2][0];
            var opd_diagnosises = data.data[3];
            var object={'opd_diagnosises':opd_diagnosises,'attendanceOpd':attendanceOpd,'newAttendanceOpd':newAttendanceOpd,'opd_mahudhurio_marudio':opd_mahudhurio_marudio};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/opd.html',
              size: 'lg',
              animation: true,
              controller: 'opdMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.showDoctorsPerfomances = function (){

          var reportsPerfomaces={"facility_id":facility_id};

          $http.post('/api/getDoctorsPerfomaces',reportsPerfomaces).then(function(data) {
            var DoctorsPerfomaces = data.data[0];
            var object={'DoctorsPerfomaces':DoctorsPerfomaces};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/doctorsPerfomaces.html',
              size: 'lg',
              animation: true,
              controller: 'doctorsPerfomacesController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.showDrugsExpired = function (){

          $http.get('/api/expired/'+facility_id).then(function(data) {

            var drugsExpired = data.data;
            var object={'drugsExpired':drugsExpired};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/expiredDrugs.html',
              size: 'lg',
              animation: true,
              controller: 'expiredDrugsMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };


        $scope.showBookFourteen = function (){
          var reportsIPD={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

          $http.post('/api/getIpdReport',reportsIPD).then(function(data) {

            var admittedIPD = data.data[0][0];
            var diagnosisIPD = data.data[1];
            var object={'admittedIPD':admittedIPD,'diagnosisIPD':diagnosisIPD};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/ipd.html',
              size: 'lg',
              animation: true,
              controller: 'ipdMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.showBookEleven = function (){
          var ClinicReport={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

          $http.post('/api/getDentalClinicReport',ClinicReport).then(function(data) {

            var postedToClinic = data.data[0][0];
            var object={'postedToClinic':postedToClinic};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/dental.html',
              size: 'lg',
              animation: true,
              controller: 'dentalMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.showBookSixteen = function (){
          var ClinicReport={"facility_id":facility_id,"start_date":'2017-01-01',"end_date":'2017-07-07'};

          $http.post('/api/getEyeClinicReport',ClinicReport).then(function(data) {

            var postedToClinic = data.data[0][0];
            var object={'postedToClinic':postedToClinic};
            var modalInstance = $uibModal.open({
              templateUrl: '/views/modules/reports/eye.html',
              size: 'lg',
              animation: true,
              controller: 'eyeMtuhaController',
              windowClass: 'app-modal-window',
              resolve: {
                object: function () {
                  return object;
                }
              }
            });
          });
        };

        $scope.cancel = function (){
          console.log('done and cleared');
          $uibModalInstance.dismiss();
        };

        $scope.closeAllModals=function (){
          console.log('done and cleared');
          $uibModalInstance.dismissAll();
        };
      }]);
}());

/**
 * Created by Mazigo Jr on 2017-05-02.
 */

(function () {
    var app = angular.module('authApp');
    app.controller('PediatricController',['$scope','$http','$rootScope','$state','$uibModal','$window',
        function ($scope,$http,$rootScope,$state,$uibModal,$window) {

        var user_id = $rootScope.currentUser.id;
        var facility_id = $rootScope.currentUser.facility_id;
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }

            $scope.ClinicQueue=function () {
                $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                    $scope.resdatas = data.data[6];

console.log($scope.resdatas);
                });
            }
            $scope.ClinicQueue();


        angular.element(document).ready(function () {
            $scope.setTab(1);
            $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                $scope.patientData = data.data;
            });
            $http.post('/api/investigationList',{"facility_id":facility_id}).then(function(data) {
                $scope.patientInvData = data.data;
            });
        });
        var patientOpdPatients =[];
        $scope.showSearch = function(searchKey) {
            $http.post('/api/getAllOpdPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientOpdPatients = data.data;

            });

            $scope.ClinicQueue();
            return patientOpdPatients;
        }
        var patientInvPatients =[];
        $scope.showSearch2 = function(searchKey) {
            console.log(searchKey)
            $http.post('/api/getAllInvPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                patientInvPatients = data.data;
            });
            return patientInvPatients;
        }

        $scope.getConsultationModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/Pediatric/PediatricConsultation.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }


        $scope.getIncomingTransferConsultationModal = function (item) {
            var object = item;
            console.log(item)
            $http.post('/api/update_referral_Incomming',item).then(function(data) {


                if(data.data){

                    $scope.ClinicQueue();


                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/clinic/Pediatric/PediatricConsultation.html',
                        size: 'lg',
                        animation: true,
                        controller: 'opdController',
                        windowClass: 'app-modal-window',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });



                }
            });


        }
        $scope.closeModal=function (){

            $uibModalInstance.dismiss();

        }
        $scope.getTreatmentModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/ClinicalServices/treatmentModal.html',
                size: 'lg',
                animation: true,
                controller: 'opdController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
 

  $scope.TRACERreport = function (item) {

            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/Pediatric/TRACERreport.html',
                size: 'lg',
                animation: true,
                controller: 'PediatricController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {

                    }
                }
            });
        }
            $scope.Ledger = function (item) {

            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/Pediatric/Ledger.html',
                size: 'lg',
                animation: true,
                controller: 'PediatricController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {

                    }
                }
            });
        }

            $scope.TRACERreportSearch = function (item) {
            $http.post('/api/tracer_medicines_report',{facility_id:facility_id,start_date:item.start_date,end_date:item.end_date}).then(function(data) {
                $scope.tracers=data.data;
                ////console.log($scope.menu);

            } );
            }
            $scope.LedgerSearch = function (item) {
            $http.post('/api/ledger',{facility_id:facility_id,start_date:item.start_date,end_date:item.end_date}).then(function(data) {
                $scope.ledgers=data.data;
                ////console.log($scope.menu);

            } );
            }


        $scope.Tb_diagnosis=function (selectedPatient) {
            var patientAge;

console.log(selectedPatient)
            $http.get('/api/patientAge/'+selectedPatient.dob ).then(function(data) {
                patientAge=data.data;

                var object ={
                    patientAge:patientAge.age,

                    patientAgeDay:patientAge.day,
                    year:patientAge.year,
                    month:patientAge.month,
                    day:patientAge.day,
                    selectedPatient:selectedPatient,
                };
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/clinic/VCT/Vct_care.html',
                    size: 'lg',
                    animation: true,
                    controller: 'Vct_data',
                    windowClass: 'app-modal-window',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            });


        }


        $scope.billsCancellation = function () {
            $http.post('/api/getBillList',{"facility_id":facility_id}).then(function (data) {
                $scope.patientBill=data.data;
            });
        }
        $scope.getBillModal = function (item) {
            $http.post('/api/cancelPatientBill',{"patient_id":item.patient_id,"facility_id":facility_id}).then(function (data) {
                var object = data.data;
                var modalInstance = $uibModal.open({
                    templateUrl:'/views/modules/ClinicalServices/billCancellationModal.html',
                    size: 'lg',
                    animation:true,
                    controller:'opdController',
                    windowClass: 'app-modal-window',
                    resolve :{
                        object: function () {
                            return object;
                        }
                    }
                });
            });
        }
            $scope.pediatricNutritional = function (item,patient) {
             var hscore=   $('#hscore').val();
             var wscore=   $('#wscore').val();

                if (item == undefined) {
                    swal(
                        'Error',
                        'Fill All fields',
                        'error'
                    )
                }


else{
                    var  whz_score=wscore+'/'+hscore;
                    console.log(whz_score)
                    var pediatricNut={'others':item.others,'muac':item.muac,'whz_score':whz_score,'client_id':patient,user_id:user_id,facility_id:facility_id}
                    console.log(pediatricNut)
            $http.post('/api/pediatricNutritional',pediatricNut).then(function (data) {

                var sending = data.data.data;
                var statusee = data.data.status;
                if (statusee == 0) {
                    swal(
                        'Error',
                        sending,
                        'error'
                    )
                }
                else {
                    swal(
                        'Feedback..',
                        sending,
                        'success'
                    )
                }

            });
        }
        }


            $scope.pediatricDietary = function (item,patient) {

                if (item == undefined) {
                    swal(
                        'Error',
                        'No any column Field',
                        'error'
                    )
                }

                else{

                    var pediatricDietary={'others':item.others,'food_intake_quality':item.food_intake_quality,'food_intake_quantity':item.food_intake_quantity,'client_id':patient,user_id:user_id,facility_id:facility_id}

                    $http.post('/api/pediatricDietary',pediatricDietary).then(function (data) {

                        var sending = data.data.data;
                        var statusee = data.data.status;
                        if (statusee == 0) {
                            swal(
                                'Error',
                                sending,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Feedback..',
                                sending,
                                'success'
                            )
                        }

                    });
                }
            }
            $scope.pediatricPreNatal = function (item,patient) {

                if (item == undefined) {
                    swal(
                        'Error',
                        'No any column Field',
                        'error'
                    )
                }

                else{

                    var pediatricPreNatal={'others':item.others,'preg_book_age':item.preg_book_age,'clinic_attendance':item.clinic_attendance,'prophylaxis':item.prophylaxis,'client_id':patient,user_id:user_id,facility_id:facility_id}

                    $http.post('/api/pediatricPreNatal',pediatricPreNatal).then(function (data) {

                        var sending = data.data.data;
                        var statusee = data.data.status;
                        if (statusee == 0) {
                            swal(
                                'Error',
                                sending,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Feedback..',
                                sending,
                                'success'
                            )
                        }

                    });
                }
            }
            $scope.pediatricNatal = function (item,patient) {

                if (item == undefined) {
                    swal(
                        'Error',
                        'No any column Field',
                        'error'
                    )
                }

                else{

                    var pediatricNatal={'others':item.others,'delivery_mode':item.delivery_mode,
                        'delivery_place':item.delivery_place,'baby_cry':item.baby_cry,
                        'apgar_score':item.apgar_score,
                        'client_id':patient,user_id:user_id,facility_id:facility_id}
console.log(pediatricNatal)
                    $http.post('/api/pediatricPreNatal',pediatricNatal).then(function (data) {

                        var sending = data.data.data;
                        var statusee = data.data.status;
                        if (statusee == 0) {
                            swal(
                                'Error',
                                sending,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Feedback..',
                                sending,
                                'success'
                            )
                        }

                    });
                }
            }
            $scope.pediatricPostNatal = function (item,patient) {

                if (item == undefined) {
                    swal(
                        'Error',
                        'No any column Field',
                        'error'
                    )
                }

                else{

                    var pediatricPostNatal={'others':item.others,'immunization':item.immunization,
                        'diety':item.diety,'milestone':item.milestone,
                        'client_id':patient,user_id:user_id,facility_id:facility_id}

                    $http.post('/api/pediatricPostNatal',pediatricPostNatal).then(function (data) {

                        var sending = data.data.data;
                        var statusee = data.data.status;
                        if (statusee == 0) {
                            swal(
                                'Error',
                                sending,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Feedback..',
                                sending,
                                'success'
                            )
                        }

                    });
                }
            }
      //--------------------------------------z score............................................  
        
        
        
        
        
        
      //--------------------------------------z score............................................  



        }]);

})();

/**
 * Created by Mazigo Jr on 2017-05-02.
 */

(function () {
    var app = angular.module('authApp');
    app.controller('TbController',['$scope','$http','$rootScope','$state','$uibModal','$window',
        function ($scope,$http,$rootScope,$state,$uibModal,$window) {

            var user_id = $rootScope.currentUser.id;
            var facility_id = $rootScope.currentUser.facility_id;
            $scope.setTab = function(newTab){
                $scope.tab = newTab;
            };
            $scope.isSet = function(tabNum){
                return $scope.tab === tabNum;
            }

            $scope.ClinicQueue=function () {
                $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                    $scope.resdatas = data.data[7];

                    console.log($scope.resdatas);
                });
            }
            $scope.ClinicQueue();


            angular.element(document).ready(function () {
                $scope.setTab(1);
                $http.post('/api/getOpdPatients',{"facility_id":facility_id}).then(function(data) {
                    $scope.patientData = data.data;
                });
                $http.post('/api/investigationList',{"facility_id":facility_id}).then(function(data) {
                    $scope.patientInvData = data.data;
                });
            });
            var patientOpdPatients =[];
            $scope.showSearch = function(searchKey) {
                $http.post('/api/getAllOpdPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                    patientOpdPatients = data.data;
                });
                return patientOpdPatients;
            }
            var patientInvPatients =[];
            $scope.showSearch2 = function(searchKey) {
                console.log(searchKey)
                $http.post('/api/getAllInvPatients',{"searchKey":searchKey,"facility_id":facility_id}).then(function(data) {
                    patientInvPatients = data.data;
                });
                return patientInvPatients;
            }

            $scope.getConsultationModal = function (item) {
                var object = item;
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/clinic/TB/TBConsultationModal.html',
                    size: 'lg',
                    animation: true,
                    controller: 'opdController',
                    windowClass: 'app-modal-window',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }


            $scope.getIncomingTransferConsultationModal = function (item) {
                var object = item;
                console.log(item)
                $http.post('/api/update_referral_Incomming',item).then(function(data) {


                    if(data.data){

                        $scope.ClinicQueue();


                        var modalInstance = $uibModal.open({
                            templateUrl: '/views/modules/clinic/TB/TBConsultationModal.html',
                            size: 'lg',
                            animation: true,
                            controller: 'opdController',
                            windowClass: 'app-modal-window',
                            resolve:{
                                object: function () {
                                    return object;
                                }
                            }
                        });



                    }
                });


            }


            $scope.closeModal=function (){

                $uibModalInstance.dismiss();

            }
            $scope.getTreatmentModal = function (item) {
                var object = item;
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/treatmentModal.html',
                    size: 'lg',
                    animation: true,
                    controller: 'opdController',
                    windowClass: 'app-modal-window',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }


            $scope.Tb_report = function (item) {

                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/clinic/TB/Tb_report.html',
                    size: 'lg',
                    animation: true,
                    controller: 'Tb_data',
                    windowClass: 'app-modal-window',
                    resolve:{
                        object: function () {

                        }
                    }
                });
            }

            $scope.Tb_diagnosis=function (selectedPatient) {
                var patientAge;

                console.log(selectedPatient)
                $http.get('/api/patientAge/'+selectedPatient.dob ).then(function(data) {
                    patientAge=data.data;

                    var object ={
                        patientAge:patientAge.age,

                        patientAgeDay:patientAge.day,
                        year:patientAge.year,
                        month:patientAge.month,
                        day:patientAge.day,
                        selectedPatient:selectedPatient,
                    };
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/clinic/TB/Tb_care.html',
                        size: 'lg',
                        animation: true,
                        controller: 'Tb_data',
                        windowClass: 'app-modal-window',
                        resolve:{
                            object: function () {
                                return object;
                            }
                        }
                    });
                });


            }


            $scope.billsCancellation = function () {
                $http.post('/api/getBillList',{"facility_id":facility_id}).then(function (data) {
                    $scope.patientBill=data.data;
                });
            }
            $scope.getBillModal = function (item) {
                $http.post('/api/cancelPatientBill',{"patient_id":item.patient_id,"facility_id":facility_id}).then(function (data) {
                    var object = data.data;
                    var modalInstance = $uibModal.open({
                        templateUrl:'/views/modules/ClinicalServices/billCancellationModal.html',
                        size: 'lg',
                        animation:true,
                        controller:'opdController',
                        windowClass: 'app-modal-window',
                        resolve :{
                            object: function () {
                                return object;
                            }
                        }
                    });
                });
            }


            $scope.tb_pre_entry_registration=function (pretb,patient) {

                if(pretb==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }
                else if(pretb.client_type==undefined){
                    swal(
                        'Error',
                        'Fill Client Type Column',
                        'error'
                    )
                } else if(pretb.referral_type==undefined){
                    swal(
                        'Error',
                        'Fill Client Referral Type Column',
                        'error'
                    )
                }
                else{


                    var tbpredata={'user_id':user_id,'facility_id':facility_id,
                        'client_type':pretb.client_type,
                        'referral_type':pretb.referral_type,
                        'client_id':patient.patient_id,
                        'transfer_id':patient.transfer_id,
                    };


                    $http.post('/api/tb_pre_entry_registration',tbpredata ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            $scope.ClinicQueue();
                            $scope.resdatas = data.data;
                            swal(
                                'Success',
                                msg,
                                'success'
                            )



                        }
                    });
                }
            }
            $scope.patient_tb_type_registration=function (tbtype,patient) {

                if(tbtype==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }
                else if(tbtype.tb_type==undefined){
                    swal(
                        'Error',
                        'Fill TB Type Column',
                        'error'
                    )
                }
                else{


                    var tbtypes={'user_id':user_id,'facility_id':facility_id,
                        'tb_type':tbtype.tb_type,
                        'client_id':patient};


                    $http.post('/api/patient_tb_type_registration',tbtypes ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Success',
                                msg,
                                'success'
                            )

                        }
                    });
                }
            }


            $scope.patient_tb_sputam_registration=function (sputam,patient) {

                if(sputam==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }

                else{


                    var sputams={'user_id':user_id,'facility_id':facility_id,
                        'month':sputam.month,
                        'client_id':patient};


                    $http.post('/api/patient_tb_sputam_registration',sputams ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Success',
                                msg,
                                'success'
                            )

                        }
                    });
                }
            }

            $scope.patient_tb_treatment_types=function (treatment,patient) {

                if(treatment==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }

                else if(treatment.treatment_type_id==undefined){
                    swal(
                        'Error',
                        'Fill   Treatment Type',
                        'error'
                    )
                } else if(treatment.treatment_place==undefined){
                    swal(
                        'Error',
                        'Fill Place of Taking This Treatment',
                        'error'
                    )
                }

                else{


                    var treatments={'user_id':user_id,'facility_id':facility_id,
                        'tb_treatment_type_id':treatment.treatment_type_id,
                        'treatment_place':treatment.treatment_place,
                        'client_id':patient};


                    $http.post('/api/patient_tb_treatment_types',treatments ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Success',
                                msg,
                                'success'
                            )

                        }
                    });
                }
            }
            $scope.patient_tb_vvu_service=function (tbvvu,patient) {

                if(tbvvu==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }

                else if(tbvvu.cpt==undefined){
                    swal(
                        'Error',
                        'Fill   CPT Option',
                        'error'
                    )
                }
                else{


                    var treatments={'user_id':user_id,'facility_id':facility_id,
                        'cpt':tbvvu.cpt,
                        'cpt_start_date':tbvvu.cpt_start_date,
                        'art_start_date':tbvvu.art_start_date,
                        'client_id':patient};


                    $http.post('/api/patient_tb_vvu_service',treatments ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Success',
                                msg,
                                'success'
                            )

                        }
                    });
                }
            }
            $scope.tb_patient_medication_followups=function (tbmedfollow,patient) {

                if(tbmedfollow==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }

                else if(tbmedfollow.month==undefined){
                    swal(
                        'Error',
                        'Fill   Patient Medication Attending Month  Option',
                        'error'
                    )
                }
                else{


                    var tbmedfollows={'user_id':user_id,'facility_id':facility_id,
                        'month':tbmedfollow.month,
                        'remark':tbmedfollow.remark,

                        'client_id':patient};


                    $http.post('/api/tb_patient_medication_followups',tbmedfollows ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Success',
                                msg,
                                'success'
                            )

                        }
                    });
                }
            }
            $scope.Tbl_tb_patient_treatment_outputs=function (tboutput,patient) {

                if(tboutput==undefined){
                    swal(
                        'Error',
                        'Fill All Fields In This Section',
                        'error'
                    )
                }

                else if(tboutput.output==undefined){
                    swal(
                        'Error',
                        'Fill   TB Medication Output',
                        'error'
                    )
                }
                else{


                    var tboutputs={'user_id':user_id,'facility_id':facility_id,
                        'output':tboutput.output,
                        'comment':tboutput.comment,


                        'client_id':patient};


                    $http.post('/api/Tbl_tb_patient_treatment_outputs',tboutputs ).then(function(data) {
                        var sending = data.data;
                        var msg = data.data.msg;
                        if (data.data.status == 0) {
                            swal(
                                'Error',
                                msg,
                                'error'
                            )
                        }
                        else {
                            swal(
                                'Success',
                                msg,
                                'success'
                            )

                        }
                    });
                }
            }
            $scope.closeModalTbCare=function (){

                $uibModalInstance.dismiss();

            }
            $http.get('/api/treatment_types' ).then(function(data) {
                $scope.treatment_types=data.data;
            });
            //--------------------------------------z score............................................






            //--------------------------------------z score............................................



        }]);

})();

/**
 * Created by USER on 2017-05-20.
 */
/**
 * Created by USER on 2017-04-16.
 */
/**
 * Created by Jeph on 2017-03-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('Tb_data',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.tbs = object.selectedPatient;
            console.log( $scope.tbs )
            $scope.patientAge = object.patientAge;
            $scope.year = object.year;
            $scope.month = object.month;
            $scope.day = object.day;

            var user_id = $rootScope.currentUser.id;
            var facility_id=$rootScope.currentUser.facility_id;

            $('#clientAge').val(user_id);
            $scope.closeModalTbCare=function (){
                 
                $uibModalInstance.dismiss();

            }


        }]);
})();

/**
 * Created by USER on 2017-05-22.
 */

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

    angular
        .module('authApp')
        .controller('VctController', VctController);

    function VctController($http, $auth, $rootScope,$state,$location,$scope,$timeout,$uibModal) {
        $scope.setTab = function(newTab){
            $scope.tab = newTab;
        };
        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime=true;
        //loading menu
        var user_id=$rootScope.currentUser.id;
        var  facility_id=$rootScope.currentUser.facility_id;
        var resdata=[];

        $http.get('/api/getUsermenu/'+user_id ).then(function(data) {
            $scope.menu=data.data;
        });

        $scope.department_list=function () {

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;

            });
        }

        $scope.showSearch = function(searchKey) {


            $http.get('/api/searchClinicpatientFromDb/'+searchKey).then(function(data) {
                resdata = data.data;
            });


            return resdata;


        }
        $scope.ClinicQueue=function () {
            $http.get('/api/searchClinicpatientQueue/'+facility_id).then(function(data) {
                $scope.resdatas = data.data[0];


            });
        }
        $scope.ClinicQueue();

        $scope.vct_registration=function (vct,patient) {

            if(vct==undefined){
                swal(
                    'Error',
                    'Fill All Fields In This Section',
                    'error'
                )
            }
            else if(vct.attendance_type==undefined){
                swal(
                    'Error',
                    'Fill Client Attendance Type Column',
                    'error'
                )
            } else if(vct.client_from==undefined){
                swal(
                    'Error',
                    'Fill Place where Client is From',
                    'error'
                )
            }
            else{

                console.log(patient.account_id)
var visit_id;
                if(patient.account_id == undefined){

                    visit_id=patient.visit_id;
                }
                else if(patient.visit_id ==undefined){
                        visit_id=patient.account_id;

                }

                var vcts={'user_id':user_id,'facility_id':facility_id,
                    'attendance_type':vct.attendance_type,
                    'serial_no':11,
                    'client_from':vct.client_from, 'client_from_other':vct.client_from_other,
                    'pregnancy_record':vct.pregnancy_record, 'referral_to':vct.referral_to,
                    'referral_to_other':vct.referral_to_other, 'counselling_type':vct.counselling_type,
                    'agreed_vvu_test':vct.agreed_vvu_test, 'counselling_after_test':vct.counselling_after_test,
                    'vvu_test_result':vct.vvu_test_result, 'participatory_test_result':vct.participatory_test_result,
                    'tb_test':vct.tb_test, 'tb_test_result':vct.tb_test_result,
                    'condom_given':vct.condom_given, 'comment':vct.comment,
                    'client_id':patient.patient_id,
                    'transfer_id':patient.transfer_id,
                    'visit_id':visit_id,
                };
console.log(vcts) ; 

                $http.post('/api/vct_registration',vcts ).then(function(data) {
                    var sending = data.data;
                    var msg = data.data.msg;
                    if (data.data.status == 0) {
                        swal(
                            'Error',
                            msg,
                            'error'
                        )
                    }
                    else {

                        swal(
                            'Success',
                            msg,
                            'success'
                        )

                    }
                });
            }
        }

        $scope.closeModal=function (){

            $uibModalInstance.dismiss();

        }

        $scope.getConsultationModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/VCT/Vct_care.html',
                size: 'lg',
                animation: true,
                controller: 'Vct_data',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
        var patientAge;

        $scope.Vct_diagnosis=function (selectedPatient) {

             
            $scope.ClinicQueue();
            $http.get('/api/patientAge/'+selectedPatient.dob ).then(function(data) {
                patientAge=data.data;

                var object ={
                    patientAge:patientAge.age,

                    patientAgeDay:patientAge.day,
                    year:patientAge.year,
                    month:patientAge.month,
                    day:patientAge.day,
                    selectedPatient:selectedPatient,
                };
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/clinic/VCT/Vct_care.html',
                    size: 'lg',
                    animation: true,
                    controller: 'Vct_data',
                    windowClass: 'app-modal-window',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            });


        }


        $scope.getIncomingTransferConsultationModal = function (item) {
            var object = item;
            console.log(item)
            $http.post('/api/update_referral_Incomming',item).then(function(data) {
                var object ={

                    selectedPatient:item,
                };

                if(data.data){

                    $scope.ClinicQueue();



                        var modalInstance = $uibModal.open({
                            templateUrl: '/views/modules/clinic/VCT/Vct_care.html',
                            size: 'lg',
                            animation: true,
                            controller: 'Vct_data',
                            windowClass: 'app-modal-window',
                            resolve:{
                                object: function () {
                                    return object;
                                }
                            }
                        });




                }
            });


        }




        $scope.Vct_report=function () {

            var object={name:user_id}
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/VCT/Vct_report.html',
                size: 'lg',
                animation: true,
                controller: 'Vct_data',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });



        }

    }

})();
/**
 * Created by USER on 2017-03-08.
 */

/**
 * Created by USER on 2017-05-22.
 */
/**
 * Created by USER on 2017-05-20.
 */
/**
 * Created by USER on 2017-04-16.
 */
/**
 * Created by Jeph on 2017-03-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('Vct_data',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.tbs = object.selectedPatient;
            $scope.deepartments = object.Department;

            $scope.patientAge = object.patientAge;
            $scope.year = object.year;
            $scope.month = object.month;
            $scope.day = object.day;

            var user_id = $rootScope.currentUser.id;
            var facility_id=$rootScope.currentUser.facility_id;

            $http.get('/api/department_list').then(function(data) {
                $scope.departments=data.data;
                console.log( $scope.deepartments )

            });

            $scope.closeModal=function (){

                $uibModalInstance.dismiss();

            }

        }]);
})();

/**
 * Created by USER on 2017-02-13.
 */
(function() {

    'use strict';

       angular.module('authApp').controller('ctcController',ctcController);

    function ctcController($http, $auth, $rootScope,$state,$location,$scope,$uibModal,toastr,$filter) {
				  var facility_id =$rootScope.currentUser.facility_id;
				  var user_id =$rootScope.currentUser.id;
        $scope.mytime1 = new Date();
        $scope.mytime2 = new Date();
        $scope.regex=/\s/g;



        $scope.showWeekDay=function (dt) {

            var dateSelected = $filter('date')(dt,'yyyy-MM-dd');
            var today = $filter('date')(new Date(),'yyyy-MM-dd');
            var postData={"selectedDate":dateSelected,"facility_id":facility_id,"user_id":user_id};
            $http.post('/api/ctcSheduleTimeTable',postData).then(function (data) {

                if(data.data.status ==0){
                    $scope.getClinicSchedulesCtc();
                    toastr.error('',data.data.data);
                }else{
                    $scope.getClinicSchedulesCtc();
                    toastr.success('',data.data.data);
                  }

            });


        }





        $scope.giveAppointmentCtc=function (dt,ctcQues) {
           console.log(ctcQues);
            var visit_id=ctcQues.visit_id;
            var refferal_id=ctcQues.refferal_id;
            var dateSelected = $filter('date')(dt,'yyyy-MM-dd');
            var today = $filter('date')(new Date(),'yyyy-MM-dd');
            var postData={"refferal_id":refferal_id,"visit_id":visit_id,"selectedDate":dateSelected,"facility_id":facility_id,"user_id":user_id};
            $http.post('/api/giveAppointmentCtc',postData).then(function (data) {

                if(data.data.status ==0){
                    $scope.getClinicAttendanceForPatient(ctcQues);
                    toastr.error('',data.data.data);
                }else{
                    $scope.getClinicAttendanceForPatient(ctcQues);
                    toastr.success('',data.data.data);
                  }

            });


        }


        $scope.getClinicSchedulesCtc= function () {
           $http.get('/api/getCtcSheduleTimeTable/'+facility_id).then(function (data) {
            $scope.getClinicSchedules=data.data;
            console.log($scope.getClinicSchedules);
            });
           }


  $scope.getClinicAttendanceForPatient= function (ctcQues) {
           var refferal_id=ctcQues.refferal_id;
           $http.get('/api/getClinicAttendanceForPatient/'+refferal_id).then(function (data) {
            $scope.getClinicAttendanceForPatients=data.data;
              });
           }


        $scope.AdmissionNotes="";
				  var resdata =[];
				   var nextresdata =[];
				   var patientCategory =[];
				   var patientService =[];
				   var patientsList=[];
				   var maritals=[];
                   var tribe=[];
				   var occupation=[];				   
				   var country=[];				   
				   var relationships=[];	
				   
				     angular.element(document).ready(function () {
                         $scope.setTabReception(1);
                             });



        $http.get('/api/getUsermenu/' + user_id).then(function (data) {
            $scope.menu = data.data;
        });


		
		$scope.setTabClinicDays = function(newTab){
            $scope.tab = newTab;
            $scope.getClinicSchedulesCtc();

        };

		$scope.setTabVitalSigns = function(newTab){
            $scope.getctcApprovedCustomers();
            $scope.tab = newTab;


        };

		$scope.setTabFamilyInformation = function(newTab){
            $scope.getctcApprovedCustomers();
            $scope.tab = newTab;

        };

		$scope.setTabLabInvestigations = function(newTab){
            $scope.tab = newTab;

        };

$scope.setTabTreatmentCtc = function(newTab){
            $scope.tab = newTab;

        };

		$scope.setTabDiscussionTopics = function(newTab){
            $scope.tab = newTab;
            $scope.getClinicSchedulesCtc();

        };


        $scope.setTabReception = function(newTab){
            $scope.tab = newTab;
            $scope.getctcPendingCustomers();
                   };

        $scope.setTabRecordForm = function(newTab){
            $scope.tab = newTab;
            $scope.getctcPendingCustomers();

        };

       $scope.setTabClinicSetup = function(newTab){
            $scope.tab = newTab;
                 };

       $scope.setTabAppointment = function(newTab){
            $scope.tab = newTab;

      };

       $scope.addClinCapacity = function(clinic_capacity){
         var postData={"facility_id":facility_id,"user_id":user_id,"clinic_name_id":8,"capacity":clinic_capacity};
           $http.post('/api/addClinCapacity',postData).then(function(data) {

               if(data.data.status ==0){
                   toastr.error('',data.data.data);
               }else{
                   toastr.success('',data.data.data);
               }


           });

      }
        $scope.getRelationships= function (searchKey) {

            $http.get('/api/getRelationships/'+searchKey).then(function(data) {
                relationships=data.data;
            });
            return relationships;
        }


        $scope.showSearchMarital= function (searchKey) {

            $http.get('/api/getMaritalStatus/'+searchKey).then(function(data) {
                maritals=data.data;

            });
            console.log(maritals);
            return maritals;
        }

        $scope.showSearchResidences= function(searchKey) {

            $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                nextresdata= data.data;
            });
            //console.log(resdata);
            return nextresdata;
        }



        $scope.patient_quick_registration=function (patient) {
            if (angular.isDefined(patient)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }
            var first_name=patient.first_name;
            var middle_name=patient.middle_name;
            var last_name=patient.last_name;
            var gender=patient.gender;
            var dob=patient.dob;
            var mobile_number=patient.mobile_number;
            var marital=patient.marital.id;



             if (angular.isDefined(first_name)==false) {
                return sweetAlert("Please Enter FIRST NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(middle_name)==false) {
                return sweetAlert("Please Enter MIDDLE NAME before SAVING", "", "error");
            }

            else if (angular.isDefined(last_name)==false) {
                return sweetAlert("Please Enter LAST NAME before SAVING", "", "error");
            }
            else if (angular.isDefined(patient.resedence_id)==false) {
                return sweetAlert("Please type the Residence Name and choose from the suggestions", "", "error");
            }
            var patient_residences=patient.resedence_id.residence_id;
            var quick_registration={"marital_status":marital,"first_name":first_name,"middle_name":middle_name,"last_name":last_name,"dob":dob,"gender":gender,"mobile_number":mobile_number,"residence_id":patient_residences,"facility_id":facility_id,"user_id":user_id}


            $http.post('/api/ctc_registration',quick_registration).then(function(data) {
                $scope.quick_registration=data.data;
                console.log($scope.quick_registration);
                if(data.data.status ==0){

                    sweetAlert(data.data.data, "", "error");
                }else{
                    var patientData = data.data[0];
                    var accounts_number = data.data[1][0];
                    var residences = data.data[2][0];
                    var getLastVisit= data.data[3];

                    //$scope.getCTCModal(patientData);

                    var object={'patientData':patientData,'accounts_number':accounts_number,'residences':residences,'getLastVisit':getLastVisit};
                    $scope.patient = null;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/views/modules/clinic/ctc/encounterModal.html',
                        size: 'lg',
                        animation: true,
                        controller: 'ctcRegistrationModal',
                        resolve:{
                            object: function () {
                                console.log(object);
                                return object;
                            }
                        }


                    });

                }
            });



        }


        $scope.saveFamilyInfo = function(family,ctcQues){
           var patient_id=ctcQues.patient_id;
         var postData={"patient_id":patient_id,"facility_id":facility_id,"user_id":user_id,"relative_name":family.name,"relation_id":family.relation.id,"age":family.age,"hiv_status":family.hiv_status,"hiv_care":family.hiv_care,"unique_ctc_number":family.ctc_id,"health_facility_file":family.health_facility_file};
           $http.post('/api/saveFamilyInfo',postData).then(function(data) {
               if(data.data.status ==0){
                   toastr.error('',data.data.data);
               }else{
                   toastr.success('',data.data.data);
               }


           });

      }
       $scope.setTabDoctors = function(newTab){
            $scope.tab = newTab;
            toastr.success('','Doctor...');
       }

        $scope.printVitals= function(ctcApprovedCustomer) {

            $http.get('/api/getVitals').then(function(data) {
                $scope.selectedPatient =ctcApprovedCustomer;
                console.log($scope.selectedPatient);
                $scope.Vitals = data.data;
            });
        }



        $scope.vitalRegister = function(visit_id) {
            var VitalData = [];
            var field_id;
            $scope.Vitals.forEach(function (vital) {
                field_id = vital.vital_name.replace($scope.regex, '_');
                if ($('#' + field_id).val() != '') {
                    VitalData.push({
                        'vital_sign_id': vital.vital_id,
                        'vital_sign_value': $('#' + field_id).val(),
                        'patient_id':visit_id,
                        'registered_by':user_id
                    });
                    $('#' + field_id).val('');
                }
            })

            console.log(VitalData);

            if (VitalData.length > 0) {
                $http.post('/api/CtcVitalSignRegister', VitalData).then(function (data) {
                    var msg = data.data.msg;
                    var notification = data.data.notification;
                    var status = data.data.status;
                    if (status == 0) {
                        toastr.error(notification, msg);
                    }
                    else {
                        toastr.success(notification, msg);



                    }
                });
            }
        }

        $scope.getCTCModal= function(ctcPendingCustomer) {
            var object =ctcPendingCustomer;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/ctc/visiting_ctc_reg.html',
                size: 'lg',
                animation: true,
                windowClass: 'app-modal-window',
                controller: 'ctcPatientQues',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

        }


        $scope.getCTCModalClerksheet= function(ctcPendingCustomer) {
            var object =ctcPendingCustomer;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/ctc/clerk_ctc_reg.html',
                size: 'lg',
                animation: true,
                windowClass: 'app-modal-window',
                controller: 'ctcPatientQues',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

        }

        $scope.patientAppointment= function(PatientSelected) {
            var object =PatientSelected;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/ctc/appointment.html',
                size: 'lg',
                animation: true,
                windowClass: 'app-modal-window',
                controller: 'ctcPatientQues',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

        }

  $scope.patientFamilyInfo= function(ctcApprovedCustomer) {
            var object =ctcApprovedCustomer;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/ctc/patient_relations.html',
                size: 'lg',
                animation: true,
                windowClass: 'app-modal-window',
                controller: 'ctcPatientQues',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });

        }



        $scope.getctcPendingCustomers = function() {
             $http.get('/api/ctcPendingCustomers/'+facility_id).then(function (data) {
                $scope.ctcPendingCustomers = data.data;
            });
        }

        $scope.getctcApprovedCustomers = function() {
             $http.get('/api/ctcApprovedCustomers/'+facility_id).then(function (data) {
                $scope.ctcApprovedCustomers = data.data;
            });
        }

        $scope.deleteClinicDay= function(getClinicSchedule) {
              var clinicDayId=getClinicSchedule.id;
              var clinicDay=getClinicSchedule.week_day;
             $http.get('/api/deleteDayId/'+clinicDayId).then(function (data) {
                 $scope.getClinicSchedulesCtc();
                 toastr.success('',clinicDay+' was successfully Deleted');
            });
        }


        $scope.isSet = function(tabNum){
            return $scope.tab === tabNum;
        }
        $scope.oneAtATime = true;
				   		   
						   
						













		var patapata="";
		 $scope.getAdmissionNotes= function (patient) {
            $http.post('/api/getInstructions',{"patient_id":patient}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });

            }

			$scope.giveBed= function (bed_id,last_name,ward_id,admission_id,bed_available) {

				 // sweetAlert(bed_id+' '+bed_available, "", "success");
				 console.log(admission_id);

            $http.post('/api/giveBed',{"bed_id":bed_id,"ward_id":ward_id,"admission_id":admission_id,"bed_available":bed_available}).then(function(data) {
            $scope.giveBeds=data.data;
			console.log($scope.giveBeds);

			if(data.data.status ==0){
					 sweetAlert(data.data.data, "", "error");
				  }else{
					  var bed_details=bed_available+ ' SUCCESSFULLY ASSIGNED TO '+last_name;
                    sweetAlert(bed_details, "", "success");

				  }


			          });


            }


		 $scope.getAdmPatient= function (admitted) {
			 $scope.selectedPatient=admitted;
			 console.log($scope.selectedPatient);
		 }

		 $scope.getPatientsSentToTheatre= function () {

			$http.get('/api/getPatientSentToTheatre').then(function(data){
            $scope.patientsSentToTheatres=data.data;
			   });
		 }


			 
			 $scope.getAdmission= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.post('/api/getInstructions',{"patient_id":patient,"ward_id":ward_id}).then(function(data) {
            $scope.AdmissionNotes=data.data;
			patapata=$scope.AdmissionNotes;
			console.dir($scope.AdmissionNotes);
			          });
					  
            $http.get('/api/getPatientInfo/'+patient).then(function(data) {
            $scope.quick_registration=data.data;
			
						
             var object = angular.extend({}, $scope.quick_registration, patapata);        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/bedAllocation.html',
				  size: 'lg',
				  animation: true,
				  controller: 'nursingCareModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
				modalInstance.result.then(function(quick_registration) {
                $scope.quick_reg = quick_registration;
			    console.log($scope.quick_reg);
                });	
			
            });
			
			  }	



			  $scope.assignToTheatre= function (patient,ward_id,admission_id) {
			 
						 
            		 
	$http.get('/api/getFullAdmitedPatientInfo/'+admission_id).then(function(data) {
            $scope.admissions=data.data;
			    console.log(data.data);
				console.log(admission_id);		
             var object = $scope.admissions;        
			 var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/nursing_care/postPatientsToTheatre.html',
				  size: 'lg',
				  animation: true,
				  controller: 'postPatientsToTheatreModal',
				  resolve:{
                  object: function () {
					         return object;
                  }
                  }				  
                  });
				
					
			
            });
			
			  }
			  
			 	 
			  
		
				

    }

})();

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('ctcPatientQues',
                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance','toastr', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,toastr,object) {
           $scope.ctcQues=object;
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;


			$scope.cancel=function (){
				$uibModalInstance.dismiss();
			
			}

                  var resdata=[];
            $scope.showSearchResidences = function(searchKey) {

                $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                    resdata = data.data;
                });
                //console.log(resdata);
                return resdata;
            }
            $scope.saveCTCNewAttendance=function (patient,ctcQues) {
				console.log(ctcQues);
				var patient_id=ctcQues.patient_id;
				var last_name=ctcQues.last_name;
                if (angular.isDefined(patient)==false) {
                    return toastr.error('','ENTER UNIQUE CTC ID NUMBER  FOR '+last_name);
                }
                else if(angular.isDefined(patient.address)==false){
                    return toastr.error('','SELECT STREET/VILLAGE FOR '+last_name);
                }
				var unique_id=patient.unique_id;
				var withrecords=patient.withrecords;
				var ten_cell_leaders=patient.ten_cell_leaders;
				var street=patient.street;
				var on_art=patient.on_art;
				var no_records=patient.no_records;
				var in_care=patient.in_care;
				var head_household=patient.head_household;
				var contact_household=patient.contact_household;
				var address=patient.address.residence_id;

                var postData={"on_off":1,"last_name":last_name,"patient_id":patient_id,"residence_id":address,"contact_house_hold_head":contact_household,"name_head_house_hold":head_household,"in_care":in_care,"no_records":no_records,"on_art":on_art,"street":street,"name_ten_cell_leader":ten_cell_leaders,"facility_id":facility_id,"user_id":user_id,"unique_ctc_number":unique_id,"withrecords":withrecords};
                $http.post('/api/saveCtCRegistration',postData).then(function(data) {
                    if(data.data.status ==0){
                        toastr.error('',data.data.data);
                    }else{
                        toastr.success('',data.data.data);
                        $scope.cancel();
                        var object ={'patient':patient,'ctcQues':ctcQues};
                        var modalInstance = $uibModal.open({
                            templateUrl: '/views/modules/clinic/ctc/ctc_patient_suport.html',
                            size: 'lg',
                            animation: true,
                            windowClass: 'app-modal-window',
                            controller: 'ctcPatientSupport',
                            resolve:{
                                object: function () {
                                    return object;
                                }
                            }
                        });
                    }


                });

            }

			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('ctcPatientSupport',
        ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance','toastr', 'object',
            function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,toastr,object) {

                var facility_id =$rootScope.currentUser.facility_id;
                var user_id =$rootScope.currentUser.id;
                $scope.ctcQues=object.ctcQues;
                $scope.patient=object.patient;
                       $scope.cancel=function (){
                    console.log('done and cleared');
                    $uibModalInstance.dismiss();

                }

                var resdata=[];
                $scope.showSearchResidences = function(searchKey) {

                    $http.get('/api/searchResidences/'+searchKey).then(function(data) {
                        resdata = data.data;
                    });
                    //console.log(resdata);
                    return resdata;
                }

                $scope.closeAllModals=function (){
                   // console.log('done and cleared');
                    $uibModalInstance.dismissAll();

                }

                    $scope.saveCTCPatientSupport=function (patient_support,ctcQues){
                        var patient_id=ctcQues.patient_id;
                        var last_name=ctcQues.last_name;
                        var visit_id =ctcQues.visit_id;
                        var  joined_organisation = 0;
                        if (angular.isDefined(patient_support)==false) {
                            return toastr.error('','ENTER NAME OF TREATMENT SUPPORTER  FOR '+last_name);
                        }
                        var treatment_supporter=patient_support.treatment_supporter;
                        var phone_supporter=patient_support.phone_supporter;
                        var patient_visit=patient_support.patient_visit;
                        var yes=patient_support.yes;
                        var no=patient_support.no;
                        if(angular.isDefined(no)==false){
                           var  joined_organisation =  1;
                        }
                        var organisation=patient_support.organisation;
                        var postData={"visit_date_id":visit_id,"on_off":1,"last_name":last_name,"patient_id":patient_id,"name_treatment_supporter":treatment_supporter,"telephone_number":phone_supporter,"visit_type_code":patient_visit,"joined_organisation":joined_organisation,"name_organisation":organisation,"facility_id":facility_id,"user_id":user_id};
                        console.log(postData);
                        $http.post('/api/saveCTCPatientSupport',postData).then(function(data) {
                            if(data.data.status ==0){
                                toastr.error('',data.data.data);
                            }else{
                                toastr.success('',data.data.data);
                                $scope.cancel();


                            }


                        });

                }

            }]);





}());

(function () {

    'use strict';

    var app = angular
		.module('authApp')

    app.controller('ctcRegistrationModal',

                ['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            	console.log(object);
    	        $scope.patientData=object.patientData;
			    $scope.accounts_number=object.accounts_number;
			    $scope.residences=object.residences;
			    $scope.getLastVisit=object.getLastVisit;

            $scope.enterCtcEncounter=function (patientData,residences,encounter,patient,facility_id) {

				
				  if (angular.isDefined(encounter)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }	
				  else if (angular.isDefined(encounter.payment_category)==false) {
                   return sweetAlert("Please Type the Payment Category", "", "error");
                  }					  			 			  
				  else if (angular.isDefined(encounter.payment_services)==false) {
                   return sweetAlert("Please Select Service", "", "error");
                  }				  
				  else{
                   

				  var patient_category=encounter.payment_category.patient_category;			  
				  var service_category=encounter.payment_services;
				  var service_id=encounter.payment_services.service_id;
				  var price_id=encounter.payment_services.price_id;		
				  var item_type_id=encounter.payment_services.item_type_id;		
				  var patient_id=patient;		
				  var facility_id=facility_id;		
				  var user_id=$rootScope.currentUser.id;	 
				  var payment_filter=encounter.payment_category.patient_category_id;

                 var bill_category_id=encounter.payment_category.patient_category_id;
                 var main_category_id=encounter.payment_category.patient_main_category_id;
 				  
				  var enterEncounter={'payment_filter':payment_filter,'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
				  'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};
				 console.log(enterEncounter)
				 $http.post('/api/enterCtcEncounter',enterEncounter).then(function(data) {
						  $scope.registrationReport=data.data;
	
                  if(data.data.status ==0){
					 
					 sweetAlert(data.data.data, "", "error");
				  }else{
                 	var object={'patientsInfo':patientData,'residences':residences};
                      $scope.cancel();
					    var modalInstance = $uibModal.open({
				  templateUrl: '/views/modules/registration/printCard.html',
				  size: 'lg',
				  animation: true,
				  controller: 'printCard',
				  resolve:{
                      object: function () {
					  //console.log($scope.quick_registration);
                  return object;
                  }
                  }

				  
                  });
					  
					//sweetAlert(data.data.data, "", "success"); 
                    //enterEncounter='';					
				  }
				  
				  
					  });
				 
				 
					
		   }
			}


			// exemptions===============================================================
/*
			$scope.exemption_registration=function (exempt,patient) {

				console.log(patient,exempt)
				var status_id = 2;
				var reason_for_revoke = "..";



				if(exempt==undefined){
					swal(
						'Feedback..',
						'FILL ALL FIELDS',
						'error'
					)

				}
				else if(patient==undefined){
					swal(
						'Feedback..',
						'Please Select Client from a Search Box above...',
						'error'
					)

				}
				else if (exempt.exemption_type_id==undefined ){
					swal(
						'Feedback..',
						'Please Select Exemption Category ',
						'error'
					)
				}

				else if (exempt.exemption_reason==undefined){
					swal(
						'Feedback..',
						'Please Fill  Reason(s) for This exemption ',
						'error'
					)
				}
				else if (exempt.service==undefined){
					swal(
						'Feedback..',
						'Please Choose Service ',
						'error'
					)
				}



				else{

					var patient_category=exempt.service.patient_category;
					var service_category=exempt.service;
					var service_id=exempt.service.service_id;
					var price_id=exempt.service.price_id;
					var item_type_id=exempt.service.item_type_id;
					var patient_id=patient;
					var facility_id=exempt.service.facility_id;
					var user_id=$rootScope.currentUser.id;

					var bill_category_id=exempt.exemption_type_id;
					var main_category_id=3;

					var enterEncounter={'item_type_id':item_type_id,'patient_category':patient_category,'main_category_id':main_category_id,'bill_id':bill_category_id,
						'service_category':service_category,'service_id':service_id,'price_id':price_id,'patient_id':patient_id ,'facility_id':facility_id,'user_id':user_id};


					var status_id=2;
					var patient= patient;
					var exemption_type_id= exempt.exemption_type_id;
					var exemption_reason= exempt.exemption_reason;
					var user_id= $rootScope.currentUser.id;
					var facility_id= $rootScope.currentUser.facility_id;
					var patient_id= patient;
					var status_id= status_id;
					var exemption_type_id=exempt.exemption_type_id;
					var exemption_reason= exempt.exemption_reason;
					var reason_for_revoke= reason_for_revoke;
					var description=exempt.description;

					formdata.append('exemption_type_id',exemption_type_id);
					formdata.append('exemption_reason',exemption_reason);
					formdata.append('user_id',user_id);
					formdata.append('facility_id',facility_id);
					formdata.append('patient_id',patient_id);
					formdata.append('reason_for_revoke',reason_for_revoke);
					formdata.append('status_id',status_id);
					var request = {
						method: 'POST',
						url: '/api/'+'patient_exemption',
						data: formdata,
						headers: {
							'Content-Type': undefined
						}

					};

					// SEND THE FILES.
					$http(request).then(function (data) {

							var msg = data.data.msg;
							$scope.ok = data.data.status;
							//console.log(data.data.status);
							var statuss = data.data.status;

							$http.post('/api/enterEncounter',enterEncounter).then(function(data) {
								$scope.registrationReport=data.data;

								if(data.data.status ==0){

									sweetAlert(data.data.data, "", "error");
								}else{

									$http.get('/api/getPatientInfo/'+patient_id).then(function(data) {
										$scope.patientsInfo=data.data;
									});

									var modalInstance = $uibModal.open({
										templateUrl: '/views/modules/registration/printCard.html',
										size: 'lg',
										animation: true,
										controller: 'printCard',
										resolve:{
											patientData: function () {
												//console.log($scope.quick_registration);
												return $scope.patientData;
											}
										}


									});

									//sweetAlert(data.data.data, "", "success");
									//enterEncounter='';
								}


							});

						})
						.then(function () {
						});



				}
			}





			// exemptions===============================================================

*/




			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

(function () {

    'use strict';

    var app = angular.module('authApp');

    app.controller('ctcSetup',

                ['$filter','$scope','$http','$rootScope','$uibModal', '$uibModalInstance',
        function ($filter,$scope,$http,$rootScope,$uibModal,$uibModalInstance,toastr) {
            var facility_id =$rootScope.currentUser.facility_id;
            var user_id =$rootScope.currentUser.id;

            angular.element(document).ready(function () {
                $scope.setTabReception(1);
            });

            $scope.setTabReception = function(newTab){
                $scope.tab = newTab;
                toastr.success('','CARE AND TREATMENT CLINIC...');


            };

            $scope.setTabRecordForm = function(newTab){
                $scope.tab = newTab;
                 toastr.success('','RECORD FORM CTC...');


            };

            $scope.setTabClinicSetup = function(newTab){
                $scope.tab = newTab;
                toastr.success('','Setup...');


            };

            $scope.isSet = function(tabNum){
                return $scope.tab === tabNum;
            }
            $scope.oneAtATime = true;


            $scope.today = function() {
    $scope.dt = new Date();
  };
  $scope.today();

  $scope.clear = function() {
    $scope.dt = null;
  };

  $scope.options = {
    customClass: getDayClass,
    minDate: new Date(),
    showWeeks: true
  };

  // Disable weekend selection
  function disabled(data) {
    var date = data.date,
      mode = data.mode;
    return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
  }

  $scope.toggleMin = function() {
    $scope.options.minDate = $scope.options.minDate ? null : new Date();
  };

  $scope.toggleMin();

  $scope.setDate = function(year, month, day) {
    $scope.dt = new Date(year, month, day);
  };







			
			$scope.cancel=function (){
				console.log('done and cleared');
			$uibModalInstance.dismiss();
			
			}
			
			
			$scope.closeAllModals=function (){
				console.log('done and cleared');
			$uibModalInstance.dismissAll();
			
			}

        }]);
		
		
		
		
		
}());

/**
 * Created by Jeph on 2017-07-19.
 */
(function () {
    'use strict';
    var app = angular.module('authApp');
    app.controller('vitalSigns',['$scope','$http','$rootScope','$uibModal', '$uibModalInstance', 'object',
        function ($scope,$http,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.vitalQue = object.vitalQue;
            $scope.Vitals = object.Vitals;
            var user_id = $rootScope.currentUser.id;
            var facility_id=$rootScope.currentUser.facility_id;





        }]);
})();

/**
 * Created by Mazigo Jr on 2017-05-22.
 */
(function () {
    'use strict';
    var app =  angular.module('authApp');
    app.controller('dentalController',['$scope','$http','$state','$rootScope','$uibModal','$uibModalInstance','object',
        function ($scope,$http,$state,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.selectedPatient = object;
            var user_id = $rootScope.currentUser.id;
            var facility_id = $rootScope.currentUser.facility_id;
            var patient_id = object.patient_id;
            $scope.setTab = function(newTab){
                $scope.tab = newTab;
            };
            $scope.isSet = function(tabNum){
                return $scope.tab === tabNum;
            }
            $scope.closeModal = function () {
                $uibModalInstance.dismiss();
            }
            $scope.removeFromSelection = function(item,objectdata){
                var indexremoveobject = objectdata.indexOf(item);
                objectdata.splice(indexremoveobject,1);
            }
            $scope.templates = [
                {   name: 'Admission',
                    url: 'admission.html'},
                {
                    name: 'Internal Referral',
                    url: 'internal.html'},
                {
                    name: 'External Referral',
                    url: 'referral.html'},
                {
                    name: 'Deceased',
                    url: 'deceased.html'}
            ];
//Previous History
            angular.element(document).ready(function () {
                $scope.setTab(1);
                $http.post('/api/previousVisits',{"patient_id":patient_id}).then(function (data) {
                    $scope.patientsVisits = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":3}).then(function (data) {
                    $scope.radiology = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":2}).then(function (data) {
                    $scope.labInvestigations = data.data;
                });
            });
            $scope.getPatientReport = function (item) {

                $http.post('/api/prevHistory',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevHistory = data.data;
                });
                $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevDiagnosis = data.data;
                });
                $http.post('/api/getPrevRos',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevRos = data.data;
                });
                $http.post('/api/getPrevBirth',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevBirth = data.data;
                });
                $http.post('/api/getPrevObs',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevObs = data.data;
                });
                $http.post('/api/getPrevFamily',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevFamily = data.data;
                });
                $http.post('/api/getPrevPhysical',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevPhysical = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":2}).then(function (data) {
                    $scope.labInvestigationsz = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":3}).then(function (data) {
                    $scope.radiologyResults = data.data;
                });
                $http.post('/api/getPastMedicine',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                $http.post('/api/getPastProcedures',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.pastProcedures = data.data;
                });
                $http.post('/api/getAllergies',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.allergies = data.data;
                });

            }
            //chief complaints
            var chiefComplaints = [];
            $scope.complaints = function (search) {
                $http.post('/api/chiefComplaints',{"search":search}).then(function (data) {
                    chiefComplaints = data.data;
                });
                return chiefComplaints;
            }
            //review of systems
            var cardiovascular = [];
            $scope.showCardio = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Cardiovascular"}).then(function (data) {
                    cardiovascular = data.data;
                });
                return cardiovascular;
            }
            var Respiratory = [];
            $scope.showRespiratory = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Respiratory"}).then(function (data) {
                    Respiratory = data.data;
                });
                return Respiratory;
            }
            var gatro = [];
            $scope.showGastro = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Gastrointerstinal"}).then(function (data) {
                    gatro = data.data;
                });
                return gatro;
            }
            var musculo = [];
            $scope.showMusculo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Musculoskeletal"}).then(function (data) {
                    musculo = data.data;
                });
                return musculo;
            }
            var genito = [];
            $scope.showGenito = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Genitourinary"}).then(function (data) {
                    genito = data.data;
                });
                return genito;
            }
            var cns = [];
            $scope.showCNS = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Central Nervous System"}).then(function (data) {
                    cns = data.data;
                });
                return cns;
            }
            var endo = [];
            $scope.showEndo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Endocrine"}).then(function (data) {
                    endo = data.data;
                });
                return endo;
            }
            var allergy = [];
            $scope.showAllergy = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Allergy"}).then(function (data) {
                    allergy = data.data;
                });
                return allergy;
            }
            var pastMed = [];
            $scope.showMedication = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Medication"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }

            var pastMed = [];
            $scope.showIllness = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Past Medical History"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }
            var pastAdm = [];
            $scope.showAdmission = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Admission History"}).then(function (data) {
                    pastAdm = data.data;
                });
                return pastAdm;
            }
            var pastImmune = [];
            $scope.showImmune = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Immunisation"}).then(function (data) {
                    pastImmune = data.data;
                });
                return pastImmune;
            }
            var pastInsp = [];
            $scope.showInspection = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Inspection"}).then(function (data) {
                    pastInsp = data.data;
                });
                return pastInsp;
            }
            var pastPalp = [];
            $scope.showPalpation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Palpation"}).then(function (data) {
                    pastPalp = data.data;
                });
                return pastPalp;
            }
            var pastPerc = [];
            $scope.showPercussion = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Percussion"}).then(function (data) {
                    pastPerc = data.data;
                });
                return pastPerc;
            }
            var pastAus = [];
            $scope.showAuscultation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Auscultation"}).then(function (data) {
                    pastAus = data.data;
                });
                return pastAus;
            }
            var diag = [];
            $scope.showDiagnosis = function (search) {
                $http.post('/api/getDiagnosis',{"search":search}).then(function (data) {
                    diag = data.data;
                });
                return diag;
            }
            $scope.allergyChecker = function (item) {
                $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                    swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
                });
            }
            //Investigations
            $scope.getSubDepts = function (item) {
                $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                    $scope.subDepartments = data.data;
                });
            }
            //Dispositions
            $http.get('/api/getWards/'+facility_id).then(function (data) {
                $scope.wards = data.data;
            });
            $http.get('/api/getSpecialClinics/'+facility_id).then(function (data) {
                $scope.clinics = data.data;
            });
            $scope.patientAdmission = function (item,patient) {
                if(angular.isDefined(patient) == false){
                    swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                    return;
                }
                var object = angular.extend({},item, patient);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/admission.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }
            $scope.allergyChecker = function (item) {
                $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                    swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
                });
            }
            //Investigations
            $scope.getSubDepts = function (item) {
                $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                    $scope.subDepartments = data.data;
                });
            }
            $scope.getTests = function (item,category) {
                if(angular.isDefined(category)==false){swal("Please...select Patient first","","error");return;}
                var category_id =category.bill_id;
                if(category.main_category_id == 3){
                    category_id = 1;
                }
                $http.post('/api/getPanels',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.panels = data.data;
                });

                $http.post('/api/getSingleTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.singleTests = data.data;
                });

                $http.post('/api/getTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.labTests = data.data;
                    if(data.data.length>0){
                        swal("Items with red marks are currently not available..","But You can still order them if necessary","info");
                    }
                    else {
                        swal("If  no Tests displayed under this category..","Please, Contact Lab manager","info");
                    }
                });
            }
            $scope.investigationOrders = [];
            $scope.unavailableOrders = [];
            $scope.orders = function (item,isChecked,patient) {
                console.log()
                var status_id = 1;
                var filter = '';

                if(patient.patient_id == null){
                    swal("Ooops!! no Patient selected","Please search and select patient first..");
                    return;
                }
                if(isChecked==true){
                    for(var i=0;i<$scope.investigationOrders.length;i++)
                        if($scope.investigationOrders[i].item_id == item.item_id){
                            swal(item.item_name+' '+" already in your order list!");
                            return;
                        }
                    if(item.on_off== 1) {
                        if(patient.main_category_id != 1){ filter = patient.bill_id;}
                        $scope.investigationOrders.push({"requesting_department_id":patient.dept_id,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.item_price_id,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name,
                            "priority":'',"clinical_note":'',"payment_filter":filter});
                        console.log($scope.investigationOrders);
                    }
                    else {
                        for(var i=0;i<$scope.unavailableOrders.length;i++)
                            if($scope.unavailableOrders[i].item_id == item.item_id){
                                swal(item.item_name+' '+" already in your order list!");
                                return;
                            }
                        $scope.unavailableOrders.push({"facility_id":facility_id,"visit_date_id":patient.account_id,
                            "patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name});
                        return;
                    }
                }
            }
            $scope.saveInvestigation = function (item) {
                if ($scope.investigationOrders == "" && $scope.unavailableOrders == null) {
                    swal("You dont have Items to save!", "Please select Items first!");
                    return;
                }
                for (var i = 0; i < $scope.investigationOrders.length; i++) {
                    $scope.investigationOrders[i]["priority"] = item.priority;
                    $scope.investigationOrders[i]["clinical_note"] = item.clinical_note;
                }
                if($scope.investigationOrders !=""){
                    $http.post('/api/postInvestigations', $scope.investigationOrders).then(function (data) {
                    });
                    $scope.investigationOrders = [];

                }
                $http.post('/api/postUnavailableInvestigations',$scope.unavailableOrders).then(function (data) {

                });
                swal("Investigation order successfully saved!");

                $scope.unavailableOrders = [];

            }

            //Investigation results
            $scope.getLabResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.labResults = data.data;
                });
            }
            $scope.getRadResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.radResults = data.data;
                });
            }
//posting from history and examinations
            $scope.complaintz = [];
            $scope.addComplaint = function (item,duration,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                for(var i=0;i<$scope.complaintz.length;i++)
                    if($scope.complaintz[i].id == item.id){
                        swal(item.description+' '+"already in your wish list!");
                        return;
                    }
                $scope.complaintz.push({"admission_id":'',"patient_id":patient.patient_id,"facility_id":facility_id,"visit_date_id":patient.account_id,"user_id":user_id,"description":item.name,
                    "id":item.id,"duration":duration.durationqty,"duration_unit":duration.durationunit,"status":'Chief Complaints'});

                $("#complaint").val('');
                $("#duration_qty").val('');
                $("#duration_unit").val('');

            }
            $scope.saveComplaints = function (objectData,history) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please fill all necessary fields, click 'Add' Button then 'Save Complaints' Button to save data..","error");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['other_complaints']= history.other_complaints;
                    objectData[i]['hpi']= history.hpi;
                }
                $http.post('/api/postHistory',objectData).then(function (data) {

                });
                swal("Complaints successfully saved!","","success");
                $scope.complaintz=[];
                $("#other_complaints").val('');
                $("#hpi").val('');
            }
            $scope.rosTemp = [];
            $scope.reviewOfSystems = function (item,patient) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#cardio").val('');
            }
            $scope.reviewOfSystems2 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#respiratory").val('');
            }
            $scope.reviewOfSystems3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#gastrointestinal").val('');
            }
            $scope.reviewOfSystems4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#musculoskeletal").val('');
            }
            $scope.reviewOfSystems5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#genitourinary").val('');
            }
            $scope.reviewOfSystems6 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#cns").val('');
            }
            $scope.reviewOfSystems7 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#endocrine").val('');
            }
            $scope.saveRoS = function (objectData,rosSummary) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['review_summary'] = rosSummary;
                }
                $http.post('/api/postRoS',objectData).then(function (data) {

                });
                swal("Review of systems data successfully Saved!","","success");
                $scope.rosTemp = [];
                $("#review_summary").val('');
            }
            //Past medical history
            $scope.pastTemp = [];
            $scope.pastMedicals = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#allergy").val('');
            }
            $scope.pastMedicals3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#illness").val('');
            }
            $scope.pastMedicals4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#admission").val('');
            }
            $scope.pastMedicals5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#immunisation").val('');
            }

            $scope.savePastMedical = function (objectData,other_past_medicals) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0; i<objectData.length;i++){
                    objectData[i]['other_past_medicals'] = other_past_medicals;
                }
                $http.post('/api/postPastMed',objectData).then(function (data) {

                });
                swal("Past medical history data successfully Saved!","","success");
                $scope.pastTemp = [];
                $("#other_past_medicals").val('');

            }
            $scope.savePastDental = function (patient,details) {
                $http.post('/api/postPastDental',{"user_id":user_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"past_dental_history":details}).then(function (data) {

                });
                swal('Past dental history data successfully saved','','success');
                $("#past_dental_history").val('');
            }
            $scope.saveBirthHistory = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,
                    "antenatal":item.antenatal,"natal":item.natal,"post_natal":item.post_natal,"nutrition":item.nutrition,"growth":item.growth,"development":item.development};
                $http.post('/api/birthHistory',child).then(function (data) {
                    swal("Birth history data Successfully Saved!","","success");
                });
                $("#antenatal").val('');
                $("#natal").val('');
                $("#post_natal").val('');
                $("#nutrition").val('');
                $("#growth").val('');
                $("#development").val('');
            }
            $scope.saveObsGyn = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var obs = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"menarche":item.menarche,"menopause":item.menopause,"menstrual_cycles":item.menstrual_cycles,"pad_changes":item.pad_changes,
                    "recurrent_menstruation":item.recurrent_menstruation,"contraceptives":item.contraceptives,"pregnancy":item.pregnancy,"lnmp":item.lnmp,"gravidity":item.gravidity,"parity":item.parity,"living_children":item.living_children};
                $http.post('/api/postObs',obs).then(function (data) {
                    swal("Obstetrics and gynaecological data Successfully Saved!","","success");
                });
                $("#menarche").val('');
                $("#menopause").val('');
                $("#menstrual_cycles").val('');
                $("#pads").val('');
                $("#recurrent_menstruation").val('');
                $("#contraceptives").val('');
                $("#pregnancy").val('');
                $("#lnmp").val('');
                $("#gravidity").val('');
                $("#parity").val('');
                $("#living_children").val('');
            }
            //Physical Examinations
            $scope.removeFromSelection = function(item,objectdata){
                var indexremoveobject = objectdata.indexOf(item);
                objectdata.splice(indexremoveobject,1);
            }
            $scope.physicalMusculoskeletal = [];  $scope.physicalRespiratory = [];
            $scope.physicalCardiovascular = [];  $scope.physicalGastrointestinal = [];
            $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];

            $scope.physicalMusculo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalMusculoskeletal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#musc_inspect").val('');
                $("#musc_palpate").val('');
                $("#musc_percu").val('');
                $("#musc_ausc").val('');
            }
            $scope.physicalResp = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalRespiratory.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#resp_inspect").val('');
                $("#resp_palpate").val('');
                $("#resp_percus").val('');
                $("#resp_aus").val('');
            }
            $scope.physicalCardio = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCardiovascular.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#cardio_inspect").val('');
                $("#cardio_palpate").val('');
                $("#cardio_percus").val('');
                $("#cardio_aus").val('');
            }
            $scope.physicalGastro = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGastrointestinal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#gastro_inspect").val('');
                $("#gastro_palpate").val('');
                $("#gastro_percus").val('');
                $("#gastro_aus").val('');
            }
            $scope.physicalGenito = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGenitourinary.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#genito_inspect").val('');
                $("#genito_palpate").val('');
                $("#genito_percus").val('');
                $("#genito_aus").val('');
            }
            $scope.physicalCns = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCNS.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#cns_inspect").val('');
                $("#cns_palpate").val('');
                $("#cns_percus").val('');
                $("#cns_aus").val('');
            }
            $scope.physicalEndo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalEndocrine.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#endo_inspect").val('');
                $("#endo_palpate").val('');
                $("#endo_percus").val('');
                $("#endo_aus").val('');
            }
            $scope.savePhysicalExamination = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postPhysical',objectData).then(function (data) {

                });
                swal(objectData[0].system+'  ' +"system data successfully Saved!","","success");
                $scope.physicalMusculoskeletal = []; $scope.physicalRespiratory = [];  $scope.physicalCardiovascular = [];
                $scope.physicalGastrointestinal = [];  $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];
            }
            $scope.saveLocalExams = function (patient,examData) {

                if(examData == null){
                    swal('Please write examination for this patient first','','error'); return;
                }
                var local_examz = {"admission_id":'',"patient_id":patient.patient_id,
                    "visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"local_examination":examData}
                $http.post('/api/postLocalPhysical',local_examz).then(function (data) {
                });

                swal('Local Examination','data for this patient saved','success');
                $('#local_exam').val('');
            }
            //family and social history
            $scope.saveSocialCommunity = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"chronic_illness":item.chronic_illness,"substance_abuse":item.substance_abuse,"adoption":item.adoption,"others":item.others};
                $http.post('/api/familyHistory',child).then(function (data) {
                    swal("Family and social history data successfully Saved!","","success");
                });
                $("#chronic_illness").val('');
                $("#substance_abuse").val('');
                $("#adoption").val('');
                $("#others").val('');
            }
            //Provisional , differential and confirmed diagnosis
            $scope.diagnosisTemp =[];
            $scope.addProv = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addDiff = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addConf = function (item,patient,status) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.saveDiagnosis = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postDiagnosis',objectData).then(function (data) {
                    swal("Diagnosis data successfully Saved!","","success");
                });
                $scope.diagnosisTemp =[];
            }

            $scope.internalTransfer = function (clinic,patient) {
                var patientDetails = {"sender_clinic_id":9,"first_name":patient.first_name,"middle_name":patient.middle_name,"last_name":patient.last_name,
                    "medical_record_number":patient.medical_record_number,"gender":patient.gender,"dob":patient.dob,"visit_id":patient.account_id};
                var object = angular.extend({},clinic, patientDetails);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/internalTransfer.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
                $uibModalInstance.dismiss();
            }
            //Treatments:medication and procedures
            var mediData =[];
            $scope.medicines =[];
            $scope.medicinesOs =[];
            $scope.searchItems = function(searchKey,patient) {
                var pay_id =patient.bill_id;
                if(pay_id==null){
                    swal("Please search patient to be prescribed before searching Medicine!");
                    return;
                }
                if(patient.main_category_id == 3){
                    pay_id = 1;
                }
                $http.post('/api/getMedicine',{"search":searchKey,"facility_id":facility_id,"patient_category_id":pay_id}).then(function(data) {
                    mediData = data.data;

                });
                return mediData;

            }
            var balance=[];
            $scope.checkDosage = function (item_id,patient_id) {
                var item_name=item_id.item_name;
                $http.post('/api/dosageChecker',{"item_id":item_id.item_id,"patient_id":patient_id}).then(function (data) {
                    console.log(data.data);
                    if(data.data.length>0){
                        var diff = data.data[0].duration - data.data[0].days;
                        $scope.dosageCheck=data.data;
                        swal('ATTENTION',item_name+' In Dosage Progress '+ diff +' day(s) remained to Complete a Dosage','info');
                    }
                });

            }
            $scope.addMedicine = function (item,patient,dawa) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity = item.dose*item.duration*24/item.frequency;
                if(patient ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(dawa ==null){ swal("Please search and select medicine!"); return;}
                if(item.instructions ==null){ swal("Please Write Instructions and click 'Add to List' Button","","error"); return;}
                for(var i=0;i<$scope.medicines.length;i++)
                    if($scope.medicines[i].item_id == dawa.item_id){ swal(dawa.item_name+" already in your order list!"); return;}
                if(main_category != 1){ filter = patient.bill_id;}
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":dawa.item_id,"facility_id":facility_id}).then(function (data) {
                    balance = data.data;
                    console.log(balance)
                    if(balance.length >0 && balance[0].balance>=quantity){
                        $scope.medicines.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                            "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"","payment_filter":filter,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name,"dose_formulation":dawa.dose_formulation
                        });
                    }
                    else if (balance.length<1 || balance[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to prescribe anyway?");
                        if(conf== true){
                            for(var i=0;i<$scope.medicinesOs.length;i++)
                                if($scope.medicinesOs[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
                            $scope.medicinesOs.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                                "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"OS",
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item for Prescription");
                            return;
                        }
                    }
                });
            }
            $scope.saveMedicine = function () {
                if($scope.medicines == "" && $scope.medicinesOs == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.medicines !=""){
                    $http.post('/api/postMedicines',$scope.medicines).then(function (data) {

                    });
                    $scope.medicines = [];
                }
                $http.post('/api/outOfStockMedicine',$scope.medicinesOs).then(function (data) {

                });
                swal("Patient successfully prescribed!","","success");
                $scope.medicinesOs = [];
            }
            $scope.prevMedics = function (item) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
            }
            $scope.prevProcedure = function (item) {

                $http.post('/api/getPrevProcedures',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevProcedures = data.data;
                });
            }
            //procedures
            var procedureData =[];
            $scope.procedures =[];
            $scope.searchProcedures = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getPatientProcedures', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    procedureData = data.data;
                });
                return procedureData;
            }
            //medical supplies starts
            var supplies = [];
            var balance02 = [];
            $scope.supplies=[];
            $scope.suppliesOS=[];
            $scope.searchMediSupplies = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching medical supplies!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getMedicalSupplies', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    supplies = data.data;
                });
                return supplies;
            }
            $scope.addSupplies = function (patient,qty,item) {
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity =qty;
                if(patient ==null){ swal("Please search and select Patient","","error"); return; }
                if(item ==null){
                    swal("Please search and select Medical supplies!","","error"); return;
                }
                for(var i=0;i<$scope.supplies.length;i++)
                    if($scope.supplies[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(main_category != 1){ filter = patient.bill_id;}
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":item.item_id,"facility_id":facility_id}).then(function (data) {
                    balance02 = data.data;
                    if(balance02.length >0 && balance02[0].balance>=quantity){
                        $scope.supplies.push({"out_of_stock":'',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                        });
                    }
                    else if (balance02.length<1 || balance02[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to select it anyway?","","info");
                        if(conf== true){
                            for(var i=0;i<$scope.suppliesOS.length;i++)
                                if($scope.suppliesOS[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!"); return;}
                            $scope.suppliesOS.push({"out_of_stock":'OS',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item","info");
                            return;
                        }
                    }
                });
                console.log($scope.supplies);
                $("#supplies").val('');
                $("#qty").val('');
            }
            $scope.saveSupplies = function (){
                if($scope.supplies == "" && $scope.suppliesOS == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.supplies !=""){
                    $http.post('/api/postMedicalSupplies',$scope.supplies).then(function (data) {

                    });
                    $scope.supplies = [];
                }
                $http.post('/api/outOfStockMedicalSupplies',$scope.suppliesOS).then(function (data) {

                });
                swal("Patient's medical supplies successfully saved!","","success");
                $scope.suppliesOS = [];
            }
            //medical supplies ends

            $scope.getDefaultProcedures = function (patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getProcedures',{"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    $scope.defaultProcedures = data.data;
                });
            }
            $scope.addProcedure = function (item,patient) {
                var filter = '';
                var status_id = 1;
                if(patient.patient_id ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(item.item_id ==null){ swal("Please search and select Procedure!"); return;}
                for(var i=0;i<$scope.procedures.length;i++)
                    if($scope.procedures[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(patient.main_category_id != 1){ filter = patient.bill_id;}

                $scope.procedures.push({"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":1,"status_id":status_id,
                    "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                });
            }
            $scope.saveProcedures = function (objectData) {
                $http.post('/api/postPatientProcedures',objectData).then(function (data) {

                });
                swal("Patient procedures successfully saved!","","success");
                $scope.procedures = [];
            }

            $scope.deceased = function (item,corpse) {
                if(angular.isDefined(corpse)==false){
                    swal("An error occurred","Data not saved...Please write causes of death and click send to last office button","error");return;
                }
                var deceased = {"patient_id":item.patient_id,"user_id":user_id,"facility_id":facility_id,"immediate_cause":corpse.immediate_cause,"underlying_cause":corpse.underlying_cause};
                $http.post('/api/postDeceased',deceased).then(function (data) {

                });
                $scope.corpse = null;
                swal(item.first_name+' '+item.last_name+" sent to Last office","","success");
            }

        }
    ]);
})();

/**
 * Created by Mazigo Jr on 2017-05-22.
 */
(function () {
    'use strict';
    angular.module('authApp').controller('dentalHomeController',dentalHomeController);
    function dentalHomeController($scope,$state,$http,$rootScope,$uibModal) {
    var facility_id = $rootScope.currentUser.facility_id;
    var user_id = $rootScope.currentUser.id;
    angular.element(document).ready(function () {
        $http.post('/api/incomingDentalPatients',{"facility_id":facility_id,"dept_id":9}).then(function (data) {
           $scope.dentalPatients = data.data;
        });
    });
        var dentalData = [];
        $scope.showSearch = function (searchKey) {
            $http.post('/api/dentalAll',{"searchKey":searchKey,"facility_id":facility_id,"dept_id":9}).then(function (data) {
                dentalData = data.data;
            });
            return dentalData;
        }
        $scope.getDentalModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/dental/dental.html',
                size: 'lg',
                animation: true,
                controller: 'dentalController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
    }
})();

/**
 * Created by Mazigo Jr on 2017-05-22.
 */
(function () {
    'use strict';
    var app =  angular.module('authApp');
    app.controller('eyeController',['$scope','$http','$state','$rootScope','$uibModal','$uibModalInstance','object',
        function ($scope,$http,$state,$rootScope,$uibModal,$uibModalInstance,object) {
            $scope.selectedPatient = object;
            var user_id = $rootScope.currentUser.id;
            var facility_id = $rootScope.currentUser.facility_id;
            var patient_id = object.patient_id;
            $scope.setTab = function(newTab){
                $scope.tab = newTab;
            };
            $scope.isSet = function(tabNum){
                return $scope.tab === tabNum;
            }
            $scope.closeModal = function () {
                $uibModalInstance.dismiss();
            }
            $scope.removeFromSelection = function(item,objectdata){
                var indexremoveobject = objectdata.indexOf(item);
                objectdata.splice(indexremoveobject,1);
            }
            $scope.templates = [
                {   name: 'Admission',
                    url: 'admission.html'},
                {
                    name: 'Internal Referral',
                    url: 'internal.html'},
                {
                    name: 'External Referral',
                    url: 'referral.html'},
                {
                    name: 'Deceased',
                    url: 'deceased.html'}
            ];
            $scope.scharts = [
                { name:'6/60'},
                { name:'6/36'},
                { name:'6/24'},
                { name:'6/18'},
                { name:'6/12'},
                { name:'6/9'},
                { name:'6/6'},
                { name:'6/5'},
                { name:'E-chart'}
                ];
            $scope.cfingers=[
                { name:'5 metres'},
                { name:'4 metres'},
                { name:'3 metres'},
                { name:'2 metres'},
                { name:'1 metres'}
            ];
            $scope.snellenTemp = [];
            $scope.snelleen = function (item,patient,chart,category) {
                if(item==true){
                    for(var i=0;i<$scope.snellenTemp.length;i++)
                        if($scope.snellenTemp[i].name == chart.name){ swal(chart.name+" already in your order list!"); return;}
                    $scope.snellenTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.visit_id,"facility_id":facility_id,
                    "user_id":user_id,"description":chart.name,"sub_category":category});
                    console.log($scope.snellenTemp);
                }
                if(item==false){
                   return;
                }
            }
            $scope.eyeSide=[];
            $scope.eSide = function (item,patient) {
                $scope.eyeSide.push({"category":item});
                console.log($scope.eyeSide);
            }
            var eyeExamData = [];
            $scope.showSearch = function (searchKey,category) {
                $http.post('/api/eyeExaminations',{"searchKey":searchKey,"category":category}).then(function (data) {
                    eyeExamData = data.data;
            });
    return eyeExamData;
}
            $scope.eyeFindings = [];
            $scope.eyeExamination = function (item,patient) {
             for(var i=0;i<$scope.eyeFindings.length;i++)
                    if($scope.eyeFindings[i].id ==item.id){ swal(item.description+" already in your order list!"); return;}
                $scope.eyeFindings.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,
                    "user_id":user_id,"description":item.description,"sub_category":item.category});
                console.log($scope.eyeFindings);
            }
            $scope.saveSnellen = function (objectData) {
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['category'] = $scope.eyeSide[0].category;
                }
                console.log(objectData);
                console.log($scope.eyeSide[0].category);
                $http.post('/api/eyeFindings',objectData).then(function (data) {

                });
                swal(objectData[0].category+' charts data saved','','success');
                $scope.snellenTemp = [];
                $scope.eyeSide = [];

            }
            $scope.saveExamination = function (objectData) {
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['category'] = $scope.eyeSide[0].category;
                }
                $http.post('/api/eyeFindings',objectData).then(function (data) {

                });
                swal(objectData[0].category+' findings saved','','success');
                $scope.eyeFindings = [];
                $scope.eyeSide = [];

            }
//Previous History
            angular.element(document).ready(function () {
                $scope.setTab(1);
                $http.post('/api/previousVisits',{"patient_id":patient_id}).then(function (data) {
                    $scope.patientsVisits = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":3}).then(function (data) {
                    $scope.radiology = data.data;
                });
                $http.post('/api/getResults',{"patient_id":patient_id,"dept_id":2}).then(function (data) {
                    $scope.labInvestigations = data.data;
                });
            });
            $scope.getPatientReport = function (item) {

                $http.post('/api/prevHistory',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevHistory = data.data;
                });
                $http.post('/api/getPrevDiagnosis',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevDiagnosis = data.data;
                });
                $http.post('/api/getPrevRos',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevRos = data.data;
                });
                $http.post('/api/getPrevBirth',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevBirth = data.data;
                });
                $http.post('/api/getPrevObs',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevObs = data.data;
                });
                $http.post('/api/getPrevFamily',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevFamily = data.data;
                });
                $http.post('/api/getPrevPhysical',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevPhysical = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":2}).then(function (data) {
                    $scope.labInvestigationsz = data.data;
                });
                $http.post('/api/getInvestigationResults',{"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":3}).then(function (data) {
                    $scope.radiologyResults = data.data;
                });
                $http.post('/api/getPastMedicine',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                $http.post('/api/getPastProcedures',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.pastProcedures = data.data;
                });
                $http.post('/api/getAllergies',{"patient_id":item.patient_id,"date_attended":item.date_attended}).then(function (data) {
                    $scope.allergies = data.data;
                });

            }
            //chief complaints
            var chiefComplaints = [];
            $scope.complaints = function (search) {
                $http.post('/api/chiefComplaints',{"search":search}).then(function (data) {
                    chiefComplaints = data.data;
                });
                return chiefComplaints;
            }
            //review of systems
            var cardiovascular = [];
            $scope.showCardio = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Cardiovascular"}).then(function (data) {
                    cardiovascular = data.data;
                });
                return cardiovascular;
            }
            var Respiratory = [];
            $scope.showRespiratory = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Respiratory"}).then(function (data) {
                    Respiratory = data.data;
                });
                return Respiratory;
            }
            var gatro = [];
            $scope.showGastro = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Gastrointerstinal"}).then(function (data) {
                    gatro = data.data;
                });
                return gatro;
            }
            var musculo = [];
            $scope.showMusculo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Musculoskeletal"}).then(function (data) {
                    musculo = data.data;
                });
                return musculo;
            }
            var genito = [];
            $scope.showGenito = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Genitourinary"}).then(function (data) {
                    genito = data.data;
                });
                return genito;
            }
            var cns = [];
            $scope.showCNS = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Central Nervous System"}).then(function (data) {
                    cns = data.data;
                });
                return cns;
            }
            var endo = [];
            $scope.showEndo = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Endocrine"}).then(function (data) {
                    endo = data.data;
                });
                return endo;
            }
            var allergy = [];
            $scope.showAllergy = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Allergy"}).then(function (data) {
                    allergy = data.data;
                });
                return allergy;
            }
            var pastMed = [];
            $scope.showMedication = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Medication"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }

            var pastMed = [];
            $scope.showIllness = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Past Medical History"}).then(function (data) {
                    pastMed = data.data;
                });
                return pastMed;
            }
            var pastAdm = [];
            $scope.showAdmission = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Admission History"}).then(function (data) {
                    pastAdm = data.data;
                });
                return pastAdm;
            }
            var pastImmune = [];
            $scope.showImmune = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Immunisation"}).then(function (data) {
                    pastImmune = data.data;
                });
                return pastImmune;
            }
            var pastInsp = [];
            $scope.showInspection = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Inspection"}).then(function (data) {
                    pastInsp = data.data;
                });
                return pastInsp;
            }
            var pastPalp = [];
            $scope.showPalpation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Palpation"}).then(function (data) {
                    pastPalp = data.data;
                });
                return pastPalp;
            }
            var pastPerc = [];
            $scope.showPercussion = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Percussion"}).then(function (data) {
                    pastPerc = data.data;
                });
                return pastPerc;
            }
            var pastAus = [];
            $scope.showAuscultation = function (search) {
                $http.post('/api/reviewOfSystems',{"search":search,"category":"Auscultation"}).then(function (data) {
                    pastAus = data.data;
                });
                return pastAus;
            }
            var diag = [];
            $scope.showDiagnosis = function (search) {
                $http.post('/api/getDiagnosis',{"search":search}).then(function (data) {
                    diag = data.data;
                });
                return diag;
            }
            $scope.allergyChecker = function (item) {
                $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                    swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
                });
            }
            //Investigations
            $scope.getSubDepts = function (item) {
                $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                    $scope.subDepartments = data.data;
                });
            }
            //Dispositions
            $http.get('/api/getWards/'+facility_id).then(function (data) {
                $scope.wards = data.data;
            });
            $http.get('/api/getSpecialClinics/'+facility_id).then(function (data) {
                $scope.clinics = data.data;
            });
            $scope.patientAdmission = function (item,patient) {
                if(angular.isDefined(patient) == false){
                    swal("Oops! something went wrong..","Please search and select Patient then click ward button to admit patient!");
                    return;
                }
                var object = angular.extend({},item, patient);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/admission.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
            }
            $scope.allergyChecker = function (item) {
                $http.post('/api/getAllergy',{"patient_id":item.patient_id}).then(function (data) {
                    swal("This Patient is allergic to "+data.data[0].descriptions,"","info");
                });
            }
            //Investigations
            $scope.getSubDepts = function (item) {
                $http.post('/api/getSubDepts',{"department_id":item}).then(function (data) {
                    $scope.subDepartments = data.data;
                });
            }
            $scope.getTests = function (item,category) {
                if(angular.isDefined(category)==false){swal("Please...select Patient first","","error");return;}
                var category_id =category.bill_id;
                if(category.main_category_id == 3){
                    category_id = 1;
                }
                $http.post('/api/getPanels',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.panels = data.data;
                });

                $http.post('/api/getSingleTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.singleTests = data.data;
                });

                $http.post('/api/getTests',{"patient_category_id":category_id,"sub_dept_id":item,"facility_id":facility_id}).then(function (data) {
                    $scope.labTests = data.data;
                    if(data.data.length>0){
                        swal("Items with red marks are currently not available..","But You can still order them if necessary","info");
                    }
                    else {
                        swal("If  no Tests displayed under this category..","Please, Contact Lab manager","info");
                    }
                });
            }
            $scope.investigationOrders = [];
            $scope.unavailableOrders = [];
            $scope.orders = function (item,isChecked,patient) {
                console.log()
                var status_id = 1;
                var filter = '';

                if(patient.patient_id == null){
                    swal("Ooops!! no Patient selected","Please search and select patient first..");
                    return;
                }
                if(isChecked==true){
                    for(var i=0;i<$scope.investigationOrders.length;i++)
                        if($scope.investigationOrders[i].item_id == item.item_id){
                            swal(item.item_name+' '+" already in your order list!");
                            return;
                        }
                    if(item.on_off== 1) {
                        if(patient.main_category_id != 1){ filter = patient.bill_id;}
                        $scope.investigationOrders.push({"requesting_department_id":patient.dept_id,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.item_price_id,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name,
                            "priority":'',"clinical_note":'',"payment_filter":filter});
                        console.log($scope.investigationOrders);
                    }
                    else {
                        for(var i=0;i<$scope.unavailableOrders.length;i++)
                            if($scope.unavailableOrders[i].item_id == item.item_id){
                                swal(item.item_name+' '+" already in your order list!");
                                return;
                            }
                        $scope.unavailableOrders.push({"facility_id":facility_id,"visit_date_id":patient.account_id,
                            "patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name});
                        return;
                    }
                }
            }
            $scope.saveInvestigation = function (item) {
                if ($scope.investigationOrders == "" && $scope.unavailableOrders == null) {
                    swal("You dont have Items to save!", "Please select Items first!");
                    return;
                }
                for (var i = 0; i < $scope.investigationOrders.length; i++) {
                    $scope.investigationOrders[i]["priority"] = item.priority;
                    $scope.investigationOrders[i]["clinical_note"] = item.clinical_note;
                }
                if($scope.investigationOrders !=""){
                    $http.post('/api/postInvestigations', $scope.investigationOrders).then(function (data) {
                    });
                    $scope.investigationOrders = [];

                }
                $http.post('/api/postUnavailableInvestigations',$scope.unavailableOrders).then(function (data) {

                });
                swal("Investigation order successfully saved!");

                $scope.unavailableOrders = [];

            }

            //Investigation results
            $scope.getLabResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.labResults = data.data;
                });
            }
            $scope.getRadResults = function (item) {
                var results = {"patient_id":item.patient_id,"date_attended":item.date_attended,"dept_id":item.dept_id};
                $http.post('/api/getInvestigationResults',results).then(function (data) {
                    $scope.radResults = data.data;
                });
            }
//posting from history and examinations
            $scope.complaintz = [];
            $scope.addComplaint = function (item,duration,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                for(var i=0;i<$scope.complaintz.length;i++)
                    if($scope.complaintz[i].id == item.id){
                        swal(item.description+' '+"already in your wish list!");
                        return;
                    }
                $scope.complaintz.push({"admission_id":'',"patient_id":patient.patient_id,"facility_id":facility_id,"visit_date_id":patient.account_id,"user_id":user_id,"description":item.name,
                    "id":item.id,"duration":duration.durationqty,"duration_unit":duration.durationunit,"status":'Chief Complaints'});

                $("#complaint").val('');
                $("#duration_qty").val('');
                $("#duration_unit").val('');

            }
            $scope.saveComplaints = function (objectData,history) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please fill all necessary fields, click 'Add' Button then 'Save Complaints' Button to save data..","error");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['other_complaints']= history.other_complaints;
                    objectData[i]['hpi']= history.hpi;
                }
                $http.post('/api/postHistory',objectData).then(function (data) {

                });
                swal("Complaints successfully saved!","","success");
                $scope.complaintz=[];
                $("#other_complaints").val('');
                $("#hpi").val('');
            }
            $scope.rosTemp = [];
            $scope.reviewOfSystems = function (item,patient) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#cardio").val('');
            }
            $scope.reviewOfSystems2 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#respiratory").val('');
            }
            $scope.reviewOfSystems3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#gastrointestinal").val('');
            }
            $scope.reviewOfSystems4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#musculoskeletal").val('');
            }
            $scope.reviewOfSystems5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#genitourinary").val('');
            }
            $scope.reviewOfSystems6 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#cns").val('');
            }
            $scope.reviewOfSystems7 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.rosTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#endocrine").val('');
            }
            $scope.saveRoS = function (objectData,rosSummary) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0;i<objectData.length;i++){
                    objectData[i]['review_summary'] = rosSummary;
                }
                $http.post('/api/postRoS',objectData).then(function (data) {

                });
                swal("Review of systems data successfully Saved!","","success");
                $scope.rosTemp = [];
                $("#review_summary").val('');
            }
            //Past medical history
            $scope.pastTemp = [];
            $scope.pastMedicals = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#allergy").val('');
            }
            $scope.pastMedicals3 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#illness").val('');
            }
            $scope.pastMedicals4 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#admission").val('');
            }
            $scope.pastMedicals5 = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.pastTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system_id":item.id,"name":item.name,"status":item.category});
                $("#immunisation").val('');
            }

            $scope.savePastMedical = function (objectData,other_past_medicals) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                for(var i=0; i<objectData.length;i++){
                    objectData[i]['other_past_medicals'] = other_past_medicals;
                }
                $http.post('/api/postPastMed',objectData).then(function (data) {

                });
                swal("Past medical history data successfully Saved!","","success");
                $scope.pastTemp = [];
                $("#other_past_medicals").val('');

            }
            $scope.saveMedicals = function (patient,details) {
                $http.post('/api/postPastEye',{"user_id":user_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"past_medical_history":details}).then(function (data) {

                });
                swal('Past medical history data successfully saved','','success');
                $("#medical").val('');
            }
            $scope.saveOcular = function (patient,details) {
                $http.post('/api/postPastEye',{"user_id":user_id,"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"past_ocular_history":details}).then(function (data) {

                });
                swal('Past ocular history data successfully saved','','success');
                $("#ocular").val('');
            }
            $scope.saveBirthHistory = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,
                    "antenatal":item.antenatal,"natal":item.natal,"post_natal":item.post_natal,"nutrition":item.nutrition,"growth":item.growth,"development":item.development};
                $http.post('/api/birthHistory',child).then(function (data) {
                    swal("Birth history data Successfully Saved!","","success");
                });
                $("#antenatal").val('');
                $("#natal").val('');
                $("#post_natal").val('');
                $("#nutrition").val('');
                $("#growth").val('');
                $("#development").val('');
            }
            $scope.saveObsGyn = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var obs = {"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"menarche":item.menarche,"menopause":item.menopause,"menstrual_cycles":item.menstrual_cycles,"pad_changes":item.pad_changes,
                    "recurrent_menstruation":item.recurrent_menstruation,"contraceptives":item.contraceptives,"pregnancy":item.pregnancy,"lnmp":item.lnmp,"gravidity":item.gravidity,"parity":item.parity,"living_children":item.living_children};
                $http.post('/api/postObs',obs).then(function (data) {
                    swal("Obstetrics and gynaecological data Successfully Saved!","","success");
                });
                $("#menarche").val('');
                $("#menopause").val('');
                $("#menstrual_cycles").val('');
                $("#pads").val('');
                $("#recurrent_menstruation").val('');
                $("#contraceptives").val('');
                $("#pregnancy").val('');
                $("#lnmp").val('');
                $("#gravidity").val('');
                $("#parity").val('');
                $("#living_children").val('');
            }
            //Physical Examinations
            $scope.removeFromSelection = function(item,objectdata){
                var indexremoveobject = objectdata.indexOf(item);
                objectdata.splice(indexremoveobject,1);
            }
            $scope.physicalMusculoskeletal = [];  $scope.physicalRespiratory = [];
            $scope.physicalCardiovascular = [];  $scope.physicalGastrointestinal = [];
            $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];

            $scope.physicalMusculo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalMusculoskeletal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#musc_inspect").val('');
                $("#musc_palpate").val('');
                $("#musc_percu").val('');
                $("#musc_ausc").val('');
            }
            $scope.physicalResp = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalRespiratory.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#resp_inspect").val('');
                $("#resp_palpate").val('');
                $("#resp_percus").val('');
                $("#resp_aus").val('');
            }
            $scope.physicalCardio = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCardiovascular.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#cardio_inspect").val('');
                $("#cardio_palpate").val('');
                $("#cardio_percus").val('');
                $("#cardio_aus").val('');
            }
            $scope.physicalGastro = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGastrointestinal.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#gastro_inspect").val('');
                $("#gastro_palpate").val('');
                $("#gastro_percus").val('');
                $("#gastro_aus").val('');
            }
            $scope.physicalGenito = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalGenitourinary.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#genito_inspect").val('');
                $("#genito_palpate").val('');
                $("#genito_percus").val('');
                $("#genito_aus").val('');
            }
            $scope.physicalCns = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalCNS.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#cns_inspect").val('');
                $("#cns_palpate").val('');
                $("#cns_percus").val('');
                $("#cns_aus").val('');
            }
            $scope.physicalEndo = function (item,patient,system) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.physicalEndocrine.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"system":system,"category":item.category,"observation":item.name});
                $("#endo_inspect").val('');
                $("#endo_palpate").val('');
                $("#endo_percus").val('');
                $("#endo_aus").val('');
            }
            $scope.savePhysicalExamination = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postPhysical',objectData).then(function (data) {

                });
                swal(objectData[0].system+'  ' +"system data successfully Saved!","","success");
                $scope.physicalMusculoskeletal = []; $scope.physicalRespiratory = [];  $scope.physicalCardiovascular = [];
                $scope.physicalGastrointestinal = [];  $scope.physicalGenitourinary = []; $scope.physicalCNS = []; $scope.physicalEndocrine = [];
            }
            $scope.saveLocalExams = function (patient,examData) {

                if(examData == null){
                    swal('Please write examination for this patient first','','error'); return;
                }
                var local_examz = {"admission_id":'',"patient_id":patient.patient_id,
                    "visit_date_id":patient.account_id,"user_id":user_id,"facility_id":facility_id,"local_examination":examData}
                $http.post('/api/postLocalPhysical',local_examz).then(function (data) {
                });

                swal('Local Examination','data for this patient saved','success');
                $('#local_exam').val('');
            }
            //family and social history
            $scope.saveSocialCommunity = function (item,patient) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                var child = {"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"chronic_illness":item.chronic_illness,"substance_abuse":item.substance_abuse,"adoption":item.adoption,"others":item.others};
                $http.post('/api/familyHistory',child).then(function (data) {
                    swal("Family and social history data successfully Saved!","","success");
                });
                $("#chronic_illness").val('');
                $("#substance_abuse").val('');
                $("#adoption").val('');
                $("#others").val('');
            }
            //Provisional , differential and confirmed diagnosis
            $scope.diagnosisTemp =[];
            $scope.addProv = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addDiff = function (item,patient,status) {

                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.addConf = function (item,patient,status) {
                if(patient.patient_id == null){ swal("Ooops!! no Patient selected","Please search and select patient first.."); return; }
                $scope.diagnosisTemp.push({"admission_id":'',"patient_id":patient.patient_id,"visit_date_id":patient.account_id,"facility_id":facility_id,"user_id":user_id,"diagnosis_description_id":item.id,"description":item.description,"status":status});
            }
            $scope.saveDiagnosis = function (objectData) {
                if(objectData == "") {
                    swal("Oops Data not saved!", "Please search and select items then click 'Save' button to save data..");
                    return;
                }
                $http.post('/api/postDiagnosis',objectData).then(function (data) {
                    swal("Diagnosis data successfully Saved!","","success");
                });
                $scope.diagnosisTemp =[];
            }

            $scope.internalTransfer = function (clinic,patient) {
                console.log(clinic);
                var patientDetails = {"sender_clinic_id":10,"first_name":patient.first_name,"middle_name":patient.middle_name,"last_name":patient.last_name,
                    "medical_record_number":patient.medical_record_number,"gender":patient.gender,"dob":patient.dob,"visit_id":patient.account_id};
                var object = angular.extend({},clinic, patientDetails);
                var modalInstance = $uibModal.open({
                    templateUrl: '/views/modules/ClinicalServices/internalTransfer.html',
                    size: 'lg',
                    animation: true,
                    controller: 'admissionModal',
                    resolve:{
                        object: function () {
                            return object;
                        }
                    }
                });
                $uibModalInstance.dismiss();
            }
            //Treatments:medication and procedures
            var mediData =[];
            $scope.medicines =[];
            $scope.medicinesOs =[];
            $scope.searchItems = function(searchKey,patient) {
                var pay_id =patient.bill_id;
                if(pay_id==null){
                    swal("Please search patient to be prescribed before searching Medicine!");
                    return;
                }
                if(patient.main_category_id == 3){
                    pay_id = 1;
                }
                $http.post('/api/getMedicine',{"search":searchKey,"facility_id":facility_id,"patient_category_id":pay_id}).then(function(data) {
                    mediData = data.data;

                });
                return mediData;

            }
            var balance=[];
            $scope.checkDosage = function (item_id,patient_id) {
                var item_name=item_id.item_name;
                $http.post('/api/dosageChecker',{"item_id":item_id.item_id,"patient_id":patient_id}).then(function (data) {
                    console.log(data.data);
                    if(data.data.length>0){
                        var diff = data.data[0].duration - data.data[0].days;
                        $scope.dosageCheck=data.data;
                        swal('ATTENTION',item_name+' In Dosage Progress '+ diff +' day(s) remained to Complete a Dosage','info');
                    }
                });

            }
            $scope.addMedicine = function (item,patient,dawa) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity = item.dose*item.duration*24/item.frequency;
                if(patient ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(dawa ==null){ swal("Please search and select medicine!"); return;}
                if(item.instructions ==null){ swal("Please Write Instructions and click 'Add to List' Button","","error"); return;}
                for(var i=0;i<$scope.medicines.length;i++)
                    if($scope.medicines[i].item_id == dawa.item_id){ swal(dawa.item_name+" already in your order list!"); return;}
                if(main_category != 1){ filter = patient.bill_id;}
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":dawa.item_id,"facility_id":facility_id}).then(function (data) {
                    balance = data.data;
                    console.log(balance)
                    if(balance.length >0 && balance[0].balance>=quantity){
                        $scope.medicines.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                            "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"","payment_filter":filter,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name,"dose_formulation":dawa.dose_formulation
                        });
                    }
                    else if (balance.length<1 || balance[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to prescribe anyway?");
                        if(conf== true){
                            for(var i=0;i<$scope.medicinesOs.length;i++)
                                if($scope.medicinesOs[i].item_id == dawa.item_id){ swal("Item already in your order list!"); return;}
                            $scope.medicinesOs.push({"facility_id":facility_id,"item_type_id":dawa.item_type_id,"item_price_id":dawa.price_id,"quantity":quantity,"status_id":status_id,
                                "dose":item.dose,"frequency":item.frequency,"duration":item.duration,"instructions":item.instructions,"out_of_stock":"OS",
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":dawa.item_id,"item_name":dawa.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item for Prescription");
                            return;
                        }
                    }
                });
            }
            $scope.saveMedicine = function () {
                if($scope.medicines == "" && $scope.medicinesOs == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.medicines !=""){
                    $http.post('/api/postMedicines',$scope.medicines).then(function (data) {

                    });
                    $scope.medicines = [];
                }
                $http.post('/api/outOfStockMedicine',$scope.medicinesOs).then(function (data) {

                });
                swal("Patient successfully prescribed!","","success");
                $scope.medicinesOs = [];
            }
            $scope.prevMedics = function (item) {
                $http.post('/api/getPrevMedicine',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevMedicines = data.data;
                });
            }
            $scope.prevProcedure = function (item) {

                $http.post('/api/getPrevProcedures',{"patient_id":item.patient_id}).then(function (data) {
                    $scope.prevProcedures = data.data;
                });
            }
            //procedures
            var procedureData =[];
            $scope.procedures =[];
            $scope.searchProcedures = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getPatientProcedures', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    procedureData = data.data;
                });
                return procedureData;
            }
            //medical supplies starts
            var supplies = [];
            var balance02 = [];
            $scope.supplies=[];
            $scope.suppliesOS=[];
            $scope.searchMediSupplies = function(searchKey,patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching medical supplies!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getMedicalSupplies', {"search": searchKey,"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    supplies = data.data;
                });
                return supplies;
            }
            $scope.addSupplies = function (patient,qty,item) {
                var status_id = 1;
                var filter = '';
                var main_category = patient.main_category_id;

                var quantity =qty;
                if(patient ==null){ swal("Please search and select Patient","","error"); return; }
                if(item ==null){
                    swal("Please search and select Medical supplies!","","error"); return;
                }
                for(var i=0;i<$scope.supplies.length;i++)
                    if($scope.supplies[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(main_category != 1){ filter = patient.bill_id;}
                if(main_category == 3){  main_category=1;}
                $http.post('/api/balanceCheck',{"main_category_id":main_category,"item_id":item.item_id,"facility_id":facility_id}).then(function (data) {
                    balance02 = data.data;
                    if(balance02.length >0 && balance02[0].balance>=quantity){
                        $scope.supplies.push({"out_of_stock":'',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                            "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                        });
                    }
                    else if (balance02.length<1 || balance02[0].balance<quantity){
                        var conf= confirm("This Item is not available in Store..Do you want to select it anyway?","","info");
                        if(conf== true){
                            for(var i=0;i<$scope.suppliesOS.length;i++)
                                if($scope.suppliesOS[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!"); return;}
                            $scope.suppliesOS.push({"out_of_stock":'OS',"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":qty,"status_id":status_id,
                                "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                            });
                            swal("Item added under Out of Stock category","","success");
                        }else {
                            swal("canceled","Choose different Item","info");
                            return;
                        }
                    }
                });
                console.log($scope.supplies);
                $("#supplies").val('');
                $("#qty").val('');
            }
            $scope.saveSupplies = function (){
                if($scope.supplies == "" && $scope.suppliesOS == ""){
                    swal("No Items to Save,Please choose items..","","error");
                    return;
                }
                if($scope.supplies !=""){
                    $http.post('/api/postMedicalSupplies',$scope.supplies).then(function (data) {

                    });
                    $scope.supplies = [];
                }
                $http.post('/api/outOfStockMedicalSupplies',$scope.suppliesOS).then(function (data) {

                });
                swal("Patient's medical supplies successfully saved!","","success");
                $scope.suppliesOS = [];
            }
            //medical supplies ends

            $scope.getDefaultProcedures = function (patient) {
                var pay_id = patient.bill_id;
                if (pay_id == null) {swal("Please search patient before searching procedures!");return;}
                if (patient.main_category_id == 3) {pay_id = 1; }
                $http.post('/api/getProcedures',{"facility_id": facility_id,"patient_category_id": pay_id}).then(function (data) {
                    $scope.defaultProcedures = data.data;
                });
            }
            $scope.addProcedure = function (item,patient) {
                var filter = '';
                var status_id = 1;
                if(patient.patient_id ==null){ swal("Please search and select Patient to prescribe"); return; }
                if(item.item_id ==null){ swal("Please search and select Procedure!"); return;}
                for(var i=0;i<$scope.procedures.length;i++)
                    if($scope.procedures[i].item_id == item.item_id){ swal(item.item_name+" already in your order list!","","info"); return;}
                if(patient.main_category_id != 1){ filter = patient.bill_id;}

                $scope.procedures.push({"payment_filter":filter,"admission_id":'',"facility_id":facility_id,"item_type_id":item.item_type_id,"item_price_id":item.price_id,"quantity":1,"status_id":status_id,
                    "account_number_id":patient.account_id,"patient_id":patient.patient_id,"user_id":user_id,"item_id":item.item_id,"item_name":item.item_name
                });
            }
            $scope.saveProcedures = function (objectData) {
                $http.post('/api/postPatientProcedures',objectData).then(function (data) {

                });
                swal("Patient procedures successfully saved!","","success");
                $scope.procedures = [];
            }

            $scope.deceased = function (item,corpse) {
                if(angular.isDefined(corpse)==false){
                    swal("An error occurred","Data not saved...Please write causes of death and click send to last office button","error");return;
                }
                var deceased = {"patient_id":item.patient_id,"user_id":user_id,"facility_id":facility_id,"immediate_cause":corpse.immediate_cause,"underlying_cause":corpse.underlying_cause};
                $http.post('/api/postDeceased',deceased).then(function (data) {

                });
                $scope.corpse = null;
                swal(item.first_name+' '+item.last_name+" sent to Last office","","success");
            }

        }
    ]);
})();

/**
 * Created by Mazigo Jr on 2017-05-22.
 */
(function () {
    'use strict';
    angular.module('authApp').controller('eyeHomeController',eyeHomeController);
    function eyeHomeController($scope,$state,$http,$rootScope,$uibModal) {
        var facility_id = $rootScope.currentUser.facility_id;
        var user_id = $rootScope.currentUser.id;
        angular.element(document).ready(function () {
            $http.post('/api/incomingEyePatients',{"facility_id":facility_id,"dept_id":8}).then(function (data) {
                $scope.eyePatients = data.data;
            });
        });
        var eyeData = [];
        $scope.showSearch = function (searchKey) {
            $http.post('/api/eyeAll',{"searchKey":searchKey,"facility_id":facility_id,"dept_id":8}).then(function (data) {
                eyeData = data.data;
            });
            return eyeData;
        }
        $scope.getEyeModal = function (item) {
            var object = item;
            var modalInstance = $uibModal.open({
                templateUrl: '/views/modules/clinic/eye/eye.html',
                size: 'lg',
                animation: true,
                controller: 'eyeController',
                windowClass: 'app-modal-window',
                resolve:{
                    object: function () {
                        return object;
                    }
                }
            });
        }
    }
})();
